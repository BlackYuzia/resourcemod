// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connectionless_netmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connectionless_5fnetmessages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_connectionless_5fnetmessages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "netmessages.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_connectionless_5fnetmessages_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_connectionless_5fnetmessages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_connectionless_5fnetmessages_2eproto;
class C2S_CONNECTION_Message;
struct C2S_CONNECTION_MessageDefaultTypeInternal;
extern C2S_CONNECTION_MessageDefaultTypeInternal _C2S_CONNECTION_Message_default_instance_;
class C2S_CONNECT_Message;
struct C2S_CONNECT_MessageDefaultTypeInternal;
extern C2S_CONNECT_MessageDefaultTypeInternal _C2S_CONNECT_Message_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class C2S_CONNECT_Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:C2S_CONNECT_Message) */ {
 public:
  inline C2S_CONNECT_Message() : C2S_CONNECT_Message(nullptr) {}
  ~C2S_CONNECT_Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_CONNECT_Message(::google::protobuf::internal::ConstantInitialized);

  C2S_CONNECT_Message(const C2S_CONNECT_Message& from);
  C2S_CONNECT_Message(C2S_CONNECT_Message&& from) noexcept
    : C2S_CONNECT_Message() {
    *this = ::std::move(from);
  }

  inline C2S_CONNECT_Message& operator=(const C2S_CONNECT_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CONNECT_Message& operator=(C2S_CONNECT_Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CONNECT_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CONNECT_Message* internal_default_instance() {
    return reinterpret_cast<const C2S_CONNECT_Message*>(
               &_C2S_CONNECT_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_CONNECT_Message& a, C2S_CONNECT_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CONNECT_Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CONNECT_Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CONNECT_Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CONNECT_Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_CONNECT_Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C2S_CONNECT_Message& from) {
    C2S_CONNECT_Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CONNECT_Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "C2S_CONNECT_Message";
  }
  protected:
  explicit C2S_CONNECT_Message(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSplitplayersFieldNumber = 7,
    kEncryptedPasswordFieldNumber = 6,
    kAuthSteamFieldNumber = 8,
    kChallengeContextFieldNumber = 9,
    kHostVersionFieldNumber = 1,
    kAuthProtocolFieldNumber = 2,
    kReservationCookieFieldNumber = 4,
    kChallengeNumberFieldNumber = 3,
    kLowViolenceFieldNumber = 5,
    kUseSnpFieldNumber = 10,
  };
  // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
  int splitplayers_size() const;
  private:
  int _internal_splitplayers_size() const;

  public:
  void clear_splitplayers() ;
  ::CCLCMsg_SplitPlayerConnect* mutable_splitplayers(int index);
  ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >*
      mutable_splitplayers();
  private:
  const ::google::protobuf::RepeatedPtrField<::CCLCMsg_SplitPlayerConnect>& _internal_splitplayers() const;
  ::google::protobuf::RepeatedPtrField<::CCLCMsg_SplitPlayerConnect>* _internal_mutable_splitplayers();
  public:
  const ::CCLCMsg_SplitPlayerConnect& splitplayers(int index) const;
  ::CCLCMsg_SplitPlayerConnect* add_splitplayers();
  const ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >&
      splitplayers() const;
  // optional bytes encrypted_password = 6;
  bool has_encrypted_password() const;
  void clear_encrypted_password() ;
  const std::string& encrypted_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_password(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_password();
  PROTOBUF_NODISCARD std::string* release_encrypted_password();
  void set_allocated_encrypted_password(std::string* ptr);

  private:
  const std::string& _internal_encrypted_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_password(
      const std::string& value);
  std::string* _internal_mutable_encrypted_password();

  public:
  // optional bytes auth_steam = 8;
  bool has_auth_steam() const;
  void clear_auth_steam() ;
  const std::string& auth_steam() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_auth_steam(Arg_&& arg, Args_... args);
  std::string* mutable_auth_steam();
  PROTOBUF_NODISCARD std::string* release_auth_steam();
  void set_allocated_auth_steam(std::string* ptr);

  private:
  const std::string& _internal_auth_steam() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_steam(
      const std::string& value);
  std::string* _internal_mutable_auth_steam();

  public:
  // optional string challenge_context = 9;
  bool has_challenge_context() const;
  void clear_challenge_context() ;
  const std::string& challenge_context() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_challenge_context(Arg_&& arg, Args_... args);
  std::string* mutable_challenge_context();
  PROTOBUF_NODISCARD std::string* release_challenge_context();
  void set_allocated_challenge_context(std::string* ptr);

  private:
  const std::string& _internal_challenge_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_challenge_context(
      const std::string& value);
  std::string* _internal_mutable_challenge_context();

  public:
  // optional uint32 host_version = 1;
  bool has_host_version() const;
  void clear_host_version() ;
  ::uint32_t host_version() const;
  void set_host_version(::uint32_t value);

  private:
  ::uint32_t _internal_host_version() const;
  void _internal_set_host_version(::uint32_t value);

  public:
  // optional uint32 auth_protocol = 2;
  bool has_auth_protocol() const;
  void clear_auth_protocol() ;
  ::uint32_t auth_protocol() const;
  void set_auth_protocol(::uint32_t value);

  private:
  ::uint32_t _internal_auth_protocol() const;
  void _internal_set_auth_protocol(::uint32_t value);

  public:
  // optional fixed64 reservation_cookie = 4;
  bool has_reservation_cookie() const;
  void clear_reservation_cookie() ;
  ::uint64_t reservation_cookie() const;
  void set_reservation_cookie(::uint64_t value);

  private:
  ::uint64_t _internal_reservation_cookie() const;
  void _internal_set_reservation_cookie(::uint64_t value);

  public:
  // optional uint32 challenge_number = 3;
  bool has_challenge_number() const;
  void clear_challenge_number() ;
  ::uint32_t challenge_number() const;
  void set_challenge_number(::uint32_t value);

  private:
  ::uint32_t _internal_challenge_number() const;
  void _internal_set_challenge_number(::uint32_t value);

  public:
  // optional bool low_violence = 5;
  bool has_low_violence() const;
  void clear_low_violence() ;
  bool low_violence() const;
  void set_low_violence(bool value);

  private:
  bool _internal_low_violence() const;
  void _internal_set_low_violence(bool value);

  public:
  // optional sint32 use_snp = 10;
  bool has_use_snp() const;
  void clear_use_snp() ;
  ::int32_t use_snp() const;
  void set_use_snp(::int32_t value);

  private:
  ::int32_t _internal_use_snp() const;
  void _internal_set_use_snp(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:C2S_CONNECT_Message)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 1, 53, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect > splitplayers_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_password_;
    ::google::protobuf::internal::ArenaStringPtr auth_steam_;
    ::google::protobuf::internal::ArenaStringPtr challenge_context_;
    ::uint32_t host_version_;
    ::uint32_t auth_protocol_;
    ::uint64_t reservation_cookie_;
    ::uint32_t challenge_number_;
    bool low_violence_;
    ::int32_t use_snp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connectionless_5fnetmessages_2eproto;
};// -------------------------------------------------------------------

class C2S_CONNECTION_Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:C2S_CONNECTION_Message) */ {
 public:
  inline C2S_CONNECTION_Message() : C2S_CONNECTION_Message(nullptr) {}
  ~C2S_CONNECTION_Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_CONNECTION_Message(::google::protobuf::internal::ConstantInitialized);

  C2S_CONNECTION_Message(const C2S_CONNECTION_Message& from);
  C2S_CONNECTION_Message(C2S_CONNECTION_Message&& from) noexcept
    : C2S_CONNECTION_Message() {
    *this = ::std::move(from);
  }

  inline C2S_CONNECTION_Message& operator=(const C2S_CONNECTION_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CONNECTION_Message& operator=(C2S_CONNECTION_Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CONNECTION_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CONNECTION_Message* internal_default_instance() {
    return reinterpret_cast<const C2S_CONNECTION_Message*>(
               &_C2S_CONNECTION_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2S_CONNECTION_Message& a, C2S_CONNECTION_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CONNECTION_Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CONNECTION_Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CONNECTION_Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CONNECTION_Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_CONNECTION_Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C2S_CONNECTION_Message& from) {
    C2S_CONNECTION_Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CONNECTION_Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "C2S_CONNECTION_Message";
  }
  protected:
  explicit C2S_CONNECTION_Message(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddonNameFieldNumber = 1,
    kUseSnpFieldNumber = 2,
  };
  // optional string addon_name = 1;
  bool has_addon_name() const;
  void clear_addon_name() ;
  const std::string& addon_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_addon_name(Arg_&& arg, Args_... args);
  std::string* mutable_addon_name();
  PROTOBUF_NODISCARD std::string* release_addon_name();
  void set_allocated_addon_name(std::string* ptr);

  private:
  const std::string& _internal_addon_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addon_name(
      const std::string& value);
  std::string* _internal_mutable_addon_name();

  public:
  // optional bool use_snp = 2;
  bool has_use_snp() const;
  void clear_use_snp() ;
  bool use_snp() const;
  void set_use_snp(bool value);

  private:
  bool _internal_use_snp() const;
  void _internal_set_use_snp(bool value);

  public:
  // @@protoc_insertion_point(class_scope:C2S_CONNECTION_Message)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr addon_name_;
    bool use_snp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connectionless_5fnetmessages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// C2S_CONNECT_Message

// optional uint32 host_version = 1;
inline bool C2S_CONNECT_Message::has_host_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_host_version() {
  _impl_.host_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t C2S_CONNECT_Message::host_version() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.host_version)
  return _internal_host_version();
}
inline void C2S_CONNECT_Message::set_host_version(::uint32_t value) {
  _internal_set_host_version(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.host_version)
}
inline ::uint32_t C2S_CONNECT_Message::_internal_host_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.host_version_;
}
inline void C2S_CONNECT_Message::_internal_set_host_version(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.host_version_ = value;
}

// optional uint32 auth_protocol = 2;
inline bool C2S_CONNECT_Message::has_auth_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_auth_protocol() {
  _impl_.auth_protocol_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t C2S_CONNECT_Message::auth_protocol() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.auth_protocol)
  return _internal_auth_protocol();
}
inline void C2S_CONNECT_Message::set_auth_protocol(::uint32_t value) {
  _internal_set_auth_protocol(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.auth_protocol)
}
inline ::uint32_t C2S_CONNECT_Message::_internal_auth_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.auth_protocol_;
}
inline void C2S_CONNECT_Message::_internal_set_auth_protocol(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.auth_protocol_ = value;
}

// optional uint32 challenge_number = 3;
inline bool C2S_CONNECT_Message::has_challenge_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_challenge_number() {
  _impl_.challenge_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t C2S_CONNECT_Message::challenge_number() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.challenge_number)
  return _internal_challenge_number();
}
inline void C2S_CONNECT_Message::set_challenge_number(::uint32_t value) {
  _internal_set_challenge_number(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.challenge_number)
}
inline ::uint32_t C2S_CONNECT_Message::_internal_challenge_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.challenge_number_;
}
inline void C2S_CONNECT_Message::_internal_set_challenge_number(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.challenge_number_ = value;
}

// optional fixed64 reservation_cookie = 4;
inline bool C2S_CONNECT_Message::has_reservation_cookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_reservation_cookie() {
  _impl_.reservation_cookie_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t C2S_CONNECT_Message::reservation_cookie() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.reservation_cookie)
  return _internal_reservation_cookie();
}
inline void C2S_CONNECT_Message::set_reservation_cookie(::uint64_t value) {
  _internal_set_reservation_cookie(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.reservation_cookie)
}
inline ::uint64_t C2S_CONNECT_Message::_internal_reservation_cookie() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reservation_cookie_;
}
inline void C2S_CONNECT_Message::_internal_set_reservation_cookie(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.reservation_cookie_ = value;
}

// optional bool low_violence = 5;
inline bool C2S_CONNECT_Message::has_low_violence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_low_violence() {
  _impl_.low_violence_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool C2S_CONNECT_Message::low_violence() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.low_violence)
  return _internal_low_violence();
}
inline void C2S_CONNECT_Message::set_low_violence(bool value) {
  _internal_set_low_violence(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.low_violence)
}
inline bool C2S_CONNECT_Message::_internal_low_violence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_violence_;
}
inline void C2S_CONNECT_Message::_internal_set_low_violence(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.low_violence_ = value;
}

// optional bytes encrypted_password = 6;
inline bool C2S_CONNECT_Message::has_encrypted_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_encrypted_password() {
  _impl_.encrypted_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& C2S_CONNECT_Message::encrypted_password() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.encrypted_password)
  return _internal_encrypted_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_CONNECT_Message::set_encrypted_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.encrypted_password_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.encrypted_password)
}
inline std::string* C2S_CONNECT_Message::mutable_encrypted_password() {
  std::string* _s = _internal_mutable_encrypted_password();
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.encrypted_password)
  return _s;
}
inline const std::string& C2S_CONNECT_Message::_internal_encrypted_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.encrypted_password_.Get();
}
inline void C2S_CONNECT_Message::_internal_set_encrypted_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.encrypted_password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_CONNECT_Message::_internal_mutable_encrypted_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.encrypted_password_.Mutable( GetArenaForAllocation());
}
inline std::string* C2S_CONNECT_Message::release_encrypted_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:C2S_CONNECT_Message.encrypted_password)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.encrypted_password_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void C2S_CONNECT_Message::set_allocated_encrypted_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.encrypted_password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.encrypted_password_.IsDefault()) {
          _impl_.encrypted_password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.encrypted_password)
}

// repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
inline int C2S_CONNECT_Message::_internal_splitplayers_size() const {
  return _internal_splitplayers().size();
}
inline int C2S_CONNECT_Message::splitplayers_size() const {
  return _internal_splitplayers_size();
}
inline ::CCLCMsg_SplitPlayerConnect* C2S_CONNECT_Message::mutable_splitplayers(int index) {
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.splitplayers)
  return _internal_mutable_splitplayers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >*
C2S_CONNECT_Message::mutable_splitplayers() {
  // @@protoc_insertion_point(field_mutable_list:C2S_CONNECT_Message.splitplayers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_splitplayers();
}
inline const ::CCLCMsg_SplitPlayerConnect& C2S_CONNECT_Message::splitplayers(int index) const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.splitplayers)
    return _internal_splitplayers().Get(index);
}
inline ::CCLCMsg_SplitPlayerConnect* C2S_CONNECT_Message::add_splitplayers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::CCLCMsg_SplitPlayerConnect* _add = _internal_mutable_splitplayers()->Add();
  // @@protoc_insertion_point(field_add:C2S_CONNECT_Message.splitplayers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >&
C2S_CONNECT_Message::splitplayers() const {
  // @@protoc_insertion_point(field_list:C2S_CONNECT_Message.splitplayers)
  return _internal_splitplayers();
}
inline const ::google::protobuf::RepeatedPtrField<::CCLCMsg_SplitPlayerConnect>&
C2S_CONNECT_Message::_internal_splitplayers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.splitplayers_;
}
inline ::google::protobuf::RepeatedPtrField<::CCLCMsg_SplitPlayerConnect>*
C2S_CONNECT_Message::_internal_mutable_splitplayers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.splitplayers_;
}

// optional bytes auth_steam = 8;
inline bool C2S_CONNECT_Message::has_auth_steam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_auth_steam() {
  _impl_.auth_steam_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& C2S_CONNECT_Message::auth_steam() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.auth_steam)
  return _internal_auth_steam();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_CONNECT_Message::set_auth_steam(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auth_steam_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.auth_steam)
}
inline std::string* C2S_CONNECT_Message::mutable_auth_steam() {
  std::string* _s = _internal_mutable_auth_steam();
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.auth_steam)
  return _s;
}
inline const std::string& C2S_CONNECT_Message::_internal_auth_steam() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.auth_steam_.Get();
}
inline void C2S_CONNECT_Message::_internal_set_auth_steam(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auth_steam_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_CONNECT_Message::_internal_mutable_auth_steam() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.auth_steam_.Mutable( GetArenaForAllocation());
}
inline std::string* C2S_CONNECT_Message::release_auth_steam() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:C2S_CONNECT_Message.auth_steam)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.auth_steam_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_steam_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void C2S_CONNECT_Message::set_allocated_auth_steam(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.auth_steam_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.auth_steam_.IsDefault()) {
          _impl_.auth_steam_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.auth_steam)
}

// optional string challenge_context = 9;
inline bool C2S_CONNECT_Message::has_challenge_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_challenge_context() {
  _impl_.challenge_context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& C2S_CONNECT_Message::challenge_context() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.challenge_context)
  return _internal_challenge_context();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_CONNECT_Message::set_challenge_context(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.challenge_context_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.challenge_context)
}
inline std::string* C2S_CONNECT_Message::mutable_challenge_context() {
  std::string* _s = _internal_mutable_challenge_context();
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.challenge_context)
  return _s;
}
inline const std::string& C2S_CONNECT_Message::_internal_challenge_context() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.challenge_context_.Get();
}
inline void C2S_CONNECT_Message::_internal_set_challenge_context(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.challenge_context_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_CONNECT_Message::_internal_mutable_challenge_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.challenge_context_.Mutable( GetArenaForAllocation());
}
inline std::string* C2S_CONNECT_Message::release_challenge_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:C2S_CONNECT_Message.challenge_context)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.challenge_context_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.challenge_context_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void C2S_CONNECT_Message::set_allocated_challenge_context(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.challenge_context_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.challenge_context_.IsDefault()) {
          _impl_.challenge_context_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.challenge_context)
}

// optional sint32 use_snp = 10;
inline bool C2S_CONNECT_Message::has_use_snp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void C2S_CONNECT_Message::clear_use_snp() {
  _impl_.use_snp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t C2S_CONNECT_Message::use_snp() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.use_snp)
  return _internal_use_snp();
}
inline void C2S_CONNECT_Message::set_use_snp(::int32_t value) {
  _internal_set_use_snp(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.use_snp)
}
inline ::int32_t C2S_CONNECT_Message::_internal_use_snp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_snp_;
}
inline void C2S_CONNECT_Message::_internal_set_use_snp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.use_snp_ = value;
}

// -------------------------------------------------------------------

// C2S_CONNECTION_Message

// optional string addon_name = 1;
inline bool C2S_CONNECTION_Message::has_addon_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void C2S_CONNECTION_Message::clear_addon_name() {
  _impl_.addon_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& C2S_CONNECTION_Message::addon_name() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECTION_Message.addon_name)
  return _internal_addon_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_CONNECTION_Message::set_addon_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.addon_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S_CONNECTION_Message.addon_name)
}
inline std::string* C2S_CONNECTION_Message::mutable_addon_name() {
  std::string* _s = _internal_mutable_addon_name();
  // @@protoc_insertion_point(field_mutable:C2S_CONNECTION_Message.addon_name)
  return _s;
}
inline const std::string& C2S_CONNECTION_Message::_internal_addon_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addon_name_.Get();
}
inline void C2S_CONNECTION_Message::_internal_set_addon_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.addon_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_CONNECTION_Message::_internal_mutable_addon_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.addon_name_.Mutable( GetArenaForAllocation());
}
inline std::string* C2S_CONNECTION_Message::release_addon_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:C2S_CONNECTION_Message.addon_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.addon_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.addon_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void C2S_CONNECTION_Message::set_allocated_addon_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.addon_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.addon_name_.IsDefault()) {
          _impl_.addon_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECTION_Message.addon_name)
}

// optional bool use_snp = 2;
inline bool C2S_CONNECTION_Message::has_use_snp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void C2S_CONNECTION_Message::clear_use_snp() {
  _impl_.use_snp_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool C2S_CONNECTION_Message::use_snp() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECTION_Message.use_snp)
  return _internal_use_snp();
}
inline void C2S_CONNECTION_Message::set_use_snp(bool value) {
  _internal_set_use_snp(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECTION_Message.use_snp)
}
inline bool C2S_CONNECTION_Message::_internal_use_snp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_snp_;
}
inline void C2S_CONNECTION_Message::_internal_set_use_snp(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.use_snp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_connectionless_5fnetmessages_2eproto_2epb_2eh
