// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenetworkingui.proto

#include "steammessages_gamenetworkingui.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
      template <typename>
PROTOBUF_CONSTEXPR CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(::_pbi::ConstantInitialized) {}
struct CGameNetworkingUI_GlobalStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGameNetworkingUI_GlobalStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGameNetworkingUI_GlobalStateDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_GlobalState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGameNetworkingUI_GlobalStateDefaultTypeInternal _CGameNetworkingUI_GlobalState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.connection_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.identity_local_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.identity_remote_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.close_message_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.status_loc_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.sdrpopid_local_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.sdrpopid_remote_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.address_remote_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.p2p_routing_)*/ nullptr,
      /*decltype(_impl_.e2e_quality_local_)*/ nullptr,
      /*decltype(_impl_.e2e_quality_remote_)*/ nullptr,
      /*decltype(_impl_.front_quality_local_)*/ nullptr,
      /*decltype(_impl_.front_quality_remote_)*/ nullptr,
      /*decltype(_impl_.appid_)*/ 0u,
      /*decltype(_impl_.connection_id_local_)*/ 0u,
      /*decltype(_impl_.connection_state_)*/ 0u,
      /*decltype(_impl_.start_time_)*/ 0u,
      /*decltype(_impl_.close_time_)*/ 0u,
      /*decltype(_impl_.close_reason_)*/ 0u,
      /*decltype(_impl_.transport_kind_)*/ 0u,
      /*decltype(_impl_.ping_interior_)*/ 0u,
      /*decltype(_impl_.ping_remote_front_)*/ 0u,
      /*decltype(_impl_.ping_default_internet_route_)*/ 0u,
      /*decltype(_impl_.e2e_quality_remote_instantaneous_time_)*/ ::uint64_t{0u},
      /*decltype(_impl_.e2e_quality_remote_lifetime_time_)*/ ::uint64_t{0u},
      /*decltype(_impl_.front_quality_remote_instantaneous_time_)*/ ::uint64_t{0u},
      /*decltype(_impl_.front_quality_remote_lifetime_time_)*/ ::uint64_t{0u},
    } {}
struct CGameNetworkingUI_ConnectionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGameNetworkingUI_ConnectionStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGameNetworkingUI_ConnectionStateDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_ConnectionState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGameNetworkingUI_ConnectionStateDefaultTypeInternal _CGameNetworkingUI_ConnectionState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CGameNetworkingUI_Message::CGameNetworkingUI_Message(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.connection_state_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CGameNetworkingUI_MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGameNetworkingUI_MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGameNetworkingUI_MessageDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGameNetworkingUI_MessageDefaultTypeInternal _CGameNetworkingUI_Message_default_instance_;
static ::_pb::Metadata file_level_metadata_steammessages_5fgamenetworkingui_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_steammessages_5fgamenetworkingui_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_steammessages_5fgamenetworkingui_2eproto = nullptr;
const ::uint32_t TableStruct_steammessages_5fgamenetworkingui_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_GlobalState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.connection_key_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.appid_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.connection_id_local_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.identity_local_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.identity_remote_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.connection_state_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.close_time_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.close_reason_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.close_message_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.status_loc_token_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.transport_kind_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_local_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_remote_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.address_remote_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.p2p_routing_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.ping_interior_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.ping_remote_front_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.ping_default_internet_route_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_local_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_instantaneous_time_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_lifetime_time_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.front_quality_local_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_instantaneous_time_),
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_lifetime_time_),
    0,
    13,
    14,
    1,
    2,
    15,
    16,
    17,
    18,
    3,
    4,
    19,
    5,
    6,
    7,
    8,
    20,
    21,
    22,
    9,
    10,
    23,
    24,
    11,
    12,
    25,
    26,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_Message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_Message, _impl_.connection_state_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::CGameNetworkingUI_GlobalState)},
        {8, 43, -1, sizeof(::CGameNetworkingUI_ConnectionState)},
        {70, -1, -1, sizeof(::CGameNetworkingUI_Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_CGameNetworkingUI_GlobalState_default_instance_._instance,
    &::_CGameNetworkingUI_ConnectionState_default_instance_._instance,
    &::_CGameNetworkingUI_Message_default_instance_._instance,
};
const char descriptor_table_protodef_steammessages_5fgamenetworkingui_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$steammessages_gamenetworkingui.proto\032%"
    "steamnetworkingsockets_messages.proto\032 s"
    "teamdatagram_messages_sdr.proto\"\037\n\035CGame"
    "NetworkingUI_GlobalState\"\317\007\n!CGameNetwor"
    "kingUI_ConnectionState\022\026\n\016connection_key"
    "\030\001 \001(\t\022\r\n\005appid\030\002 \001(\r\022\033\n\023connection_id_l"
    "ocal\030\003 \001(\007\022\026\n\016identity_local\030\004 \001(\t\022\027\n\017id"
    "entity_remote\030\005 \001(\t\022\030\n\020connection_state\030"
    "\n \001(\r\022\022\n\nstart_time\030\014 \001(\r\022\022\n\nclose_time\030"
    "\r \001(\r\022\024\n\014close_reason\030\016 \001(\r\022\025\n\rclose_mes"
    "sage\030\017 \001(\t\022\030\n\020status_loc_token\030\020 \001(\t\022\026\n\016"
    "transport_kind\030\024 \001(\r\022\026\n\016sdrpopid_local\030\025"
    " \001(\t\022\027\n\017sdrpopid_remote\030\026 \001(\t\022\026\n\016address"
    "_remote\030\027 \001(\t\0228\n\013p2p_routing\030\030 \001(\0132#.CMs"
    "gSteamDatagramP2PRoutingSummary\022\025\n\rping_"
    "interior\030\031 \001(\r\022\031\n\021ping_remote_front\030\032 \001("
    "\r\022#\n\033ping_default_internet_route\030\033 \001(\r\022>"
    "\n\021e2e_quality_local\030\036 \001(\0132#.CMsgSteamDat"
    "agramConnectionQuality\022\?\n\022e2e_quality_re"
    "mote\030\037 \001(\0132#.CMsgSteamDatagramConnection"
    "Quality\022-\n%e2e_quality_remote_instantane"
    "ous_time\030  \001(\004\022(\n e2e_quality_remote_lif"
    "etime_time\030! \001(\004\022@\n\023front_quality_local\030"
    "( \001(\0132#.CMsgSteamDatagramConnectionQuali"
    "ty\022A\n\024front_quality_remote\030) \001(\0132#.CMsgS"
    "teamDatagramConnectionQuality\022/\n\'front_q"
    "uality_remote_instantaneous_time\030* \001(\004\022*"
    "\n\"front_quality_remote_lifetime_time\030+ \001"
    "(\004\"Y\n\031CGameNetworkingUI_Message\022<\n\020conne"
    "ction_state\030\001 \003(\0132\".CGameNetworkingUI_Co"
    "nnectionStateB\005H\001\200\001\001"
};
static const ::_pbi::DescriptorTable* const descriptor_table_steammessages_5fgamenetworkingui_2eproto_deps[2] =
    {
        &::descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
        &::descriptor_table_steamnetworkingsockets_5fmessages_2eproto,
};
static ::absl::once_flag descriptor_table_steammessages_5fgamenetworkingui_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steammessages_5fgamenetworkingui_2eproto = {
    false,
    false,
    1220,
    descriptor_table_protodef_steammessages_5fgamenetworkingui_2eproto,
    "steammessages_gamenetworkingui.proto",
    &descriptor_table_steammessages_5fgamenetworkingui_2eproto_once,
    descriptor_table_steammessages_5fgamenetworkingui_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_steammessages_5fgamenetworkingui_2eproto::offsets,
    file_level_metadata_steammessages_5fgamenetworkingui_2eproto,
    file_level_enum_descriptors_steammessages_5fgamenetworkingui_2eproto,
    file_level_service_descriptors_steammessages_5fgamenetworkingui_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steammessages_5fgamenetworkingui_2eproto_getter() {
  return &descriptor_table_steammessages_5fgamenetworkingui_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fgamenetworkingui_2eproto(&descriptor_table_steammessages_5fgamenetworkingui_2eproto);
// ===================================================================

class CGameNetworkingUI_GlobalState::_Internal {
 public:
};

CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_GlobalState)
}
CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(const CGameNetworkingUI_GlobalState& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  CGameNetworkingUI_GlobalState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_GlobalState)
}




const ::google::protobuf::Message::ClassData CGameNetworkingUI_GlobalState::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*CGameNetworkingUI_GlobalState::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata CGameNetworkingUI_GlobalState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fgamenetworkingui_2eproto_getter, &descriptor_table_steammessages_5fgamenetworkingui_2eproto_once,
      file_level_metadata_steammessages_5fgamenetworkingui_2eproto[0]);
}
// ===================================================================

class CGameNetworkingUI_ConnectionState::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameNetworkingUI_ConnectionState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_._has_bits_);
  static void set_has_connection_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_connection_id_local(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_identity_local(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identity_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_connection_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_close_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_close_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_close_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status_loc_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transport_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_sdrpopid_local(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sdrpopid_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_address_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_p2p_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ping_interior(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ping_remote_front(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ping_default_internet_route(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& e2e_quality_local(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_e2e_quality_local(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& e2e_quality_remote(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_e2e_quality_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_e2e_quality_remote_instantaneous_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_e2e_quality_remote_lifetime_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& front_quality_local(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_front_quality_local(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& front_quality_remote(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_front_quality_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_front_quality_remote_instantaneous_time(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_front_quality_remote_lifetime_time(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::CMsgSteamDatagramP2PRoutingSummary& CGameNetworkingUI_ConnectionState::_Internal::p2p_routing(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->_impl_.p2p_routing_;
}
const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_Internal::e2e_quality_local(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->_impl_.e2e_quality_local_;
}
const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_Internal::e2e_quality_remote(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->_impl_.e2e_quality_remote_;
}
const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_Internal::front_quality_local(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->_impl_.front_quality_local_;
}
const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_Internal::front_quality_remote(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->_impl_.front_quality_remote_;
}
void CGameNetworkingUI_ConnectionState::clear_p2p_routing() {
  if (_impl_.p2p_routing_ != nullptr) _impl_.p2p_routing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CGameNetworkingUI_ConnectionState::clear_e2e_quality_local() {
  if (_impl_.e2e_quality_local_ != nullptr) _impl_.e2e_quality_local_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void CGameNetworkingUI_ConnectionState::clear_e2e_quality_remote() {
  if (_impl_.e2e_quality_remote_ != nullptr) _impl_.e2e_quality_remote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void CGameNetworkingUI_ConnectionState::clear_front_quality_local() {
  if (_impl_.front_quality_local_ != nullptr) _impl_.front_quality_local_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void CGameNetworkingUI_ConnectionState::clear_front_quality_remote() {
  if (_impl_.front_quality_remote_ != nullptr) _impl_.front_quality_remote_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_ConnectionState)
}
CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(const CGameNetworkingUI_ConnectionState& from) : ::google::protobuf::Message() {
  CGameNetworkingUI_ConnectionState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.connection_key_){},
      decltype(_impl_.identity_local_){},
      decltype(_impl_.identity_remote_){},
      decltype(_impl_.close_message_){},
      decltype(_impl_.status_loc_token_){},
      decltype(_impl_.sdrpopid_local_){},
      decltype(_impl_.sdrpopid_remote_){},
      decltype(_impl_.address_remote_){},
      decltype(_impl_.p2p_routing_){nullptr},
      decltype(_impl_.e2e_quality_local_){nullptr},
      decltype(_impl_.e2e_quality_remote_){nullptr},
      decltype(_impl_.front_quality_local_){nullptr},
      decltype(_impl_.front_quality_remote_){nullptr},
      decltype(_impl_.appid_){},
      decltype(_impl_.connection_id_local_){},
      decltype(_impl_.connection_state_){},
      decltype(_impl_.start_time_){},
      decltype(_impl_.close_time_){},
      decltype(_impl_.close_reason_){},
      decltype(_impl_.transport_kind_){},
      decltype(_impl_.ping_interior_){},
      decltype(_impl_.ping_remote_front_){},
      decltype(_impl_.ping_default_internet_route_){},
      decltype(_impl_.e2e_quality_remote_instantaneous_time_){},
      decltype(_impl_.e2e_quality_remote_lifetime_time_){},
      decltype(_impl_.front_quality_remote_instantaneous_time_){},
      decltype(_impl_.front_quality_remote_lifetime_time_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.connection_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.connection_key_.Set(from._internal_connection_key(), _this->GetArenaForAllocation());
  }
  _impl_.identity_local_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identity_local_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.identity_local_.Set(from._internal_identity_local(), _this->GetArenaForAllocation());
  }
  _impl_.identity_remote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identity_remote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.identity_remote_.Set(from._internal_identity_remote(), _this->GetArenaForAllocation());
  }
  _impl_.close_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.close_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.close_message_.Set(from._internal_close_message(), _this->GetArenaForAllocation());
  }
  _impl_.status_loc_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_loc_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.status_loc_token_.Set(from._internal_status_loc_token(), _this->GetArenaForAllocation());
  }
  _impl_.sdrpopid_local_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sdrpopid_local_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.sdrpopid_local_.Set(from._internal_sdrpopid_local(), _this->GetArenaForAllocation());
  }
  _impl_.sdrpopid_remote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sdrpopid_remote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.sdrpopid_remote_.Set(from._internal_sdrpopid_remote(), _this->GetArenaForAllocation());
  }
  _impl_.address_remote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_remote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.address_remote_.Set(from._internal_address_remote(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.p2p_routing_ = new ::CMsgSteamDatagramP2PRoutingSummary(*from._impl_.p2p_routing_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.e2e_quality_local_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.e2e_quality_local_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.e2e_quality_remote_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.e2e_quality_remote_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
    _this->_impl_.front_quality_local_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.front_quality_local_);
  }
  if ((from._impl_._has_bits_[0] & 0x00001000u) != 0) {
    _this->_impl_.front_quality_remote_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.front_quality_remote_);
  }
  ::memcpy(&_impl_.appid_, &from._impl_.appid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.front_quality_remote_lifetime_time_) -
    reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.front_quality_remote_lifetime_time_));

  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_ConnectionState)
}
inline void CGameNetworkingUI_ConnectionState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.connection_key_){},
      decltype(_impl_.identity_local_){},
      decltype(_impl_.identity_remote_){},
      decltype(_impl_.close_message_){},
      decltype(_impl_.status_loc_token_){},
      decltype(_impl_.sdrpopid_local_){},
      decltype(_impl_.sdrpopid_remote_){},
      decltype(_impl_.address_remote_){},
      decltype(_impl_.p2p_routing_){nullptr},
      decltype(_impl_.e2e_quality_local_){nullptr},
      decltype(_impl_.e2e_quality_remote_){nullptr},
      decltype(_impl_.front_quality_local_){nullptr},
      decltype(_impl_.front_quality_remote_){nullptr},
      decltype(_impl_.appid_){0u},
      decltype(_impl_.connection_id_local_){0u},
      decltype(_impl_.connection_state_){0u},
      decltype(_impl_.start_time_){0u},
      decltype(_impl_.close_time_){0u},
      decltype(_impl_.close_reason_){0u},
      decltype(_impl_.transport_kind_){0u},
      decltype(_impl_.ping_interior_){0u},
      decltype(_impl_.ping_remote_front_){0u},
      decltype(_impl_.ping_default_internet_route_){0u},
      decltype(_impl_.e2e_quality_remote_instantaneous_time_){::uint64_t{0u}},
      decltype(_impl_.e2e_quality_remote_lifetime_time_){::uint64_t{0u}},
      decltype(_impl_.front_quality_remote_instantaneous_time_){::uint64_t{0u}},
      decltype(_impl_.front_quality_remote_lifetime_time_){::uint64_t{0u}},
  };
  _impl_.connection_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_local_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identity_local_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_remote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identity_remote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.close_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.close_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_loc_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_loc_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdrpopid_local_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sdrpopid_local_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdrpopid_remote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sdrpopid_remote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_remote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_remote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CGameNetworkingUI_ConnectionState::~CGameNetworkingUI_ConnectionState() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_ConnectionState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CGameNetworkingUI_ConnectionState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_key_.Destroy();
  _impl_.identity_local_.Destroy();
  _impl_.identity_remote_.Destroy();
  _impl_.close_message_.Destroy();
  _impl_.status_loc_token_.Destroy();
  _impl_.sdrpopid_local_.Destroy();
  _impl_.sdrpopid_remote_.Destroy();
  _impl_.address_remote_.Destroy();
  if (this != internal_default_instance()) delete _impl_.p2p_routing_;
  if (this != internal_default_instance()) delete _impl_.e2e_quality_local_;
  if (this != internal_default_instance()) delete _impl_.e2e_quality_remote_;
  if (this != internal_default_instance()) delete _impl_.front_quality_local_;
  if (this != internal_default_instance()) delete _impl_.front_quality_remote_;
}
void CGameNetworkingUI_ConnectionState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CGameNetworkingUI_ConnectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_ConnectionState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.connection_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.identity_local_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.identity_remote_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.close_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.status_loc_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.sdrpopid_local_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.sdrpopid_remote_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.address_remote_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.p2p_routing_ != nullptr);
      _impl_.p2p_routing_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.e2e_quality_local_ != nullptr);
      _impl_.e2e_quality_local_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.e2e_quality_remote_ != nullptr);
      _impl_.e2e_quality_remote_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.front_quality_local_ != nullptr);
      _impl_.front_quality_local_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.front_quality_remote_ != nullptr);
      _impl_.front_quality_remote_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.appid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.connection_state_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.connection_state_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.start_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.e2e_quality_remote_instantaneous_time_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.e2e_quality_remote_instantaneous_time_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&_impl_.e2e_quality_remote_lifetime_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.front_quality_remote_lifetime_time_) -
        reinterpret_cast<char*>(&_impl_.e2e_quality_remote_lifetime_time_)) + sizeof(_impl_.front_quality_remote_lifetime_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CGameNetworkingUI_ConnectionState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 27, 5, 181, 7> CGameNetworkingUI_ConnectionState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_._has_bits_),
    0, // no _extensions_
    43, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    403113440,  // skipmap
    offsetof(decltype(_table_), field_entries),
    27,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CGameNetworkingUI_ConnectionState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string connection_key = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_key_)}},
    // optional uint32 appid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.appid_), 13>(),
     {16, 13, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.appid_)}},
    // optional fixed32 connection_id_local = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 14, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_id_local_)}},
    // optional string identity_local = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.identity_local_)}},
    // optional string identity_remote = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.identity_remote_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 connection_state = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.connection_state_), 15>(),
     {80, 15, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_state_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 start_time = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.start_time_), 16>(),
     {96, 16, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.start_time_)}},
    // optional uint32 close_time = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.close_time_), 17>(),
     {104, 17, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_time_)}},
    // optional uint32 close_reason = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.close_reason_), 18>(),
     {112, 18, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_reason_)}},
    // optional string close_message = 15;
    {::_pbi::TcParser::FastSS1,
     {122, 3, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_message_)}},
    // optional string status_loc_token = 16;
    {::_pbi::TcParser::FastSS2,
     {386, 4, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.status_loc_token_)}},
    // optional uint64 e2e_quality_remote_lifetime_time = 33;
    {::_pbi::TcParser::FastV64S2,
     {648, 24, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_lifetime_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 transport_kind = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 19, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.transport_kind_)}},
    // optional string sdrpopid_local = 21;
    {::_pbi::TcParser::FastSS2,
     {426, 5, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_local_)}},
    // optional string sdrpopid_remote = 22;
    {::_pbi::TcParser::FastSS2,
     {434, 6, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_remote_)}},
    // optional string address_remote = 23;
    {::_pbi::TcParser::FastSS2,
     {442, 7, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.address_remote_)}},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 8, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.p2p_routing_)}},
    // optional uint32 ping_interior = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 20, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_interior_)}},
    // optional uint32 ping_remote_front = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 21, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_remote_front_)}},
    // optional uint32 ping_default_internet_route = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 22, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_default_internet_route_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 9, 1, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_local_)}},
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
    {::_pbi::TcParser::FastMtS2,
     {506, 10, 2, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_)}},
  }}, {{
    33, 0, 1,
    63614, 22,
    65535, 65535
  }}, {{
    // optional string connection_key = 1;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 appid = 2;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.appid_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 connection_id_local = 3;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_id_local_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string identity_local = 4;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.identity_local_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string identity_remote = 5;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.identity_remote_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 connection_state = 10;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_state_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 start_time = 12;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.start_time_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 close_time = 13;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_time_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 close_reason = 14;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_reason_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string close_message = 15;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_message_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string status_loc_token = 16;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.status_loc_token_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 transport_kind = 20;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.transport_kind_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string sdrpopid_local = 21;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_local_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string sdrpopid_remote = 22;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_remote_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string address_remote = 23;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.address_remote_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.p2p_routing_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 ping_interior = 25;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_interior_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ping_remote_front = 26;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_remote_front_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ping_default_internet_route = 27;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_default_internet_route_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_local_), _Internal::kHasBitsOffset + 9, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_), _Internal::kHasBitsOffset + 10, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint64 e2e_quality_remote_instantaneous_time = 32;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_instantaneous_time_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 e2e_quality_remote_lifetime_time = 33;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_lifetime_time_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_local_), _Internal::kHasBitsOffset + 11, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_), _Internal::kHasBitsOffset + 12, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint64 front_quality_remote_instantaneous_time = 42;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_instantaneous_time_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 front_quality_remote_lifetime_time = 43;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_lifetime_time_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }}, {{
    "\41\16\0\0\16\17\0\0\0\0\15\20\0\16\17\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "CGameNetworkingUI_ConnectionState"
    "connection_key"
    "identity_local"
    "identity_remote"
    "close_message"
    "status_loc_token"
    "sdrpopid_local"
    "sdrpopid_remote"
    "address_remote"
  }},
};

::uint8_t* CGameNetworkingUI_ConnectionState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_ConnectionState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_connection_key();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.connection_key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_appid(), target);
  }

  // optional fixed32 connection_id_local = 3;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this->_internal_connection_id_local(), target);
  }

  // optional string identity_local = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_identity_local();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.identity_local");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string identity_remote = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_identity_remote();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.identity_remote");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional uint32 connection_state = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_connection_state(), target);
  }

  // optional uint32 start_time = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_start_time(), target);
  }

  // optional uint32 close_time = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_close_time(), target);
  }

  // optional uint32 close_reason = 14;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_close_reason(), target);
  }

  // optional string close_message = 15;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_close_message();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.close_message");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // optional string status_loc_token = 16;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_status_loc_token();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.status_loc_token");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // optional uint32 transport_kind = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this->_internal_transport_kind(), target);
  }

  // optional string sdrpopid_local = 21;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_sdrpopid_local();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.sdrpopid_local");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // optional string sdrpopid_remote = 22;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_sdrpopid_remote();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.sdrpopid_remote");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional string address_remote = 23;
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_address_remote();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.address_remote");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::p2p_routing(this),
        _Internal::p2p_routing(this).GetCachedSize(), target, stream);
  }

  // optional uint32 ping_interior = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        25, this->_internal_ping_interior(), target);
  }

  // optional uint32 ping_remote_front = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        26, this->_internal_ping_remote_front(), target);
  }

  // optional uint32 ping_default_internet_route = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        27, this->_internal_ping_default_internet_route(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::e2e_quality_local(this),
        _Internal::e2e_quality_local(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::e2e_quality_remote(this),
        _Internal::e2e_quality_remote(this).GetCachedSize(), target, stream);
  }

  // optional uint64 e2e_quality_remote_instantaneous_time = 32;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        32, this->_internal_e2e_quality_remote_instantaneous_time(), target);
  }

  // optional uint64 e2e_quality_remote_lifetime_time = 33;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        33, this->_internal_e2e_quality_remote_lifetime_time(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::front_quality_local(this),
        _Internal::front_quality_local(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::front_quality_remote(this),
        _Internal::front_quality_remote(this).GetCachedSize(), target, stream);
  }

  // optional uint64 front_quality_remote_instantaneous_time = 42;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        42, this->_internal_front_quality_remote_instantaneous_time(), target);
  }

  // optional uint64 front_quality_remote_lifetime_time = 43;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        43, this->_internal_front_quality_remote_lifetime_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_ConnectionState)
  return target;
}

::size_t CGameNetworkingUI_ConnectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_ConnectionState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string connection_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_connection_key());
    }

    // optional string identity_local = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_identity_local());
    }

    // optional string identity_remote = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_identity_remote());
    }

    // optional string close_message = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_close_message());
    }

    // optional string status_loc_token = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_status_loc_token());
    }

    // optional string sdrpopid_local = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_sdrpopid_local());
    }

    // optional string sdrpopid_remote = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_sdrpopid_remote());
    }

    // optional string address_remote = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_address_remote());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.p2p_routing_);
    }

    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.e2e_quality_local_);
    }

    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.e2e_quality_remote_);
    }

    // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.front_quality_local_);
    }

    // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.front_quality_remote_);
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

    // optional fixed32 connection_id_local = 3;
    if (cached_has_bits & 0x00004000u) {
      total_size += 5;
    }

    // optional uint32 connection_state = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_connection_state());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 start_time = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_start_time());
    }

    // optional uint32 close_time = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_close_time());
    }

    // optional uint32 close_reason = 14;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_close_reason());
    }

    // optional uint32 transport_kind = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_transport_kind());
    }

    // optional uint32 ping_interior = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_ping_interior());
    }

    // optional uint32 ping_remote_front = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_ping_remote_front());
    }

    // optional uint32 ping_default_internet_route = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_ping_default_internet_route());
    }

    // optional uint64 e2e_quality_remote_instantaneous_time = 32;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_e2e_quality_remote_instantaneous_time());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional uint64 e2e_quality_remote_lifetime_time = 33;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_e2e_quality_remote_lifetime_time());
    }

    // optional uint64 front_quality_remote_instantaneous_time = 42;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_front_quality_remote_instantaneous_time());
    }

    // optional uint64 front_quality_remote_lifetime_time = 43;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_front_quality_remote_lifetime_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CGameNetworkingUI_ConnectionState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CGameNetworkingUI_ConnectionState::MergeImpl
};
const ::google::protobuf::Message::ClassData*CGameNetworkingUI_ConnectionState::GetClassData() const { return &_class_data_; }


void CGameNetworkingUI_ConnectionState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CGameNetworkingUI_ConnectionState*>(&to_msg);
  auto& from = static_cast<const CGameNetworkingUI_ConnectionState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_ConnectionState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_connection_key(from._internal_connection_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_identity_local(from._internal_identity_local());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_identity_remote(from._internal_identity_remote());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_close_message(from._internal_close_message());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_status_loc_token(from._internal_status_loc_token());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_sdrpopid_local(from._internal_sdrpopid_local());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_sdrpopid_remote(from._internal_sdrpopid_remote());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_address_remote(from._internal_address_remote());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_p2p_routing()->::CMsgSteamDatagramP2PRoutingSummary::MergeFrom(
          from._internal_p2p_routing());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_e2e_quality_local()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_e2e_quality_local());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_e2e_quality_remote()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_e2e_quality_remote());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_front_quality_local()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_front_quality_local());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_front_quality_remote()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_front_quality_remote());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.connection_id_local_ = from._impl_.connection_id_local_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.connection_state_ = from._impl_.connection_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.close_time_ = from._impl_.close_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.close_reason_ = from._impl_.close_reason_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.transport_kind_ = from._impl_.transport_kind_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.ping_interior_ = from._impl_.ping_interior_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ping_remote_front_ = from._impl_.ping_remote_front_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.ping_default_internet_route_ = from._impl_.ping_default_internet_route_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.e2e_quality_remote_instantaneous_time_ = from._impl_.e2e_quality_remote_instantaneous_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.e2e_quality_remote_lifetime_time_ = from._impl_.e2e_quality_remote_lifetime_time_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.front_quality_remote_instantaneous_time_ = from._impl_.front_quality_remote_instantaneous_time_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.front_quality_remote_lifetime_time_ = from._impl_.front_quality_remote_lifetime_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworkingUI_ConnectionState::CopyFrom(const CGameNetworkingUI_ConnectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_ConnectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CGameNetworkingUI_ConnectionState::IsInitialized() const {
  return true;
}

void CGameNetworkingUI_ConnectionState::InternalSwap(CGameNetworkingUI_ConnectionState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_key_, lhs_arena,
                                       &other->_impl_.connection_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_local_, lhs_arena,
                                       &other->_impl_.identity_local_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_remote_, lhs_arena,
                                       &other->_impl_.identity_remote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.close_message_, lhs_arena,
                                       &other->_impl_.close_message_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_loc_token_, lhs_arena,
                                       &other->_impl_.status_loc_token_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdrpopid_local_, lhs_arena,
                                       &other->_impl_.sdrpopid_local_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdrpopid_remote_, lhs_arena,
                                       &other->_impl_.sdrpopid_remote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_remote_, lhs_arena,
                                       &other->_impl_.address_remote_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_lifetime_time_)
      + sizeof(CGameNetworkingUI_ConnectionState::_impl_.front_quality_remote_lifetime_time_)
      - PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.p2p_routing_)>(
          reinterpret_cast<char*>(&_impl_.p2p_routing_),
          reinterpret_cast<char*>(&other->_impl_.p2p_routing_));
}

::google::protobuf::Metadata CGameNetworkingUI_ConnectionState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fgamenetworkingui_2eproto_getter, &descriptor_table_steammessages_5fgamenetworkingui_2eproto_once,
      file_level_metadata_steammessages_5fgamenetworkingui_2eproto[1]);
}
// ===================================================================

class CGameNetworkingUI_Message::_Internal {
 public:
};

CGameNetworkingUI_Message::CGameNetworkingUI_Message(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_Message)
}
CGameNetworkingUI_Message::CGameNetworkingUI_Message(const CGameNetworkingUI_Message& from) : ::google::protobuf::Message() {
  CGameNetworkingUI_Message* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_state_){from._impl_.connection_state_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_Message)
}
inline void CGameNetworkingUI_Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_state_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CGameNetworkingUI_Message::~CGameNetworkingUI_Message() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_Message)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CGameNetworkingUI_Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_state_.~RepeatedPtrField();
}
void CGameNetworkingUI_Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CGameNetworkingUI_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_connection_state()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CGameNetworkingUI_Message::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CGameNetworkingUI_Message::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CGameNetworkingUI_Message_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_Message, _impl_.connection_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_Message, _impl_.connection_state_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CGameNetworkingUI_ConnectionState>()},
  }}, {{
  }},
};

::uint8_t* CGameNetworkingUI_Message::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_Message)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connection_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_connection_state().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_Message)
  return target;
}

::size_t CGameNetworkingUI_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
  total_size += 1UL * this->_internal_connection_state_size();
  for (const auto& msg : this->_internal_connection_state()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CGameNetworkingUI_Message::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CGameNetworkingUI_Message::MergeImpl
};
const ::google::protobuf::Message::ClassData*CGameNetworkingUI_Message::GetClassData() const { return &_class_data_; }


void CGameNetworkingUI_Message::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CGameNetworkingUI_Message*>(&to_msg);
  auto& from = static_cast<const CGameNetworkingUI_Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_connection_state()->MergeFrom(from._internal_connection_state());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworkingUI_Message::CopyFrom(const CGameNetworkingUI_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CGameNetworkingUI_Message::IsInitialized() const {
  return true;
}

void CGameNetworkingUI_Message::InternalSwap(CGameNetworkingUI_Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connection_state_.InternalSwap(&other->_impl_.connection_state_);
}

::google::protobuf::Metadata CGameNetworkingUI_Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fgamenetworkingui_2eproto_getter, &descriptor_table_steammessages_5fgamenetworkingui_2eproto_once,
      file_level_metadata_steammessages_5fgamenetworkingui_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
