// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_sdr.proto

#include "steamdatagram_messages_sdr.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamNetworkingIPAddress::CMsgSteamNetworkingIPAddress(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.v6_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.v4_)*/ 0u,
    } {}
struct CMsgSteamNetworkingIPAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamNetworkingIPAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamNetworkingIPAddressDefaultTypeInternal() {}
  union {
    CMsgSteamNetworkingIPAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamNetworkingIPAddressDefaultTypeInternal _CMsgSteamNetworkingIPAddress_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramSignedMessageGeneric::CMsgSteamDatagramSignedMessageGeneric(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.signed_data_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.signature_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.dummy_pad_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.cert_)*/ nullptr,
    } {}
struct CMsgSteamDatagramSignedMessageGenericDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramSignedMessageGenericDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSignedMessageGenericDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSignedMessageGeneric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramSignedMessageGenericDefaultTypeInternal _CMsgSteamDatagramSignedMessageGeneric_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.data_center_id_)*/ 0u,
      /*decltype(_impl_.flags_)*/ 0u,
      /*decltype(_impl_.penalty_)*/ 0u,
    } {}
struct CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply_RouteException _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_RouteException_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.ipv4_)*/ 0u,
      /*decltype(_impl_.port_)*/ 0u,
      /*decltype(_impl_.penalty_)*/ 0u,
      /*decltype(_impl_.protocol_)*/ 0,
    } {}
struct CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply_AltAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_AltAddress_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.latency_datacenter_ids_)*/ {},
      /*decltype(_impl_.latency_ping_ms_)*/ {},
      /* _impl_._latency_ping_ms_cached_byte_size_ = */ {0},
      /*decltype(_impl_.route_exceptions_)*/ {},
      /*decltype(_impl_.alt_addresses_)*/ {},
      /*decltype(_impl_.latency_datacenter_ids_p2p_)*/ {},
      /*decltype(_impl_.latency_ping_ms_p2p_)*/ {},
      /* _impl_._latency_ping_ms_p2p_cached_byte_size_ = */ {0},
      /*decltype(_impl_.dummy_pad_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.client_timestamp_)*/ 0u,
      /*decltype(_impl_.your_public_ip_)*/ 0u,
      /*decltype(_impl_.challenge_)*/ ::uint64_t{0u},
      /*decltype(_impl_.server_time_)*/ 0u,
      /*decltype(_impl_.seconds_until_shutdown_)*/ 0u,
      /*decltype(_impl_.client_cookie_)*/ 0u,
      /*decltype(_impl_.scoring_penalty_relay_cluster_)*/ 0u,
      /*decltype(_impl_.your_public_port_)*/ 0u,
      /*decltype(_impl_.flags_)*/ 0u,
    } {}
struct CMsgSteamDatagramRouterPingReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReplyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramRouterPingReplyDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingRequestBody::CMsgSteamDatagramGameserverPingRequestBody(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.my_ips_)*/ {},
      /*decltype(_impl_.echo_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.your_public_ip_)*/ nullptr,
      /*decltype(_impl_.relay_popid_)*/ 0u,
      /*decltype(_impl_.your_public_port_)*/ 0u,
      /*decltype(_impl_.relay_unix_time_)*/ ::uint64_t{0u},
      /*decltype(_impl_.routing_secret_)*/ ::uint64_t{0u},
    } {}
struct CMsgSteamDatagramGameserverPingRequestBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingRequestBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingRequestBodyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingRequestBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverPingRequestBodyDefaultTypeInternal _CMsgSteamDatagramGameserverPingRequestBody_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingRequestEnvelope::CMsgSteamDatagramGameserverPingRequestEnvelope(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.signed_data_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.signature_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.dummy_pad_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.cert_)*/ nullptr,
      /*decltype(_impl_.legacy_your_public_ip_)*/ 0u,
      /*decltype(_impl_.legacy_relay_unix_time_)*/ 0u,
      /*decltype(_impl_.legacy_challenge_)*/ ::uint64_t{0u},
      /*decltype(_impl_.legacy_router_timestamp_)*/ 0u,
      /*decltype(_impl_.legacy_your_public_port_)*/ 0u,
    } {}
struct CMsgSteamDatagramGameserverPingRequestEnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingRequestEnvelopeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingRequestEnvelopeDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingRequestEnvelope _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverPingRequestEnvelopeDefaultTypeInternal _CMsgSteamDatagramGameserverPingRequestEnvelope_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingReplyData::CMsgSteamDatagramGameserverPingReplyData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.echo_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.build_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.legacy_challenge_)*/ ::uint64_t{0u},
      /*decltype(_impl_.echo_relay_unix_time_)*/ 0u,
      /*decltype(_impl_.legacy_router_timestamp_)*/ 0u,
      /*decltype(_impl_.data_center_id_)*/ 0u,
      /*decltype(_impl_.appid_)*/ 0u,
      /*decltype(_impl_.protocol_version_)*/ 0u,
      /*decltype(_impl_.my_unix_time_)*/ 0u,
      /*decltype(_impl_.network_config_version_)*/ ::uint64_t{0u},
    } {}
struct CMsgSteamDatagramGameserverPingReplyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingReplyDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingReplyDataDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingReplyData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverPingReplyDataDefaultTypeInternal _CMsgSteamDatagramGameserverPingReplyData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.your_public_ip_)*/ 0u,
      /*decltype(_impl_.server_time_)*/ 0u,
      /*decltype(_impl_.challenge_)*/ ::uint64_t{0u},
      /*decltype(_impl_.seconds_until_shutdown_)*/ 0u,
      /*decltype(_impl_.your_public_port_)*/ 0u,
      /*decltype(_impl_.connection_id_)*/ 0u,
    } {}
struct CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoSessionRelayToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal _CMsgSteamDatagramNoSessionRelayToClient_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.legacy_relay_session_id_)*/ 0u,
      /*decltype(_impl_.from_relay_session_id_)*/ 0u,
      /*decltype(_impl_.kludge_pad_)*/ ::uint64_t{0u},
      /*decltype(_impl_.from_connection_id_)*/ 0u,
    } {}
struct CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoSessionRelayToPeer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal _CMsgSteamDatagramNoSessionRelayToPeer_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.connection_id_)*/ 0u,
    } {}
struct CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal _CMsgSteamDatagramClientPingSampleRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.front_ping_ms_)*/ 0u,
      /*decltype(_impl_.penalty_)*/ 0u,
    } {}
struct CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_POP_AltAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.alt_addresses_)*/ {},
      /*decltype(_impl_.pop_id_)*/ 0u,
      /*decltype(_impl_.default_front_ping_ms_)*/ 0u,
      /*decltype(_impl_.default_e2e_ping_ms_)*/ 0u,
      /*decltype(_impl_.cluster_penalty_)*/ 0u,
      /*decltype(_impl_.default_e2e_score_)*/ 0u,
      /*decltype(_impl_.p2p_via_peer_relay_pop_id_)*/ 0u,
      /*decltype(_impl_.best_dc_ping_ms_)*/ 0u,
      /*decltype(_impl_.best_dc_score_)*/ 0u,
      /*decltype(_impl_.best_dc_via_relay_pop_id_)*/ 0u,
      /*decltype(_impl_.default_dc_ping_ms_)*/ 0u,
      /*decltype(_impl_.default_dc_score_)*/ 0u,
      /*decltype(_impl_.default_dc_via_relay_pop_id_)*/ 0u,
      /*decltype(_impl_.test_dc_ping_ms_)*/ 0u,
      /*decltype(_impl_.test_dc_score_)*/ 0u,
      /*decltype(_impl_.test_dc_via_relay_pop_id_)*/ 0u,
    } {}
struct CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_POP _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_POP_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.data_center_id_)*/ 0u,
      /*decltype(_impl_.best_dc_via_relay_pop_id_)*/ 0u,
      /*decltype(_impl_.best_dc_ping_ms_)*/ 0u,
    } {}
struct CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.pops_)*/ {},
      /*decltype(_impl_.legacy_data_centers_)*/ {},
      /*decltype(_impl_.connection_id_)*/ 0u,
      /*decltype(_impl_.relay_override_active_)*/ false,
    } {}
struct CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.score_)*/ 0u,
      /*decltype(_impl_.front_ping_)*/ 0u,
      /*decltype(_impl_.back_ping_)*/ 0u,
      /*decltype(_impl_.seconds_until_down_)*/ 0u,
    } {}
struct CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientSwitchedPrimary_RouterQuality _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal _CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.from_dropped_reason_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.from_quality_now_)*/ nullptr,
      /*decltype(_impl_.to_quality_now_)*/ nullptr,
      /*decltype(_impl_.from_quality_then_)*/ nullptr,
      /*decltype(_impl_.to_quality_then_)*/ nullptr,
      /*decltype(_impl_.connection_id_)*/ 0u,
      /*decltype(_impl_.from_ip_)*/ 0u,
      /*decltype(_impl_.from_port_)*/ 0u,
      /*decltype(_impl_.from_router_cluster_)*/ 0u,
      /*decltype(_impl_.from_active_time_)*/ 0u,
      /*decltype(_impl_.from_active_packets_recv_)*/ 0u,
      /*decltype(_impl_.gap_ms_)*/ 0u,
    } {}
struct CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientSwitchedPrimary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal _CMsgSteamDatagramClientSwitchedPrimary_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.crypt_)*/ nullptr,
      /*decltype(_impl_.cert_)*/ nullptr,
      /*decltype(_impl_.connection_id_)*/ 0u,
      /*decltype(_impl_.gameserver_relay_session_id_)*/ 0u,
      /*decltype(_impl_.legacy_client_steam_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.my_timestamp_)*/ ::uint64_t{0u},
      /*decltype(_impl_.ping_est_ms_)*/ 0u,
      /*decltype(_impl_.virtual_port_)*/ 0u,
      /*decltype(_impl_.routing_secret_)*/ ::uint64_t{0u},
    } {}
struct CMsgSteamDatagramConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectRequestDefaultTypeInternal _CMsgSteamDatagramConnectRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.crypt_)*/ nullptr,
      /*decltype(_impl_.cert_)*/ nullptr,
      /*decltype(_impl_.client_connection_id_)*/ 0u,
      /*decltype(_impl_.gameserver_relay_session_id_)*/ 0u,
      /*decltype(_impl_.your_timestamp_)*/ ::uint64_t{0u},
      /*decltype(_impl_.delay_time_usec_)*/ 0u,
      /*decltype(_impl_.server_connection_id_)*/ 0u,
    } {}
struct CMsgSteamDatagramConnectOKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectOKDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectOKDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectOK _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectOKDefaultTypeInternal _CMsgSteamDatagramConnectOK_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.initial_ping_)*/ 0u,
      /*decltype(_impl_.initial_ping_front_local_)*/ 0u,
      /*decltype(_impl_.initial_ping_front_remote_)*/ 0u,
      /*decltype(_impl_.initial_score_)*/ 0u,
      /*decltype(_impl_.initial_pop_local_)*/ 0u,
      /*decltype(_impl_.initial_pop_remote_)*/ 0u,
      /*decltype(_impl_.negotiation_ms_)*/ 0u,
      /*decltype(_impl_.selected_seconds_)*/ 0u,
      /*decltype(_impl_.best_ping_)*/ 0u,
      /*decltype(_impl_.best_ping_front_local_)*/ 0u,
      /*decltype(_impl_.best_ping_front_remote_)*/ 0u,
      /*decltype(_impl_.best_score_)*/ 0u,
      /*decltype(_impl_.best_pop_local_)*/ 0u,
      /*decltype(_impl_.best_pop_remote_)*/ 0u,
      /*decltype(_impl_.best_time_)*/ 0u,
    } {}
struct CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal() {}
  union {
    CMsgSteamNetworkingP2PSDRRoutingSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal _CMsgSteamNetworkingP2PSDRRoutingSummary_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ice_)*/ nullptr,
      /*decltype(_impl_.sdr_)*/ nullptr,
    } {}
struct CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutingSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal _CMsgSteamDatagramP2PRoutingSummary_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.debug_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.forward_target_relay_routing_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.from_identity_string_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.legacy_from_identity_binary_)*/ nullptr,
      /*decltype(_impl_.quality_relay_)*/ nullptr,
      /*decltype(_impl_.quality_e2e_)*/ nullptr,
      /*decltype(_impl_.p2p_routing_summary_)*/ nullptr,
      /*decltype(_impl_.legacy_from_steam_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.legacy_gameserver_relay_session_id_)*/ 0u,
      /*decltype(_impl_.relay_mode_)*/ 0,
      /*decltype(_impl_.reason_code_)*/ 0u,
      /*decltype(_impl_.to_connection_id_)*/ 0u,
      /*decltype(_impl_.from_connection_id_)*/ 0u,
      /*decltype(_impl_.to_relay_session_id_)*/ 0u,
      /*decltype(_impl_.from_relay_session_id_)*/ 0u,
      /*decltype(_impl_.forward_target_revision_)*/ 0u,
      /*decltype(_impl_.routing_secret_)*/ ::uint64_t{0u},
      /*decltype(_impl_.not_primary_session_)*/ false,
      /*decltype(_impl_.not_primary_transport_)*/ false,
      /*decltype(_impl_.relay_override_active_)*/ false,
    } {}
struct CMsgSteamDatagramConnectionClosedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionClosedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionClosedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionClosed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionClosedDefaultTypeInternal _CMsgSteamDatagramConnectionClosed_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.from_identity_string_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.quality_relay_)*/ nullptr,
      /*decltype(_impl_.quality_e2e_)*/ nullptr,
      /*decltype(_impl_.p2p_routing_summary_)*/ nullptr,
      /*decltype(_impl_.legacy_from_steam_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.legacy_gameserver_relay_session_id_)*/ 0u,
      /*decltype(_impl_.to_connection_id_)*/ 0u,
      /*decltype(_impl_.from_connection_id_)*/ 0u,
      /*decltype(_impl_.to_relay_session_id_)*/ 0u,
      /*decltype(_impl_.routing_secret_)*/ ::uint64_t{0u},
      /*decltype(_impl_.from_relay_session_id_)*/ 0u,
      /*decltype(_impl_.end_to_end_)*/ false,
      /*decltype(_impl_.not_primary_session_)*/ false,
      /*decltype(_impl_.not_primary_transport_)*/ false,
      /*decltype(_impl_.relay_override_active_)*/ false,
      /*decltype(_impl_.dummy_pad_)*/ 0u,
    } {}
struct CMsgSteamDatagramNoConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramNoConnectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoConnectionDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoConnection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramNoConnectionDefaultTypeInternal _CMsgSteamDatagramNoConnection_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ticket_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.platform_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.build_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.dev_gameserver_identity_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.dev_client_cert_)*/ nullptr,
      /*decltype(_impl_.challenge_)*/ ::uint64_t{0u},
      /*decltype(_impl_.challenge_time_)*/ 0u,
      /*decltype(_impl_.client_connection_id_)*/ 0u,
      /*decltype(_impl_.network_config_version_)*/ ::uint64_t{0u},
      /*decltype(_impl_.protocol_version_)*/ 0u,
      /*decltype(_impl_.server_connection_id_)*/ 0u,
    } {}
struct CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverSessionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal _CMsgSteamDatagramGameserverSessionRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.gameserver_identity_string_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.dummy_legacy_identity_binary_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.connection_id_)*/ 0u,
      /*decltype(_impl_.seconds_until_shutdown_)*/ 0u,
      /*decltype(_impl_.legacy_gameserver_steamid_)*/ ::uint64_t{0u},
      /*decltype(_impl_.seq_num_r2c_)*/ 0u,
    } {}
struct CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverSessionEstablished _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal _CMsgSteamDatagramGameserverSessionEstablished_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ack_relay_)*/ {},
      /*decltype(_impl_.legacy_ack_e2e_)*/ {},
      /*decltype(_impl_.quality_relay_)*/ nullptr,
      /*decltype(_impl_.quality_e2e_)*/ nullptr,
      /*decltype(_impl_.flags_)*/ 0u,
      /*decltype(_impl_.client_connection_id_)*/ 0u,
      /*decltype(_impl_.seq_num_c2r_)*/ 0u,
      /*decltype(_impl_.seq_num_e2e_)*/ 0u,
    } {}
struct CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsClientToRouter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ack_relay_)*/ {},
      /*decltype(_impl_.legacy_ack_e2e_)*/ {},
      /*decltype(_impl_.quality_relay_)*/ nullptr,
      /*decltype(_impl_.quality_e2e_)*/ nullptr,
      /*decltype(_impl_.seconds_until_shutdown_)*/ 0u,
      /*decltype(_impl_.client_connection_id_)*/ 0u,
      /*decltype(_impl_.seq_num_r2c_)*/ 0u,
      /*decltype(_impl_.seq_num_e2e_)*/ 0u,
      /*decltype(_impl_.migrate_request_ip_)*/ 0u,
      /*decltype(_impl_.migrate_request_port_)*/ 0u,
      /*decltype(_impl_.scoring_penalty_relay_cluster_)*/ 0u,
      /*decltype(_impl_.flags_)*/ 0u,
    } {}
struct CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsRouterToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal _CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ack_relay_)*/ {},
      /*decltype(_impl_.legacy_ack_e2e_)*/ {},
      /*decltype(_impl_.client_identity_string_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.quality_relay_)*/ nullptr,
      /*decltype(_impl_.quality_e2e_)*/ nullptr,
      /*decltype(_impl_.seq_num_r2s_)*/ 0u,
      /*decltype(_impl_.seq_num_e2e_)*/ 0u,
      /*decltype(_impl_.legacy_client_steam_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.relay_session_id_)*/ 0u,
      /*decltype(_impl_.client_connection_id_)*/ 0u,
      /*decltype(_impl_.flags_)*/ 0u,
      /*decltype(_impl_.server_connection_id_)*/ 0u,
      /*decltype(_impl_.routing_secret_)*/ ::uint64_t{0u},
    } {}
struct CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsRouterToServer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal _CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ack_relay_)*/ {},
      /*decltype(_impl_.legacy_ack_e2e_)*/ {},
      /*decltype(_impl_.quality_relay_)*/ nullptr,
      /*decltype(_impl_.quality_e2e_)*/ nullptr,
      /*decltype(_impl_.seq_num_s2r_)*/ 0u,
      /*decltype(_impl_.seq_num_e2e_)*/ 0u,
      /*decltype(_impl_.relay_session_id_)*/ 0u,
      /*decltype(_impl_.client_connection_id_)*/ 0u,
      /*decltype(_impl_.flags_)*/ 0u,
      /*decltype(_impl_.server_connection_id_)*/ 0u,
    } {}
struct CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsServerToRouter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.peer_identity_string_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct CMsgSteamDatagramP2PSessionRequestBody_EncryptedDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestBody_EncryptedDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionRequestBody_EncryptedDataDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionRequestBody_EncryptedData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PSessionRequestBody_EncryptedDataDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.peer_identity_string_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.platform_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.build_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.encrypted_data_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.encryption_my_ephemeral_public_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.challenge_)*/ ::uint64_t{0u},
      /*decltype(_impl_.challenge_time_)*/ 0u,
      /*decltype(_impl_.client_connection_id_)*/ 0u,
      /*decltype(_impl_.legacy_peer_steam_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.peer_connection_id_)*/ 0u,
      /*decltype(_impl_.protocol_version_)*/ 0u,
      /*decltype(_impl_.network_config_version_)*/ ::uint64_t{0u},
      /*decltype(_impl_.encryption_your_public_key_lead_byte_)*/ 0u,
    } {}
struct CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionRequestBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequestBody_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.body_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.signature_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.cert_)*/ nullptr,
    } {}
struct CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.relay_routing_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.connection_id_)*/ 0u,
      /*decltype(_impl_.seconds_until_shutdown_)*/ 0u,
      /*decltype(_impl_.seq_num_r2c_)*/ 0u,
    } {}
struct CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionEstablished _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal _CMsgSteamDatagramP2PSessionEstablished_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ack_relay_)*/ {},
      /*decltype(_impl_.legacy_ack_e2e_)*/ {},
      /*decltype(_impl_.forward_target_relay_routing_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.routes_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.quality_relay_)*/ nullptr,
      /*decltype(_impl_.quality_e2e_)*/ nullptr,
      /*decltype(_impl_.p2p_routing_summary_)*/ nullptr,
      /*decltype(_impl_.flags_)*/ 0u,
      /*decltype(_impl_.forward_target_revision_)*/ 0u,
      /*decltype(_impl_.ack_peer_routes_revision_)*/ 0u,
      /*decltype(_impl_.connection_id_)*/ 0u,
      /*decltype(_impl_.seq_num_c2r_)*/ 0u,
      /*decltype(_impl_.seq_num_e2e_)*/ 0u,
    } {}
struct CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsP2PClientToRouter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ack_relay_)*/ {},
      /*decltype(_impl_.legacy_ack_e2e_)*/ {},
      /*decltype(_impl_.routes_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.quality_relay_)*/ nullptr,
      /*decltype(_impl_.quality_e2e_)*/ nullptr,
      /*decltype(_impl_.seconds_until_shutdown_)*/ 0u,
      /*decltype(_impl_.migrate_request_ip_)*/ 0u,
      /*decltype(_impl_.migrate_request_port_)*/ 0u,
      /*decltype(_impl_.scoring_penalty_relay_cluster_)*/ 0u,
      /*decltype(_impl_.flags_)*/ 0u,
      /*decltype(_impl_.ack_forward_target_revision_)*/ 0u,
      /*decltype(_impl_.ack_peer_routes_revision_)*/ 0u,
      /*decltype(_impl_.connection_id_)*/ 0u,
      /*decltype(_impl_.seq_num_r2c_)*/ 0u,
      /*decltype(_impl_.seq_num_e2e_)*/ 0u,
    } {}
struct CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsP2PRouterToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.failed_relay_routing_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.connection_id_)*/ 0u,
      /*decltype(_impl_.ack_forward_target_revision_)*/ 0u,
      /*decltype(_impl_.kludge_pad_)*/ ::uint64_t{0u},
    } {}
struct CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PBadRouteRouterToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal _CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.session_relay_routing_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.pop_id_)*/ 0u,
      /*decltype(_impl_.ping_ms_)*/ 0u,
      /*decltype(_impl_.score_penalty_)*/ 0u,
    } {}
struct CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes_RelayCluster _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.my_pop_id_)*/ 0u,
      /*decltype(_impl_.your_pop_id_)*/ 0u,
      /*decltype(_impl_.legacy_score_)*/ 0u,
      /*decltype(_impl_.interior_score_)*/ 0u,
    } {}
struct CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes_Route _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_Route_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.relay_clusters_)*/ {},
      /*decltype(_impl_.routes_)*/ {},
      /*decltype(_impl_.revision_)*/ 0u,
    } {}
struct CMsgSteamDatagramP2PRoutesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutesDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PRoutesDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.client_identity_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.kludge_pad_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.client_main_ip_)*/ 0u,
      /*decltype(_impl_.client_main_port_)*/ 0u,
      /*decltype(_impl_.client_connection_id_)*/ 0u,
      /*decltype(_impl_.request_send_duplication_)*/ false,
    } {}
struct CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSetSecondaryAddressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal _CMsgSteamDatagramSetSecondaryAddressRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.message_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.success_)*/ false,
    } {}
struct CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSetSecondaryAddressResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal _CMsgSteamDatagramSetSecondaryAddressResult_default_instance_;
static ::_pb::Metadata file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[41];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_steamdatagram_5fmessages_5fsdr_2eproto = nullptr;
const ::uint32_t TableStruct_steamdatagram_5fmessages_5fsdr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIPAddress, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIPAddress, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIPAddress, _impl_.v4_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIPAddress, _impl_.v6_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_.cert_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_.signed_data_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_.dummy_pad_),
    3,
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _impl_.data_center_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.ipv4_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.penalty_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.protocol_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.id_),
    1,
    2,
    3,
    4,
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.client_timestamp_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_p2p_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_p2p_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.your_public_ip_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.your_public_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.server_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.challenge_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.seconds_until_shutdown_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.client_cookie_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.scoring_penalty_relay_cluster_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.route_exceptions_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.alt_addresses_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.dummy_pad_),
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    8,
    4,
    3,
    5,
    6,
    7,
    9,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_popid_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_ip_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_unix_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.routing_secret_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.my_ips_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.echo_),
    2,
    1,
    3,
    4,
    5,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.cert_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signed_data_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_ip_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_relay_unix_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_challenge_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_router_timestamp_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.dummy_pad_),
    3,
    0,
    1,
    4,
    8,
    5,
    6,
    7,
    2,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_relay_unix_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_challenge_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_router_timestamp_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.data_center_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.appid_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.protocol_version_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.build_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.my_unix_time_),
    3,
    0,
    2,
    4,
    5,
    6,
    7,
    1,
    9,
    8,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_ip_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.server_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.challenge_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.seconds_until_shutdown_),
    5,
    0,
    4,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_.kludge_pad_),
    0,
    1,
    3,
    2,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _impl_.connection_id_),
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.pop_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_front_ping_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.cluster_penalty_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.alt_addresses_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_ping_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_score_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.p2p_via_peer_relay_pop_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_ping_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_score_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_via_relay_pop_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_ping_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_score_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_via_relay_pop_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_ping_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_score_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_via_relay_pop_id_),
    0,
    1,
    3,
    ~0u,
    2,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.data_center_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_via_relay_pop_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.pops_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.legacy_data_centers_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.front_ping_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.back_ping_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_ip_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_router_cluster_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_packets_recv_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_dropped_reason_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_now_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_now_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_then_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_then_),
    5,
    6,
    7,
    8,
    9,
    10,
    0,
    11,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.my_timestamp_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.ping_est_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.virtual_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.gameserver_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.crypt_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.cert_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.routing_secret_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.legacy_client_steam_id_),
    2,
    5,
    6,
    7,
    3,
    0,
    1,
    8,
    4,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.client_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.server_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.your_timestamp_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.delay_time_usec_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.gameserver_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.crypt_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.cert_),
    2,
    6,
    4,
    5,
    3,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_local_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_remote_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_score_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_local_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_remote_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_local_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_remote_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_score_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_local_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_remote_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.negotiation_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.selected_seconds_),
    0,
    1,
    2,
    3,
    4,
    5,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _impl_.ice_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _impl_.sdr_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.to_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.from_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.from_identity_string_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_identity_binary_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_steam_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.legacy_gameserver_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.to_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.from_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.forward_target_relay_routing_token_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.forward_target_revision_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.relay_mode_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.debug_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.reason_code_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.routing_secret_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.not_primary_session_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.not_primary_transport_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.relay_override_active_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.quality_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.quality_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.p2p_routing_summary_),
    11,
    12,
    2,
    3,
    7,
    8,
    13,
    14,
    1,
    15,
    9,
    0,
    10,
    16,
    17,
    18,
    19,
    4,
    5,
    6,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.to_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.from_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.legacy_gameserver_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.to_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.from_relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.from_identity_string_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.legacy_from_steam_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.end_to_end_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.not_primary_session_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.not_primary_transport_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.relay_override_active_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.quality_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.quality_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.p2p_routing_summary_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.routing_secret_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.dummy_pad_),
    6,
    7,
    5,
    8,
    10,
    0,
    4,
    11,
    12,
    13,
    14,
    1,
    2,
    3,
    9,
    15,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.ticket_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.client_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.server_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.network_config_version_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.protocol_version_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.platform_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.build_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_gameserver_identity_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_client_cert_),
    0,
    6,
    5,
    7,
    10,
    8,
    9,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.gameserver_identity_string_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.seconds_until_shutdown_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.dummy_legacy_identity_binary_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.legacy_gameserver_steamid_),
    2,
    0,
    3,
    5,
    1,
    4,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.ack_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.legacy_ack_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.client_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_c2r_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_),
    0,
    1,
    ~0u,
    ~0u,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seconds_until_shutdown_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_ip_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.scoring_penalty_relay_cluster_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.ack_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.legacy_ack_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.client_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_r2c_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_e2e_),
    0,
    1,
    2,
    6,
    7,
    8,
    ~0u,
    ~0u,
    9,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.ack_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_ack_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_r2s_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_identity_string_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_client_steam_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.server_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.routing_secret_),
    1,
    2,
    ~0u,
    ~0u,
    8,
    3,
    4,
    0,
    5,
    6,
    7,
    9,
    10,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.ack_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.legacy_ack_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_s2r_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.relay_session_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.client_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.server_connection_id_),
    0,
    1,
    ~0u,
    ~0u,
    6,
    2,
    3,
    4,
    5,
    7,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_.peer_identity_string_),
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_time_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.client_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.legacy_peer_steam_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_identity_string_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.encrypted_data_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_my_ephemeral_public_key_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.protocol_version_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.network_config_version_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.platform_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.build_),
    6,
    5,
    7,
    8,
    0,
    9,
    3,
    12,
    4,
    10,
    11,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _impl_.cert_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _impl_.body_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _impl_.signature_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_.seconds_until_shutdown_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_.relay_routing_token_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_),
    1,
    2,
    0,
    3,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.p2p_routing_summary_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.legacy_ack_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_relay_routing_token_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_revision_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.routes_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_peer_routes_revision_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_c2r_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_),
    2,
    3,
    4,
    ~0u,
    ~0u,
    5,
    0,
    6,
    1,
    7,
    8,
    9,
    10,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seconds_until_shutdown_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_ip_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.scoring_penalty_relay_cluster_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_relay_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.legacy_ack_e2e_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_forward_target_revision_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.routes_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_peer_routes_revision_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_r2c_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_),
    1,
    2,
    3,
    4,
    5,
    6,
    ~0u,
    ~0u,
    7,
    8,
    0,
    9,
    10,
    11,
    12,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.failed_relay_routing_token_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.ack_forward_target_revision_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.kludge_pad_),
    1,
    0,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.pop_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.ping_ms_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.session_relay_routing_token_),
    1,
    2,
    3,
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_.my_pop_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_.your_pop_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_.legacy_score_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _impl_.relay_clusters_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _impl_.routes_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _impl_.revision_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_ip_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_port_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_connection_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_identity_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.kludge_pad_),
    2,
    3,
    4,
    0,
    5,
    1,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _impl_.message_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::CMsgSteamNetworkingIPAddress)},
        {12, 24, -1, sizeof(::CMsgSteamDatagramSignedMessageGeneric)},
        {28, 39, -1, sizeof(::CMsgSteamDatagramRouterPingReply_RouteException)},
        {42, 55, -1, sizeof(::CMsgSteamDatagramRouterPingReply_AltAddress)},
        {60, 84, -1, sizeof(::CMsgSteamDatagramRouterPingReply)},
        {100, 115, -1, sizeof(::CMsgSteamDatagramGameserverPingRequestBody)},
        {122, 139, -1, sizeof(::CMsgSteamDatagramGameserverPingRequestEnvelope)},
        {148, 166, -1, sizeof(::CMsgSteamDatagramGameserverPingReplyData)},
        {176, 190, -1, sizeof(::CMsgSteamDatagramNoSessionRelayToClient)},
        {196, 208, -1, sizeof(::CMsgSteamDatagramNoSessionRelayToPeer)},
        {212, 221, -1, sizeof(::CMsgSteamDatagramClientPingSampleRequest)},
        {222, 233, -1, sizeof(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress)},
        {236, 260, -1, sizeof(::CMsgSteamDatagramClientPingSampleReply_POP)},
        {276, 287, -1, sizeof(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter)},
        {290, 302, -1, sizeof(::CMsgSteamDatagramClientPingSampleReply)},
        {306, 318, -1, sizeof(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)},
        {322, 342, -1, sizeof(::CMsgSteamDatagramClientSwitchedPrimary)},
        {354, 371, -1, sizeof(::CMsgSteamDatagramConnectRequest)},
        {380, 395, -1, sizeof(::CMsgSteamDatagramConnectOK)},
        {402, 425, -1, sizeof(::CMsgSteamNetworkingP2PSDRRoutingSummary)},
        {440, 450, -1, sizeof(::CMsgSteamDatagramP2PRoutingSummary)},
        {452, 480, -1, sizeof(::CMsgSteamDatagramConnectionClosed)},
        {500, 524, -1, sizeof(::CMsgSteamDatagramNoConnection)},
        {540, 559, -1, sizeof(::CMsgSteamDatagramGameserverSessionRequest)},
        {570, 584, -1, sizeof(::CMsgSteamDatagramGameserverSessionEstablished)},
        {590, 606, -1, sizeof(::CMsgSteamDatagramConnectionStatsClientToRouter)},
        {614, 634, -1, sizeof(::CMsgSteamDatagramConnectionStatsRouterToClient)},
        {646, 667, -1, sizeof(::CMsgSteamDatagramConnectionStatsRouterToServer)},
        {680, 698, -1, sizeof(::CMsgSteamDatagramConnectionStatsServerToRouter)},
        {708, 717, -1, sizeof(::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData)},
        {718, 739, -1, sizeof(::CMsgSteamDatagramP2PSessionRequestBody)},
        {752, 763, -1, sizeof(::CMsgSteamDatagramP2PSessionRequest)},
        {766, 778, -1, sizeof(::CMsgSteamDatagramP2PSessionEstablished)},
        {782, 803, -1, sizeof(::CMsgSteamDatagramConnectionStatsP2PClientToRouter)},
        {816, 839, -1, sizeof(::CMsgSteamDatagramConnectionStatsP2PRouterToClient)},
        {854, 866, -1, sizeof(::CMsgSteamDatagramP2PBadRouteRouterToClient)},
        {870, 882, -1, sizeof(::CMsgSteamDatagramP2PRoutes_RelayCluster)},
        {886, 898, -1, sizeof(::CMsgSteamDatagramP2PRoutes_Route)},
        {902, 913, -1, sizeof(::CMsgSteamDatagramP2PRoutes)},
        {916, 930, -1, sizeof(::CMsgSteamDatagramSetSecondaryAddressRequest)},
        {936, 946, -1, sizeof(::CMsgSteamDatagramSetSecondaryAddressResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_CMsgSteamNetworkingIPAddress_default_instance_._instance,
    &::_CMsgSteamDatagramSignedMessageGeneric_default_instance_._instance,
    &::_CMsgSteamDatagramRouterPingReply_RouteException_default_instance_._instance,
    &::_CMsgSteamDatagramRouterPingReply_AltAddress_default_instance_._instance,
    &::_CMsgSteamDatagramRouterPingReply_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverPingRequestBody_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverPingRequestEnvelope_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverPingReplyData_default_instance_._instance,
    &::_CMsgSteamDatagramNoSessionRelayToClient_default_instance_._instance,
    &::_CMsgSteamDatagramNoSessionRelayToPeer_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleRequest_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleReply_POP_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleReply_default_instance_._instance,
    &::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_._instance,
    &::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance,
    &::_CMsgSteamDatagramConnectRequest_default_instance_._instance,
    &::_CMsgSteamDatagramConnectOK_default_instance_._instance,
    &::_CMsgSteamNetworkingP2PSDRRoutingSummary_default_instance_._instance,
    &::_CMsgSteamDatagramP2PRoutingSummary_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionClosed_default_instance_._instance,
    &::_CMsgSteamDatagramNoConnection_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverSessionRequest_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverSessionEstablished_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_._instance,
    &::_CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_default_instance_._instance,
    &::_CMsgSteamDatagramP2PSessionRequestBody_default_instance_._instance,
    &::_CMsgSteamDatagramP2PSessionRequest_default_instance_._instance,
    &::_CMsgSteamDatagramP2PSessionEstablished_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_._instance,
    &::_CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_._instance,
    &::_CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_._instance,
    &::_CMsgSteamDatagramP2PRoutes_Route_default_instance_._instance,
    &::_CMsgSteamDatagramP2PRoutes_default_instance_._instance,
    &::_CMsgSteamDatagramSetSecondaryAddressRequest_default_instance_._instance,
    &::_CMsgSteamDatagramSetSecondaryAddressResult_default_instance_._instance,
};
const char descriptor_table_protodef_steamdatagram_5fmessages_5fsdr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n steamdatagram_messages_sdr.proto\032+stea"
    "mnetworkingsockets_messages_certs.proto\032"
    "%steamnetworkingsockets_messages.proto\"6"
    "\n\034CMsgSteamNetworkingIPAddress\022\n\n\002v4\030\001 \001"
    "(\007\022\n\n\002v6\030\002 \001(\014\"\226\001\n%CMsgSteamDatagramSign"
    "edMessageGeneric\0221\n\004cert\030\001 \001(\0132#.CMsgSte"
    "amDatagramCertificateSigned\022\023\n\013signed_da"
    "ta\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\022\022\n\tdummy_pad"
    "\030\377\007 \001(\014\"\235\007\n CMsgSteamDatagramRouterPingR"
    "eply\022\030\n\020client_timestamp\030\001 \001(\007\022\"\n\026latenc"
    "y_datacenter_ids\030\002 \003(\007B\002\020\001\022\033\n\017latency_pi"
    "ng_ms\030\003 \003(\rB\002\020\001\022&\n\032latency_datacenter_id"
    "s_p2p\030\016 \003(\007B\002\020\001\022\037\n\023latency_ping_ms_p2p\030\017"
    " \003(\rB\002\020\001\022\026\n\016your_public_ip\030\004 \001(\007\022\030\n\020your"
    "_public_port\030\013 \001(\007\022\023\n\013server_time\030\005 \001(\007\022"
    "\021\n\tchallenge\030\006 \001(\006\022\036\n\026seconds_until_shut"
    "down\030\007 \001(\r\022\025\n\rclient_cookie\030\010 \001(\007\022%\n\035sco"
    "ring_penalty_relay_cluster\030\t \001(\r\022\r\n\005flag"
    "s\030\014 \001(\r\022J\n\020route_exceptions\030\n \003(\01320.CMsg"
    "SteamDatagramRouterPingReply.RouteExcept"
    "ion\022C\n\ralt_addresses\030\r \003(\0132,.CMsgSteamDa"
    "tagramRouterPingReply.AltAddress\022\021\n\tdumm"
    "y_pad\030c \001(\014\032H\n\016RouteException\022\026\n\016data_ce"
    "nter_id\030\001 \001(\007\022\r\n\005flags\030\002 \001(\r\022\017\n\007penalty\030"
    "\003 \001(\r\032\321\001\n\nAltAddress\022\014\n\004ipv4\030\001 \001(\007\022\014\n\004po"
    "rt\030\002 \001(\r\022\017\n\007penalty\030\003 \001(\r\022X\n\010protocol\030\004 "
    "\001(\01625.CMsgSteamDatagramRouterPingReply.A"
    "ltAddress.Protocol:\017DefaultProtocol\022\n\n\002i"
    "d\030\005 \001(\t\"0\n\010Protocol\022\023\n\017DefaultProtocol\020\000"
    "\022\017\n\013NetworkNext\020\001\"L\n\005Flags\022 \n\034FLAG_MAYBE"
    "_MORE_DATA_CENTERS\020\001\022!\n\035FLAG_MAYBE_MORE_"
    "ALT_ADDRESSES\020\002\"\200\002\n*CMsgSteamDatagramGam"
    "eserverPingRequestBody\022\023\n\013relay_popid\030\001 "
    "\001(\007\0225\n\016your_public_ip\030\002 \001(\0132\035.CMsgSteamN"
    "etworkingIPAddress\022\030\n\020your_public_port\030\003"
    " \001(\r\022\027\n\017relay_unix_time\030\004 \001(\004\022\026\n\016routing"
    "_secret\030\005 \001(\006\022-\n\006my_ips\030\006 \003(\0132\035.CMsgStea"
    "mNetworkingIPAddress\022\014\n\004echo\030\010 \001(\014\"\272\002\n.C"
    "MsgSteamDatagramGameserverPingRequestEnv"
    "elope\0221\n\004cert\030\006 \001(\0132#.CMsgSteamDatagramC"
    "ertificateSigned\022\023\n\013signed_data\030\007 \001(\014\022\021\n"
    "\tsignature\030\010 \001(\014\022\035\n\025legacy_your_public_i"
    "p\030\001 \001(\007\022\037\n\027legacy_your_public_port\030\005 \001(\007"
    "\022\036\n\026legacy_relay_unix_time\030\002 \001(\007\022\030\n\020lega"
    "cy_challenge\030\003 \001(\006\022\037\n\027legacy_router_time"
    "stamp\030\004 \001(\007\022\022\n\tdummy_pad\030\377\007 \001(\014\"\227\002\n(CMsg"
    "SteamDatagramGameserverPingReplyData\022\034\n\024"
    "echo_relay_unix_time\030\002 \001(\007\022\014\n\004echo\030\010 \001(\014"
    "\022\030\n\020legacy_challenge\030\003 \001(\006\022\037\n\027legacy_rou"
    "ter_timestamp\030\004 \001(\007\022\026\n\016data_center_id\030\005 "
    "\001(\007\022\r\n\005appid\030\006 \001(\r\022\030\n\020protocol_version\030\007"
    " \001(\r\022\r\n\005build\030\t \001(\t\022\036\n\026network_config_ve"
    "rsion\030\n \001(\004\022\024\n\014my_unix_time\030\013 \001(\007\"\272\001\n\'CM"
    "sgSteamDatagramNoSessionRelayToClient\022\025\n"
    "\rconnection_id\030\007 \001(\007\022\026\n\016your_public_ip\030\002"
    " \001(\007\022\030\n\020your_public_port\030\006 \001(\007\022\023\n\013server"
    "_time\030\003 \001(\007\022\021\n\tchallenge\030\004 \001(\006\022\036\n\026second"
    "s_until_shutdown\030\005 \001(\r\"\227\001\n%CMsgSteamData"
    "gramNoSessionRelayToPeer\022\037\n\027legacy_relay"
    "_session_id\030\001 \001(\r\022\035\n\025from_relay_session_"
    "id\030\002 \001(\007\022\032\n\022from_connection_id\030\007 \001(\007\022\022\n\n"
    "kludge_pad\030c \001(\006\"A\n(CMsgSteamDatagramCli"
    "entPingSampleRequest\022\025\n\rconnection_id\030\001 "
    "\001(\007\"\222\007\n&CMsgSteamDatagramClientPingSampl"
    "eReply\022\025\n\rconnection_id\030\001 \001(\007\022\035\n\025relay_o"
    "verride_active\030\005 \001(\010\0229\n\004pops\030\002 \003(\0132+.CMs"
    "gSteamDatagramClientPingSampleReply.POP\022"
    "U\n\023legacy_data_centers\030\003 \003(\01328.CMsgSteam"
    "DatagramClientPingSampleReply.LegacyData"
    "Center\032\270\004\n\003POP\022\016\n\006pop_id\030\001 \001(\007\022\035\n\025defaul"
    "t_front_ping_ms\030\002 \001(\r\022\027\n\017cluster_penalty"
    "\030\004 \001(\r\022M\n\ralt_addresses\030\007 \003(\01326.CMsgStea"
    "mDatagramClientPingSampleReply.POP.AltAd"
    "dress\022\033\n\023default_e2e_ping_ms\030\003 \001(\r\022\031\n\021de"
    "fault_e2e_score\030\005 \001(\r\022!\n\031p2p_via_peer_re"
    "lay_pop_id\030\006 \001(\007\022\027\n\017best_dc_ping_ms\030\t \001("
    "\r\022\025\n\rbest_dc_score\030\n \001(\r\022 \n\030best_dc_via_"
    "relay_pop_id\030\013 \001(\007\022\032\n\022default_dc_ping_ms"
    "\030\014 \001(\r\022\030\n\020default_dc_score\030\r \001(\r\022#\n\033defa"
    "ult_dc_via_relay_pop_id\030\016 \001(\007\022\027\n\017test_dc"
    "_ping_ms\030\017 \001(\r\022\025\n\rtest_dc_score\030\020 \001(\r\022 \n"
    "\030test_dc_via_relay_pop_id\030\021 \001(\007\032@\n\nAltAd"
    "dress\022\n\n\002id\030\001 \001(\t\022\025\n\rfront_ping_ms\030\002 \001(\r"
    "\022\017\n\007penalty\030\003 \001(\r\032e\n\020LegacyDataCenter\022\026\n"
    "\016data_center_id\030\001 \001(\007\022 \n\030best_dc_via_rel"
    "ay_pop_id\030\002 \001(\007\022\027\n\017best_dc_ping_ms\030\003 \001(\r"
    "\"\216\005\n&CMsgSteamDatagramClientSwitchedPrim"
    "ary\022\025\n\rconnection_id\030\001 \001(\007\022\017\n\007from_ip\030\002 "
    "\001(\007\022\021\n\tfrom_port\030\003 \001(\r\022\033\n\023from_router_cl"
    "uster\030\004 \001(\007\022\030\n\020from_active_time\030\005 \001(\r\022 \n"
    "\030from_active_packets_recv\030\006 \001(\r\022\033\n\023from_"
    "dropped_reason\030\007 \001(\t\022\016\n\006gap_ms\030\010 \001(\r\022O\n\020"
    "from_quality_now\030\t \001(\01325.CMsgSteamDatagr"
    "amClientSwitchedPrimary.RouterQuality\022M\n"
    "\016to_quality_now\030\n \001(\01325.CMsgSteamDatagra"
    "mClientSwitchedPrimary.RouterQuality\022P\n\021"
    "from_quality_then\030\013 \001(\01325.CMsgSteamDatag"
    "ramClientSwitchedPrimary.RouterQuality\022N"
    "\n\017to_quality_then\030\014 \001(\01325.CMsgSteamDatag"
    "ramClientSwitchedPrimary.RouterQuality\032a"
    "\n\rRouterQuality\022\r\n\005score\030\001 \001(\r\022\022\n\nfront_"
    "ping\030\002 \001(\r\022\021\n\tback_ping\030\003 \001(\r\022\032\n\022seconds"
    "_until_down\030\004 \001(\r\"\302\002\n\037CMsgSteamDatagramC"
    "onnectRequest\022\025\n\rconnection_id\030\001 \001(\007\022\024\n\014"
    "my_timestamp\030\004 \001(\006\022\023\n\013ping_est_ms\030\005 \001(\r\022"
    "\024\n\014virtual_port\030\t \001(\r\022#\n\033gameserver_rela"
    "y_session_id\030\002 \001(\r\0227\n\005crypt\030\006 \001(\0132(.CMsg"
    "SteamDatagramSessionCryptInfoSigned\0221\n\004c"
    "ert\030\007 \001(\0132#.CMsgSteamDatagramCertificate"
    "Signed\022\026\n\016routing_secret\030\n \001(\006\022\036\n\026legacy"
    "_client_steam_id\030\003 \001(\006\"\232\002\n\032CMsgSteamData"
    "gramConnectOK\022\034\n\024client_connection_id\030\001 "
    "\001(\007\022\034\n\024server_connection_id\030\007 \001(\007\022\026\n\016you"
    "r_timestamp\030\003 \001(\006\022\027\n\017delay_time_usec\030\004 \001"
    "(\r\022#\n\033gameserver_relay_session_id\030\002 \001(\r\022"
    "7\n\005crypt\030\005 \001(\0132(.CMsgSteamDatagramSessio"
    "nCryptInfoSigned\0221\n\004cert\030\006 \001(\0132#.CMsgSte"
    "amDatagramCertificateSigned\"\256\003\n\'CMsgStea"
    "mNetworkingP2PSDRRoutingSummary\022\024\n\014initi"
    "al_ping\030\001 \001(\r\022 \n\030initial_ping_front_loca"
    "l\030\002 \001(\r\022!\n\031initial_ping_front_remote\030\003 \001"
    "(\r\022\025\n\rinitial_score\030\004 \001(\r\022\031\n\021initial_pop"
    "_local\030\005 \001(\007\022\032\n\022initial_pop_remote\030\006 \001(\007"
    "\022\021\n\tbest_ping\030\013 \001(\r\022\035\n\025best_ping_front_l"
    "ocal\030\014 \001(\r\022\036\n\026best_ping_front_remote\030\r \001"
    "(\r\022\022\n\nbest_score\030\016 \001(\r\022\026\n\016best_pop_local"
    "\030\017 \001(\007\022\027\n\017best_pop_remote\030\020 \001(\007\022\021\n\tbest_"
    "time\030\021 \001(\r\022\026\n\016negotiation_ms\030\007 \001(\r\022\030\n\020se"
    "lected_seconds\030\010 \001(\r\"\217\001\n\"CMsgSteamDatagr"
    "amP2PRoutingSummary\0222\n\003ice\030\002 \001(\0132%.CMsgS"
    "teamNetworkingICESessionSummary\0225\n\003sdr\030\003"
    " \001(\0132(.CMsgSteamNetworkingP2PSDRRoutingS"
    "ummary\"\351\006\n!CMsgSteamDatagramConnectionCl"
    "osed\022\030\n\020to_connection_id\030\007 \001(\007\022\032\n\022from_c"
    "onnection_id\030\010 \001(\007\022\034\n\024from_identity_stri"
    "ng\030\017 \001(\t\022M\n\033legacy_from_identity_binary\030"
    "\r \001(\0132(.CMsgSteamNetworkingIdentityLegac"
    "yBinary\022\034\n\024legacy_from_steam_id\030\003 \001(\006\022*\n"
    "\"legacy_gameserver_relay_session_id\030\002 \001("
    "\r\022\033\n\023to_relay_session_id\030\t \001(\007\022\035\n\025from_r"
    "elay_session_id\030\n \001(\007\022*\n\"forward_target_"
    "relay_routing_token\030\013 \001(\014\022\037\n\027forward_tar"
    "get_revision\030\014 \001(\r\022G\n\nrelay_mode\030\004 \001(\0162-"
    ".CMsgSteamDatagramConnectionClosed.ERela"
    "yMode:\004None\022\r\n\005debug\030\005 \001(\t\022\023\n\013reason_cod"
    "e\030\006 \001(\r\022\026\n\016routing_secret\030\016 \001(\006\022\033\n\023not_p"
    "rimary_session\030\020 \001(\010\022\035\n\025not_primary_tran"
    "sport\030\023 \001(\010\022\035\n\025relay_override_active\030\026 \001"
    "(\010\022:\n\rquality_relay\030\021 \001(\0132#.CMsgSteamDat"
    "agramConnectionQuality\0228\n\013quality_e2e\030\022 "
    "\001(\0132#.CMsgSteamDatagramConnectionQuality"
    "\022@\n\023p2p_routing_summary\030\025 \001(\0132#.CMsgStea"
    "mDatagramP2PRoutingSummary\"6\n\nERelayMode"
    "\022\010\n\004None\020\000\022\014\n\010EndToEnd\020\001\022\020\n\014ClosedByPeer"
    "\020\002\"\314\004\n\035CMsgSteamDatagramNoConnection\022\030\n\020"
    "to_connection_id\030\005 \001(\007\022\032\n\022from_connectio"
    "n_id\030\006 \001(\007\022*\n\"legacy_gameserver_relay_se"
    "ssion_id\030\002 \001(\r\022\033\n\023to_relay_session_id\030\t "
    "\001(\007\022\035\n\025from_relay_session_id\030\n \001(\007\022\034\n\024fr"
    "om_identity_string\030\007 \001(\t\022\034\n\024legacy_from_"
    "steam_id\030\003 \001(\006\022\022\n\nend_to_end\030\004 \001(\010\022\033\n\023no"
    "t_primary_session\030\014 \001(\010\022\035\n\025not_primary_t"
    "ransport\030\017 \001(\010\022\035\n\025relay_override_active\030"
    "\021 \001(\010\022:\n\rquality_relay\030\r \001(\0132#.CMsgSteam"
    "DatagramConnectionQuality\0228\n\013quality_e2e"
    "\030\016 \001(\0132#.CMsgSteamDatagramConnectionQual"
    "ity\022@\n\023p2p_routing_summary\030\020 \001(\0132#.CMsgS"
    "teamDatagramP2PRoutingSummary\022\026\n\016routing"
    "_secret\030\013 \001(\006\022\022\n\tdummy_pad\030\377\007 \001(\007\"\334\002\n)CM"
    "sgSteamDatagramGameserverSessionRequest\022"
    "\016\n\006ticket\030\001 \001(\014\022\026\n\016challenge_time\030\003 \001(\007\022"
    "\021\n\tchallenge\030\004 \001(\006\022\034\n\024client_connection_"
    "id\030\005 \001(\007\022\034\n\024server_connection_id\030\010 \001(\007\022\036"
    "\n\026network_config_version\030\006 \001(\004\022\030\n\020protoc"
    "ol_version\030\007 \001(\r\022\020\n\010platform\030\t \001(\t\022\r\n\005bu"
    "ild\030\n \001(\t\022\037\n\027dev_gameserver_identity\030d \001"
    "(\t\022<\n\017dev_client_cert\030e \001(\0132#.CMsgSteamD"
    "atagramCertificateSigned\"\350\001\n-CMsgSteamDa"
    "tagramGameserverSessionEstablished\022\025\n\rco"
    "nnection_id\030\001 \001(\007\022\"\n\032gameserver_identity"
    "_string\030\002 \001(\t\022\036\n\026seconds_until_shutdown\030"
    "\004 \001(\r\022\023\n\013seq_num_r2c\030\006 \001(\r\022$\n\034dummy_lega"
    "cy_identity_binary\030\007 \001(\014\022!\n\031legacy_games"
    "erver_steamid\030\003 \001(\006\"\255\003\n.CMsgSteamDatagra"
    "mConnectionStatsClientToRouter\022:\n\rqualit"
    "y_relay\030\001 \001(\0132#.CMsgSteamDatagramConnect"
    "ionQuality\0228\n\013quality_e2e\030\002 \001(\0132#.CMsgSt"
    "eamDatagramConnectionQuality\022\021\n\tack_rela"
    "y\030\004 \003(\007\022\026\n\016legacy_ack_e2e\030\005 \003(\007\022\r\n\005flags"
    "\030\006 \001(\r\022\034\n\024client_connection_id\030\010 \001(\007\022\023\n\013"
    "seq_num_c2r\030\t \001(\r\022\023\n\013seq_num_e2e\030\n \001(\r\"\202"
    "\001\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_R"
    "EQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\022"
    "\027\n\023NOT_PRIMARY_SESSION\020\010\022\031\n\025CLIENT_RELAY"
    "_OVERRIDE\020 \"\371\003\n.CMsgSteamDatagramConnect"
    "ionStatsRouterToClient\022:\n\rquality_relay\030"
    "\001 \001(\0132#.CMsgSteamDatagramConnectionQuali"
    "ty\0228\n\013quality_e2e\030\002 \001(\0132#.CMsgSteamDatag"
    "ramConnectionQuality\022\036\n\026seconds_until_sh"
    "utdown\030\006 \001(\r\022\032\n\022migrate_request_ip\030\n \001(\007"
    "\022\034\n\024migrate_request_port\030\013 \001(\r\022%\n\035scorin"
    "g_penalty_relay_cluster\030\014 \001(\r\022\021\n\tack_rel"
    "ay\030\r \003(\007\022\026\n\016legacy_ack_e2e\030\016 \003(\007\022\r\n\005flag"
    "s\030\017 \001(\r\022\034\n\024client_connection_id\030\007 \001(\007\022\023\n"
    "\013seq_num_r2c\030\010 \001(\r\022\023\n\013seq_num_e2e\030\t \001(\r\""
    "N\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_R"
    "EQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\""
    "\210\004\n.CMsgSteamDatagramConnectionStatsRout"
    "erToServer\022:\n\rquality_relay\030\001 \001(\0132#.CMsg"
    "SteamDatagramConnectionQuality\0228\n\013qualit"
    "y_e2e\030\002 \001(\0132#.CMsgSteamDatagramConnectio"
    "nQuality\022\021\n\tack_relay\030\n \003(\007\022\026\n\016legacy_ac"
    "k_e2e\030\013 \003(\007\022\r\n\005flags\030\014 \001(\r\022\023\n\013seq_num_r2"
    "s\030\005 \001(\r\022\023\n\013seq_num_e2e\030\006 \001(\r\022\036\n\026client_i"
    "dentity_string\030\017 \001(\t\022\036\n\026legacy_client_st"
    "eam_id\030\007 \001(\006\022\030\n\020relay_session_id\030\010 \001(\r\022\034"
    "\n\024client_connection_id\030\t \001(\007\022\034\n\024server_c"
    "onnection_id\030\r \001(\007\022\026\n\016routing_secret\030\016 \001"
    "(\006\"N\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017AC"
    "K_REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE"
    "\020\004\"\260\003\n.CMsgSteamDatagramConnectionStatsS"
    "erverToRouter\022:\n\rquality_relay\030\001 \001(\0132#.C"
    "MsgSteamDatagramConnectionQuality\0228\n\013qua"
    "lity_e2e\030\002 \001(\0132#.CMsgSteamDatagramConnec"
    "tionQuality\022\021\n\tack_relay\030\010 \003(\007\022\026\n\016legacy"
    "_ack_e2e\030\t \003(\007\022\r\n\005flags\030\n \001(\r\022\023\n\013seq_num"
    "_s2r\030\003 \001(\r\022\023\n\013seq_num_e2e\030\004 \001(\r\022\030\n\020relay"
    "_session_id\030\006 \001(\r\022\034\n\024client_connection_i"
    "d\030\007 \001(\007\022\034\n\024server_connection_id\030\013 \001(\007\"N\n"
    "\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQ"
    "UEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\"\305\003"
    "\n&CMsgSteamDatagramP2PSessionRequestBody"
    "\022\026\n\016challenge_time\030\001 \001(\007\022\021\n\tchallenge\030\002 "
    "\001(\006\022\034\n\024client_connection_id\030\003 \001(\007\022\034\n\024leg"
    "acy_peer_steam_id\030\004 \001(\006\022\034\n\024peer_identity"
    "_string\030\013 \001(\t\022\032\n\022peer_connection_id\030\005 \001("
    "\007\022\026\n\016encrypted_data\030\016 \001(\014\022,\n$encryption_"
    "your_public_key_lead_byte\030\017 \001(\r\022*\n\"encry"
    "ption_my_ephemeral_public_key\030\020 \001(\014\022\030\n\020p"
    "rotocol_version\030\010 \001(\r\022\036\n\026network_config_"
    "version\030\t \001(\004\022\020\n\010platform\030\014 \001(\t\022\r\n\005build"
    "\030\r \001(\t\032-\n\rEncryptedData\022\034\n\024peer_identity"
    "_string\030\001 \001(\t\"x\n\"CMsgSteamDatagramP2PSes"
    "sionRequest\0221\n\004cert\030\001 \001(\0132#.CMsgSteamDat"
    "agramCertificateSigned\022\014\n\004body\030\002 \001(\014\022\021\n\t"
    "signature\030\003 \001(\014\"\221\001\n&CMsgSteamDatagramP2P"
    "SessionEstablished\022\025\n\rconnection_id\030\001 \001("
    "\007\022\036\n\026seconds_until_shutdown\030\003 \001(\r\022\033\n\023rel"
    "ay_routing_token\030\004 \001(\014\022\023\n\013seq_num_r2c\030\005 "
    "\001(\r\"\211\005\n1CMsgSteamDatagramConnectionStats"
    "P2PClientToRouter\022:\n\rquality_relay\030\001 \001(\013"
    "2#.CMsgSteamDatagramConnectionQuality\0228\n"
    "\013quality_e2e\030\002 \001(\0132#.CMsgSteamDatagramCo"
    "nnectionQuality\022@\n\023p2p_routing_summary\030\016"
    " \001(\0132#.CMsgSteamDatagramP2PRoutingSummar"
    "y\022\021\n\tack_relay\030\003 \003(\007\022\026\n\016legacy_ack_e2e\030\004"
    " \003(\007\022\r\n\005flags\030\005 \001(\r\022*\n\"forward_target_re"
    "lay_routing_token\030\006 \001(\014\022\037\n\027forward_targe"
    "t_revision\030\007 \001(\r\022\016\n\006routes\030\010 \001(\014\022 \n\030ack_"
    "peer_routes_revision\030\t \001(\r\022\025\n\rconnection"
    "_id\030\n \001(\007\022\023\n\013seq_num_c2r\030\013 \001(\r\022\023\n\013seq_nu"
    "m_e2e\030\014 \001(\r\"\241\001\n\005Flags\022\025\n\021ACK_REQUEST_REL"
    "AY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST"
    "_IMMEDIATE\020\004\022\027\n\023NOT_PRIMARY_SESSION\020\010\022\035\n"
    "\031NOT_PRIMARY_TRANSPORT_E2E\020\020\022\031\n\025CLIENT_R"
    "ELAY_OVERRIDE\020 \"\353\004\n1CMsgSteamDatagramCon"
    "nectionStatsP2PRouterToClient\022:\n\rquality"
    "_relay\030\001 \001(\0132#.CMsgSteamDatagramConnecti"
    "onQuality\0228\n\013quality_e2e\030\002 \001(\0132#.CMsgSte"
    "amDatagramConnectionQuality\022\036\n\026seconds_u"
    "ntil_shutdown\030\003 \001(\r\022\032\n\022migrate_request_i"
    "p\030\004 \001(\007\022\034\n\024migrate_request_port\030\005 \001(\r\022%\n"
    "\035scoring_penalty_relay_cluster\030\006 \001(\r\022\021\n\t"
    "ack_relay\030\007 \003(\007\022\026\n\016legacy_ack_e2e\030\010 \003(\007\022"
    "\r\n\005flags\030\t \001(\r\022#\n\033ack_forward_target_rev"
    "ision\030\n \001(\r\022\016\n\006routes\030\013 \001(\014\022 \n\030ack_peer_"
    "routes_revision\030\014 \001(\r\022\025\n\rconnection_id\030\r"
    " \001(\007\022\023\n\013seq_num_r2c\030\016 \001(\r\022\023\n\013seq_num_e2e"
    "\030\017 \001(\r\"m\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023"
    "\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMED"
    "IATE\020\004\022\035\n\031NOT_PRIMARY_TRANSPORT_E2E\020\020\"\240\001"
    "\n*CMsgSteamDatagramP2PBadRouteRouterToCl"
    "ient\022\025\n\rconnection_id\030\001 \001(\007\022\"\n\032failed_re"
    "lay_routing_token\030\002 \001(\014\022#\n\033ack_forward_t"
    "arget_revision\030\003 \001(\r\022\022\n\nkludge_pad\030c \001(\006"
    "\"\357\002\n\032CMsgSteamDatagramP2PRoutes\022@\n\016relay"
    "_clusters\030\001 \003(\0132(.CMsgSteamDatagramP2PRo"
    "utes.RelayCluster\0221\n\006routes\030\002 \003(\0132!.CMsg"
    "SteamDatagramP2PRoutes.Route\022\020\n\010revision"
    "\030\003 \001(\r\032k\n\014RelayCluster\022\016\n\006pop_id\030\001 \001(\007\022\017"
    "\n\007ping_ms\030\002 \001(\r\022\025\n\rscore_penalty\030\003 \001(\r\022#"
    "\n\033session_relay_routing_token\030\004 \001(\014\032]\n\005R"
    "oute\022\021\n\tmy_pop_id\030\001 \001(\007\022\023\n\013your_pop_id\030\002"
    " \001(\007\022\024\n\014legacy_score\030\003 \001(\r\022\026\n\016interior_s"
    "core\030\004 \001(\r\"\314\001\n+CMsgSteamDatagramSetSecon"
    "daryAddressRequest\022\026\n\016client_main_ip\030\001 \001"
    "(\007\022\030\n\020client_main_port\030\002 \001(\007\022\034\n\024client_c"
    "onnection_id\030\003 \001(\007\022\027\n\017client_identity\030\004 "
    "\001(\t\022 \n\030request_send_duplication\030\005 \001(\010\022\022\n"
    "\nkludge_pad\030c \001(\014\"N\n*CMsgSteamDatagramSe"
    "tSecondaryAddressResult\022\017\n\007success\030\001 \001(\010"
    "\022\017\n\007message\030\002 \001(\t*\340\013\n\023ESteamDatagramMsgI"
    "D\022\037\n\033k_ESteamDatagramMsg_Invalid\020\000\022)\n%k_"
    "ESteamDatagramMsg_RouterPingRequest\020\001\022\'\n"
    "#k_ESteamDatagramMsg_RouterPingReply\020\002\022-"
    "\n)k_ESteamDatagramMsg_GameserverPingRequ"
    "est\020\003\0220\n,k_ESteamDatagramMsg_GameserverS"
    "essionRequest\020\005\0224\n0k_ESteamDatagramMsg_G"
    "ameserverSessionEstablished\020\006\022!\n\035k_EStea"
    "mDatagramMsg_NoSession\020\007\022\"\n\036k_ESteamData"
    "gramMsg_Diagnostic\020\010\022*\n&k_ESteamDatagram"
    "Msg_DataClientToRouter\020\t\022*\n&k_ESteamData"
    "gramMsg_DataRouterToServer\020\n\022*\n&k_ESteam"
    "DatagramMsg_DataServerToRouter\020\013\022*\n&k_ES"
    "teamDatagramMsg_DataRouterToClient\020\014\022\035\n\031"
    "k_ESteamDatagramMsg_Stats\020\r\022/\n+k_ESteamD"
    "atagramMsg_ClientPingSampleRequest\020\016\022-\n)"
    "k_ESteamDatagramMsg_ClientPingSampleRepl"
    "y\020\017\0225\n1k_ESteamDatagramMsg_ClientToRoute"
    "rSwitchedPrimary\020\020\022#\n\037k_ESteamDatagramMs"
    "g_RelayHealth\020\021\022&\n\"k_ESteamDatagramMsg_C"
    "onnectRequest\020\022\022!\n\035k_ESteamDatagramMsg_C"
    "onnectOK\020\023\022(\n$k_ESteamDatagramMsg_Connec"
    "tionClosed\020\024\022$\n k_ESteamDatagramMsg_NoCo"
    "nnection\020\025\022,\n(k_ESteamDatagramMsg_Ticket"
    "DecryptRequest\020\026\022*\n&k_ESteamDatagramMsg_"
    "TicketDecryptReply\020\027\022)\n%k_ESteamDatagram"
    "Msg_P2PSessionRequest\020\030\022-\n)k_ESteamDatag"
    "ramMsg_P2PSessionEstablished\020\031\022&\n\"k_ESte"
    "amDatagramMsg_P2PStatsClient\020\032\022%\n!k_ESte"
    "amDatagramMsg_P2PStatsRelay\020\033\022#\n\037k_EStea"
    "mDatagramMsg_P2PBadRoute\020\034\022+\n\'k_ESteamDa"
    "tagramMsg_GameserverPingReply\020\035\0224\n0k_ESt"
    "eamDatagramMsg_LegacyGameserverRegistrat"
    "ion\020\036\0222\n.k_ESteamDatagramMsg_SetSecondar"
    "yAddressRequest\020\037\0221\n-k_ESteamDatagramMsg"
    "_SetSecondaryAddressResult\020 \022/\n+k_ESteam"
    "DatagramMsg_RelayToRelayPingRequest\020!\022-\n"
    ")k_ESteamDatagramMsg_RelayToRelayPingRep"
    "ly\020\"B\005H\001\200\001\000"
};
static const ::_pbi::DescriptorTable* const descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_deps[2] =
    {
        &::descriptor_table_steamnetworkingsockets_5fmessages_2eproto,
        &::descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
static ::absl::once_flag descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto = {
    false,
    false,
    13571,
    descriptor_table_protodef_steamdatagram_5fmessages_5fsdr_2eproto,
    "steamdatagram_messages_sdr.proto",
    &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
    descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_deps,
    2,
    41,
    schemas,
    file_default_instances,
    TableStruct_steamdatagram_5fmessages_5fsdr_2eproto::offsets,
    file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto,
    file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto,
    file_level_service_descriptors_steamdatagram_5fmessages_5fsdr_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter() {
  return &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steamdatagram_5fmessages_5fsdr_2eproto(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[0];
}
bool CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramRouterPingReply_AltAddress_Protocol CMsgSteamDatagramRouterPingReply_AltAddress::DefaultProtocol;
constexpr CMsgSteamDatagramRouterPingReply_AltAddress_Protocol CMsgSteamDatagramRouterPingReply_AltAddress::NetworkNext;
constexpr CMsgSteamDatagramRouterPingReply_AltAddress_Protocol CMsgSteamDatagramRouterPingReply_AltAddress::Protocol_MIN;
constexpr CMsgSteamDatagramRouterPingReply_AltAddress_Protocol CMsgSteamDatagramRouterPingReply_AltAddress::Protocol_MAX;
constexpr int CMsgSteamDatagramRouterPingReply_AltAddress::Protocol_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramRouterPingReply_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[1];
}
bool CMsgSteamDatagramRouterPingReply_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramRouterPingReply_Flags CMsgSteamDatagramRouterPingReply::FLAG_MAYBE_MORE_DATA_CENTERS;
constexpr CMsgSteamDatagramRouterPingReply_Flags CMsgSteamDatagramRouterPingReply::FLAG_MAYBE_MORE_ALT_ADDRESSES;
constexpr CMsgSteamDatagramRouterPingReply_Flags CMsgSteamDatagramRouterPingReply::Flags_MIN;
constexpr CMsgSteamDatagramRouterPingReply_Flags CMsgSteamDatagramRouterPingReply::Flags_MAX;
constexpr int CMsgSteamDatagramRouterPingReply::Flags_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[2];
}
bool CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::None;
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::EndToEnd;
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ClosedByPeer;
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ERelayMode_MIN;
constexpr CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ERelayMode_MAX;
constexpr int CMsgSteamDatagramConnectionClosed::ERelayMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[3];
}
bool CMsgSteamDatagramConnectionStatsClientToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 32:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::NOT_PRIMARY_SESSION;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::CLIENT_RELAY_OVERRIDE;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsClientToRouter::Flags_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[4];
}
bool CMsgSteamDatagramConnectionStatsRouterToClient_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsRouterToClient::Flags_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[5];
}
bool CMsgSteamDatagramConnectionStatsRouterToServer_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsRouterToServer::Flags_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[6];
}
bool CMsgSteamDatagramConnectionStatsServerToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsServerToRouter::Flags_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[7];
}
bool CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::NOT_PRIMARY_SESSION;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::NOT_PRIMARY_TRANSPORT_E2E;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::CLIENT_RELAY_OVERRIDE;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[8];
}
bool CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 16:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_RELAY;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_E2E;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::NOT_PRIMARY_TRANSPORT_E2E;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_MIN;
constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_MAX;
constexpr int CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[9];
}
bool ESteamDatagramMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class CMsgSteamNetworkingIPAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingIPAddress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_._has_bits_);
  static void set_has_v4(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v6(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamNetworkingIPAddress::CMsgSteamNetworkingIPAddress(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingIPAddress)
}
CMsgSteamNetworkingIPAddress::CMsgSteamNetworkingIPAddress(const CMsgSteamNetworkingIPAddress& from) : ::google::protobuf::Message() {
  CMsgSteamNetworkingIPAddress* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.v6_){},
      decltype(_impl_.v4_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.v6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.v6_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.v6_.Set(from._internal_v6(), _this->GetArenaForAllocation());
  }
  _this->_impl_.v4_ = from._impl_.v4_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingIPAddress)
}
inline void CMsgSteamNetworkingIPAddress::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.v6_){},
      decltype(_impl_.v4_){0u},
  };
  _impl_.v6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.v6_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamNetworkingIPAddress::~CMsgSteamNetworkingIPAddress() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingIPAddress)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamNetworkingIPAddress::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.v6_.Destroy();
}
void CMsgSteamNetworkingIPAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamNetworkingIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingIPAddress)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.v6_.ClearNonDefaultToEmpty();
  }
  _impl_.v4_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingIPAddress::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CMsgSteamNetworkingIPAddress::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamNetworkingIPAddress_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bytes v6 = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_.v6_)}},
    // optional fixed32 v4 = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_.v4_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 v4 = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_.v4_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional bytes v6 = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_.v6_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamNetworkingIPAddress::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingIPAddress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 v4 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_v4(), target);
  }

  // optional bytes v6 = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_v6();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingIPAddress)
  return target;
}

::size_t CMsgSteamNetworkingIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingIPAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes v6 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_v6());
    }

    // optional fixed32 v4 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamNetworkingIPAddress::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamNetworkingIPAddress::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamNetworkingIPAddress::GetClassData() const { return &_class_data_; }


void CMsgSteamNetworkingIPAddress::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamNetworkingIPAddress*>(&to_msg);
  auto& from = static_cast<const CMsgSteamNetworkingIPAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingIPAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_v6(from._internal_v6());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.v4_ = from._impl_.v4_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamNetworkingIPAddress::CopyFrom(const CMsgSteamNetworkingIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamNetworkingIPAddress::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingIPAddress::InternalSwap(CMsgSteamNetworkingIPAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.v6_, lhs_arena,
                                       &other->_impl_.v6_, rhs_arena);
        swap(_impl_.v4_, other->_impl_.v4_);
}

::google::protobuf::Metadata CMsgSteamNetworkingIPAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[0]);
}
// ===================================================================

class CMsgSteamDatagramSignedMessageGeneric::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSignedMessageGeneric>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_._has_bits_);
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramSignedMessageGeneric* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signed_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dummy_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramSignedMessageGeneric::_Internal::cert(const CMsgSteamDatagramSignedMessageGeneric* msg) {
  return *msg->_impl_.cert_;
}
void CMsgSteamDatagramSignedMessageGeneric::clear_cert() {
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgSteamDatagramSignedMessageGeneric::CMsgSteamDatagramSignedMessageGeneric(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSignedMessageGeneric)
}
CMsgSteamDatagramSignedMessageGeneric::CMsgSteamDatagramSignedMessageGeneric(const CMsgSteamDatagramSignedMessageGeneric& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramSignedMessageGeneric* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.signed_data_){},
      decltype(_impl_.signature_){},
      decltype(_impl_.dummy_pad_){},
      decltype(_impl_.cert_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.signed_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signed_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.signed_data_.Set(from._internal_signed_data(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _impl_.dummy_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dummy_pad_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.dummy_pad_.Set(from._internal_dummy_pad(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.cert_ = new ::CMsgSteamDatagramCertificateSigned(*from._impl_.cert_);
  }

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSignedMessageGeneric)
}
inline void CMsgSteamDatagramSignedMessageGeneric::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.signed_data_){},
      decltype(_impl_.signature_){},
      decltype(_impl_.dummy_pad_){},
      decltype(_impl_.cert_){nullptr},
  };
  _impl_.signed_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signed_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dummy_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dummy_pad_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramSignedMessageGeneric::~CMsgSteamDatagramSignedMessageGeneric() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSignedMessageGeneric)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramSignedMessageGeneric::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signed_data_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.dummy_pad_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cert_;
}
void CMsgSteamDatagramSignedMessageGeneric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramSignedMessageGeneric::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSignedMessageGeneric)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.signed_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.dummy_pad_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSignedMessageGeneric::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 1, 0, 7> CMsgSteamDatagramSignedMessageGeneric::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_._has_bits_),
    0, // no _extensions_
    1023, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramSignedMessageGeneric_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.cert_)}},
    // optional bytes signed_data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.signed_data_)}},
    // optional bytes signature = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.signature_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes dummy_pad = 1023;
    {::_pbi::TcParser::FastBS2,
     {16378, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.dummy_pad_)}},
  }}, {{
    1023, 0, 1,
    65534, 3,
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.cert_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes signed_data = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.signed_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes signature = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.signature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes dummy_pad = 1023;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.dummy_pad_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramSignedMessageGeneric::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSignedMessageGeneric)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cert(this),
        _Internal::cert(this).GetCachedSize(), target, stream);
  }

  // optional bytes signed_data = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_signed_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // optional bytes dummy_pad = 1023;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_dummy_pad();
    target = stream->WriteBytesMaybeAliased(1023, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSignedMessageGeneric)
  return target;
}

::size_t CMsgSteamDatagramSignedMessageGeneric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSignedMessageGeneric)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes signed_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_signed_data());
    }

    // optional bytes signature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_signature());
    }

    // optional bytes dummy_pad = 1023;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_dummy_pad());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cert_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramSignedMessageGeneric::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramSignedMessageGeneric::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramSignedMessageGeneric::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramSignedMessageGeneric::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramSignedMessageGeneric*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramSignedMessageGeneric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSignedMessageGeneric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_signed_data(from._internal_signed_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_dummy_pad(from._internal_dummy_pad());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(
          from._internal_cert());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramSignedMessageGeneric::CopyFrom(const CMsgSteamDatagramSignedMessageGeneric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSignedMessageGeneric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramSignedMessageGeneric::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSignedMessageGeneric::InternalSwap(CMsgSteamDatagramSignedMessageGeneric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signed_data_, lhs_arena,
                                       &other->_impl_.signed_data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dummy_pad_, lhs_arena,
                                       &other->_impl_.dummy_pad_, rhs_arena);
  swap(_impl_.cert_, other->_impl_.cert_);
}

::google::protobuf::Metadata CMsgSteamDatagramSignedMessageGeneric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[1]);
}
// ===================================================================

class CMsgSteamDatagramRouterPingReply_RouteException::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramRouterPingReply_RouteException>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_._has_bits_);
  static void set_has_data_center_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply.RouteException)
}
CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(const CMsgSteamDatagramRouterPingReply_RouteException& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply.RouteException)
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_center_id_){0u},
      decltype(_impl_.flags_){0u},
      decltype(_impl_.penalty_){0u},
  };
}
CMsgSteamDatagramRouterPingReply_RouteException::~CMsgSteamDatagramRouterPingReply_RouteException() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply.RouteException)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgSteamDatagramRouterPingReply_RouteException::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramRouterPingReply_RouteException::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.data_center_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.penalty_) -
        reinterpret_cast<char*>(&_impl_.data_center_id_)) + sizeof(_impl_.penalty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramRouterPingReply_RouteException::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> CMsgSteamDatagramRouterPingReply_RouteException::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramRouterPingReply_RouteException_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 data_center_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.data_center_id_)}},
    // optional uint32 flags = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.flags_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.flags_)}},
    // optional uint32 penalty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 data_center_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.data_center_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 flags = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.flags_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 penalty = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramRouterPingReply_RouteException::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_data_center_id(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_flags(), target);
  }

  // optional uint32 penalty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply.RouteException)
  return target;
}

::size_t CMsgSteamDatagramRouterPingReply_RouteException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 data_center_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 penalty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_penalty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramRouterPingReply_RouteException::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramRouterPingReply_RouteException::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramRouterPingReply_RouteException::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramRouterPingReply_RouteException::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramRouterPingReply_RouteException*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramRouterPingReply_RouteException&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_center_id_ = from._impl_.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.penalty_ = from._impl_.penalty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramRouterPingReply_RouteException::CopyFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply.RouteException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramRouterPingReply_RouteException::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply_RouteException::InternalSwap(CMsgSteamDatagramRouterPingReply_RouteException* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_)
      + sizeof(CMsgSteamDatagramRouterPingReply_RouteException::_impl_.penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.data_center_id_)>(
          reinterpret_cast<char*>(&_impl_.data_center_id_),
          reinterpret_cast<char*>(&other->_impl_.data_center_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply_RouteException::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[2]);
}
// ===================================================================

class CMsgSteamDatagramRouterPingReply_AltAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramRouterPingReply_AltAddress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_._has_bits_);
  static void set_has_ipv4(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply.AltAddress)
}
CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(const CMsgSteamDatagramRouterPingReply_AltAddress& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramRouterPingReply_AltAddress* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.ipv4_){},
      decltype(_impl_.port_){},
      decltype(_impl_.penalty_){},
      decltype(_impl_.protocol_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ipv4_, &from._impl_.ipv4_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.protocol_) -
    reinterpret_cast<char*>(&_impl_.ipv4_)) + sizeof(_impl_.protocol_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply.AltAddress)
}
inline void CMsgSteamDatagramRouterPingReply_AltAddress::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.ipv4_){0u},
      decltype(_impl_.port_){0u},
      decltype(_impl_.penalty_){0u},
      decltype(_impl_.protocol_){0},
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramRouterPingReply_AltAddress::~CMsgSteamDatagramRouterPingReply_AltAddress() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply.AltAddress)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramRouterPingReply_AltAddress::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}
void CMsgSteamDatagramRouterPingReply_AltAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramRouterPingReply_AltAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.ipv4_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protocol_) -
        reinterpret_cast<char*>(&_impl_.ipv4_)) + sizeof(_impl_.protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramRouterPingReply_AltAddress::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 54, 2> CMsgSteamDatagramRouterPingReply_AltAddress::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramRouterPingReply_AltAddress_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 ipv4 = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.ipv4_)}},
    // optional uint32 port = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.port_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.port_)}},
    // optional uint32 penalty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.penalty_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.penalty_)}},
    // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
    {::_pbi::TcParser::FastEr0S1,
     {32, 4, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.protocol_)}},
    // optional string id = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 ipv4 = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.ipv4_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 port = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.port_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 penalty = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.penalty_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.protocol_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {0, 2},
  }}, {{
    "\53\0\0\0\0\2\0\0"
    "CMsgSteamDatagramRouterPingReply.AltAddress"
    "id"
  }},
};

::uint8_t* CMsgSteamDatagramRouterPingReply_AltAddress::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 ipv4 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_ipv4(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_port(), target);
  }

  // optional uint32 penalty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_penalty(), target);
  }

  // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_protocol(), target);
  }

  // optional string id = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramRouterPingReply.AltAddress.id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply.AltAddress)
  return target;
}

::size_t CMsgSteamDatagramRouterPingReply_AltAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional fixed32 ipv4 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_port());
    }

    // optional uint32 penalty = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_penalty());
    }

    // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramRouterPingReply_AltAddress::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramRouterPingReply_AltAddress::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramRouterPingReply_AltAddress::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramRouterPingReply_AltAddress::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramRouterPingReply_AltAddress*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramRouterPingReply_AltAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ipv4_ = from._impl_.ipv4_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.penalty_ = from._impl_.penalty_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramRouterPingReply_AltAddress::CopyFrom(const CMsgSteamDatagramRouterPingReply_AltAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramRouterPingReply_AltAddress::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply_AltAddress::InternalSwap(CMsgSteamDatagramRouterPingReply_AltAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.protocol_)
      + sizeof(CMsgSteamDatagramRouterPingReply_AltAddress::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.ipv4_)>(
          reinterpret_cast<char*>(&_impl_.ipv4_),
          reinterpret_cast<char*>(&other->_impl_.ipv4_));
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply_AltAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[3]);
}
// ===================================================================

class CMsgSteamDatagramRouterPingReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramRouterPingReply>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_._has_bits_);
  static void set_has_client_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_your_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_your_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scoring_penalty_relay_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dummy_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply)
}
CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(const CMsgSteamDatagramRouterPingReply& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramRouterPingReply* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.latency_datacenter_ids_){from._impl_.latency_datacenter_ids_},
      decltype(_impl_.latency_ping_ms_){from._impl_.latency_ping_ms_},
      /* _impl_._latency_ping_ms_cached_byte_size_ = */ {0},
      decltype(_impl_.route_exceptions_){from._impl_.route_exceptions_},
      decltype(_impl_.alt_addresses_){from._impl_.alt_addresses_},
      decltype(_impl_.latency_datacenter_ids_p2p_){from._impl_.latency_datacenter_ids_p2p_},
      decltype(_impl_.latency_ping_ms_p2p_){from._impl_.latency_ping_ms_p2p_},
      /* _impl_._latency_ping_ms_p2p_cached_byte_size_ = */ {0},
      decltype(_impl_.dummy_pad_){},
      decltype(_impl_.client_timestamp_){},
      decltype(_impl_.your_public_ip_){},
      decltype(_impl_.challenge_){},
      decltype(_impl_.server_time_){},
      decltype(_impl_.seconds_until_shutdown_){},
      decltype(_impl_.client_cookie_){},
      decltype(_impl_.scoring_penalty_relay_cluster_){},
      decltype(_impl_.your_public_port_){},
      decltype(_impl_.flags_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.dummy_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dummy_pad_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dummy_pad_.Set(from._internal_dummy_pad(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.client_timestamp_, &from._impl_.client_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.client_timestamp_)) + sizeof(_impl_.flags_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply)
}
inline void CMsgSteamDatagramRouterPingReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.latency_datacenter_ids_){arena},
      decltype(_impl_.latency_ping_ms_){arena},
      /* _impl_._latency_ping_ms_cached_byte_size_ = */ {0},
      decltype(_impl_.route_exceptions_){arena},
      decltype(_impl_.alt_addresses_){arena},
      decltype(_impl_.latency_datacenter_ids_p2p_){arena},
      decltype(_impl_.latency_ping_ms_p2p_){arena},
      /* _impl_._latency_ping_ms_p2p_cached_byte_size_ = */ {0},
      decltype(_impl_.dummy_pad_){},
      decltype(_impl_.client_timestamp_){0u},
      decltype(_impl_.your_public_ip_){0u},
      decltype(_impl_.challenge_){::uint64_t{0u}},
      decltype(_impl_.server_time_){0u},
      decltype(_impl_.seconds_until_shutdown_){0u},
      decltype(_impl_.client_cookie_){0u},
      decltype(_impl_.scoring_penalty_relay_cluster_){0u},
      decltype(_impl_.your_public_port_){0u},
      decltype(_impl_.flags_){0u},
  };
  _impl_.dummy_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dummy_pad_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramRouterPingReply::~CMsgSteamDatagramRouterPingReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramRouterPingReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.latency_datacenter_ids_.~RepeatedField();
  _impl_.latency_ping_ms_.~RepeatedField();
  _impl_.route_exceptions_.~RepeatedPtrField();
  _impl_.alt_addresses_.~RepeatedPtrField();
  _impl_.latency_datacenter_ids_p2p_.~RepeatedField();
  _impl_.latency_ping_ms_p2p_.~RepeatedField();
  _impl_.dummy_pad_.Destroy();
}
void CMsgSteamDatagramRouterPingReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramRouterPingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_latency_datacenter_ids()->Clear();
  _internal_mutable_latency_ping_ms()->Clear();
  _internal_mutable_route_exceptions()->Clear();
  _internal_mutable_alt_addresses()->Clear();
  _internal_mutable_latency_datacenter_ids_p2p()->Clear();
  _internal_mutable_latency_ping_ms_p2p()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.dummy_pad_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.client_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.scoring_penalty_relay_cluster_) -
        reinterpret_cast<char*>(&_impl_.client_timestamp_)) + sizeof(_impl_.scoring_penalty_relay_cluster_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.your_public_port_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.your_public_port_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramRouterPingReply::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 2, 0, 7> CMsgSteamDatagramRouterPingReply::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_._has_bits_),
    0, // no _extensions_
    99, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramRouterPingReply_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_timestamp = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_timestamp_)}},
    // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_)}},
    // repeated uint32 latency_ping_ms = 3 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_)}},
    // optional fixed32 your_public_ip = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.your_public_ip_)}},
    // optional fixed32 server_time = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.server_time_)}},
    // optional fixed64 challenge = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.challenge_)}},
    // optional uint32 seconds_until_shutdown = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply, _impl_.seconds_until_shutdown_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.seconds_until_shutdown_)}},
    // optional fixed32 client_cookie = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_cookie_)}},
    // optional uint32 scoring_penalty_relay_cluster = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply, _impl_.scoring_penalty_relay_cluster_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.scoring_penalty_relay_cluster_)}},
    // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.route_exceptions_)}},
    // optional fixed32 your_public_port = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.your_public_port_)}},
    // optional uint32 flags = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply, _impl_.flags_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.flags_)}},
    // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.alt_addresses_)}},
    // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_p2p_)}},
    // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_p2p_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes dummy_pad = 99;
    {::_pbi::TcParser::FastBS2,
     {1690, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.dummy_pad_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    99, 0, 1,
    65534, 15,
    65535, 65535
  }}, {{
    // optional fixed32 client_timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_timestamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed32)},
    // repeated uint32 latency_ping_ms = 3 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // optional fixed32 your_public_ip = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.your_public_ip_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 server_time = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.server_time_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.challenge_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 seconds_until_shutdown = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_cookie = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_cookie_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 scoring_penalty_relay_cluster = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.scoring_penalty_relay_cluster_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.route_exceptions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional fixed32 your_public_port = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.your_public_port_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 flags = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.flags_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.alt_addresses_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_p2p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed32)},
    // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_p2p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // optional bytes dummy_pad = 99;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.dummy_pad_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramRouterPingReply_RouteException>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramRouterPingReply_AltAddress>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramRouterPingReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 client_timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_client_timestamp(), target);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->_internal_latency_datacenter_ids_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_latency_datacenter_ids(), target);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    int byte_size = _impl_._latency_ping_ms_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(3, _internal_latency_ping_ms(),
                                                 byte_size, target);
    }
  }

  // optional fixed32 your_public_ip = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this->_internal_your_public_ip(), target);
  }

  // optional fixed32 server_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_server_time(), target);
  }

  // optional fixed64 challenge = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        6, this->_internal_challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this->_internal_client_cookie(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_route_exceptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_route_exceptions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed32 your_public_port = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this->_internal_your_public_port(), target);
  }

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_flags(), target);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alt_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_alt_addresses().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
  if (this->_internal_latency_datacenter_ids_p2p_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_latency_datacenter_ids_p2p(), target);
  }

  // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
  {
    int byte_size = _impl_._latency_ping_ms_p2p_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(15, _internal_latency_ping_ms_p2p(),
                                                 byte_size, target);
    }
  }

  // optional bytes dummy_pad = 99;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_dummy_pad();
    target = stream->WriteBytesMaybeAliased(99, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply)
  return target;
}

::size_t CMsgSteamDatagramRouterPingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_latency_datacenter_ids_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_latency_ping_ms())
    ;
    _impl_._latency_ping_ms_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  total_size += 1UL * this->_internal_route_exceptions_size();
  for (const auto& msg : this->_internal_route_exceptions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
  total_size += 1UL * this->_internal_alt_addresses_size();
  for (const auto& msg : this->_internal_alt_addresses()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_latency_datacenter_ids_p2p_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_latency_ping_ms_p2p())
    ;
    _impl_._latency_ping_ms_p2p_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes dummy_pad = 99;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_dummy_pad());
    }

    // optional fixed32 client_timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional fixed32 your_public_ip = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional fixed64 challenge = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional fixed32 server_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional uint32 seconds_until_shutdown = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed32 client_cookie = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

    // optional uint32 scoring_penalty_relay_cluster = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_scoring_penalty_relay_cluster());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed32 your_public_port = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 5;
    }

    // optional uint32 flags = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramRouterPingReply::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramRouterPingReply::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramRouterPingReply::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramRouterPingReply::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramRouterPingReply*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramRouterPingReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_latency_datacenter_ids()->MergeFrom(from._internal_latency_datacenter_ids());
  _this->_internal_mutable_latency_ping_ms()->MergeFrom(from._internal_latency_ping_ms());
  _this->_internal_mutable_route_exceptions()->MergeFrom(from._internal_route_exceptions());
  _this->_internal_mutable_alt_addresses()->MergeFrom(from._internal_alt_addresses());
  _this->_internal_mutable_latency_datacenter_ids_p2p()->MergeFrom(from._internal_latency_datacenter_ids_p2p());
  _this->_internal_mutable_latency_ping_ms_p2p()->MergeFrom(from._internal_latency_ping_ms_p2p());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_dummy_pad(from._internal_dummy_pad());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.client_timestamp_ = from._impl_.client_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.your_public_ip_ = from._impl_.your_public_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_time_ = from._impl_.server_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.client_cookie_ = from._impl_.client_cookie_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.scoring_penalty_relay_cluster_ = from._impl_.scoring_penalty_relay_cluster_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.your_public_port_ = from._impl_.your_public_port_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const CMsgSteamDatagramRouterPingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramRouterPingReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply::InternalSwap(CMsgSteamDatagramRouterPingReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.latency_datacenter_ids_.InternalSwap(&other->_impl_.latency_datacenter_ids_);
  _impl_.latency_ping_ms_.InternalSwap(&other->_impl_.latency_ping_ms_);
  _impl_.route_exceptions_.InternalSwap(&other->_impl_.route_exceptions_);
  _impl_.alt_addresses_.InternalSwap(&other->_impl_.alt_addresses_);
  _impl_.latency_datacenter_ids_p2p_.InternalSwap(&other->_impl_.latency_datacenter_ids_p2p_);
  _impl_.latency_ping_ms_p2p_.InternalSwap(&other->_impl_.latency_ping_ms_p2p_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dummy_pad_, lhs_arena,
                                       &other->_impl_.dummy_pad_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.flags_)
      + sizeof(CMsgSteamDatagramRouterPingReply::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.client_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.client_timestamp_));
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[4]);
}
// ===================================================================

class CMsgSteamDatagramGameserverPingRequestBody::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverPingRequestBody>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_._has_bits_);
  static void set_has_relay_popid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamNetworkingIPAddress& your_public_ip(const CMsgSteamDatagramGameserverPingRequestBody* msg);
  static void set_has_your_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_your_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relay_unix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_echo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSteamNetworkingIPAddress& CMsgSteamDatagramGameserverPingRequestBody::_Internal::your_public_ip(const CMsgSteamDatagramGameserverPingRequestBody* msg) {
  return *msg->_impl_.your_public_ip_;
}
CMsgSteamDatagramGameserverPingRequestBody::CMsgSteamDatagramGameserverPingRequestBody(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingRequestBody)
}
CMsgSteamDatagramGameserverPingRequestBody::CMsgSteamDatagramGameserverPingRequestBody(const CMsgSteamDatagramGameserverPingRequestBody& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramGameserverPingRequestBody* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.my_ips_){from._impl_.my_ips_},
      decltype(_impl_.echo_){},
      decltype(_impl_.your_public_ip_){nullptr},
      decltype(_impl_.relay_popid_){},
      decltype(_impl_.your_public_port_){},
      decltype(_impl_.relay_unix_time_){},
      decltype(_impl_.routing_secret_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.echo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.echo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.echo_.Set(from._internal_echo(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.your_public_ip_ = new ::CMsgSteamNetworkingIPAddress(*from._impl_.your_public_ip_);
  }
  ::memcpy(&_impl_.relay_popid_, &from._impl_.relay_popid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.routing_secret_) -
    reinterpret_cast<char*>(&_impl_.relay_popid_)) + sizeof(_impl_.routing_secret_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingRequestBody)
}
inline void CMsgSteamDatagramGameserverPingRequestBody::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.my_ips_){arena},
      decltype(_impl_.echo_){},
      decltype(_impl_.your_public_ip_){nullptr},
      decltype(_impl_.relay_popid_){0u},
      decltype(_impl_.your_public_port_){0u},
      decltype(_impl_.relay_unix_time_){::uint64_t{0u}},
      decltype(_impl_.routing_secret_){::uint64_t{0u}},
  };
  _impl_.echo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.echo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramGameserverPingRequestBody::~CMsgSteamDatagramGameserverPingRequestBody() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingRequestBody)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramGameserverPingRequestBody::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_ips_.~RepeatedPtrField();
  _impl_.echo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.your_public_ip_;
}
void CMsgSteamDatagramGameserverPingRequestBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverPingRequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingRequestBody)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_my_ips()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.echo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.your_public_ip_ != nullptr);
      _impl_.your_public_ip_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.relay_popid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.routing_secret_) -
        reinterpret_cast<char*>(&_impl_.relay_popid_)) + sizeof(_impl_.routing_secret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverPingRequestBody::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> CMsgSteamDatagramGameserverPingRequestBody::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramGameserverPingRequestBody_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bytes echo = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.echo_)}},
    // optional fixed32 relay_popid = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_popid_)}},
    // optional .CMsgSteamNetworkingIPAddress your_public_ip = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_ip_)}},
    // optional uint32 your_public_port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_port_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_port_)}},
    // optional uint64 relay_unix_time = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_unix_time_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_unix_time_)}},
    // optional fixed64 routing_secret = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.routing_secret_)}},
    // repeated .CMsgSteamNetworkingIPAddress my_ips = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.my_ips_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 relay_popid = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_popid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional .CMsgSteamNetworkingIPAddress your_public_ip = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_ip_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 your_public_port = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_port_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 relay_unix_time = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_unix_time_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional fixed64 routing_secret = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.routing_secret_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // repeated .CMsgSteamNetworkingIPAddress my_ips = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.my_ips_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes echo = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.echo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIPAddress>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIPAddress>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramGameserverPingRequestBody::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingRequestBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 relay_popid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_relay_popid(), target);
  }

  // optional .CMsgSteamNetworkingIPAddress your_public_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::your_public_ip(this),
        _Internal::your_public_ip(this).GetCachedSize(), target, stream);
  }

  // optional uint32 your_public_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_your_public_port(), target);
  }

  // optional uint64 relay_unix_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_relay_unix_time(), target);
  }

  // optional fixed64 routing_secret = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        5, this->_internal_routing_secret(), target);
  }

  // repeated .CMsgSteamNetworkingIPAddress my_ips = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_my_ips_size()); i < n; i++) {
    const auto& repfield = this->_internal_my_ips().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes echo = 8;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_echo();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingRequestBody)
  return target;
}

::size_t CMsgSteamDatagramGameserverPingRequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingRequestBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamNetworkingIPAddress my_ips = 6;
  total_size += 1UL * this->_internal_my_ips_size();
  for (const auto& msg : this->_internal_my_ips()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes echo = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_echo());
    }

    // optional .CMsgSteamNetworkingIPAddress your_public_ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.your_public_ip_);
    }

    // optional fixed32 relay_popid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional uint32 your_public_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_your_public_port());
    }

    // optional uint64 relay_unix_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_relay_unix_time());
    }

    // optional fixed64 routing_secret = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramGameserverPingRequestBody::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramGameserverPingRequestBody::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramGameserverPingRequestBody::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramGameserverPingRequestBody::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverPingRequestBody*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverPingRequestBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingRequestBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_my_ips()->MergeFrom(from._internal_my_ips());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_echo(from._internal_echo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_your_public_ip()->::CMsgSteamNetworkingIPAddress::MergeFrom(
          from._internal_your_public_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.relay_popid_ = from._impl_.relay_popid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.your_public_port_ = from._impl_.your_public_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.relay_unix_time_ = from._impl_.relay_unix_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverPingRequestBody::CopyFrom(const CMsgSteamDatagramGameserverPingRequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingRequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramGameserverPingRequestBody::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverPingRequestBody::InternalSwap(CMsgSteamDatagramGameserverPingRequestBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.my_ips_.InternalSwap(&other->_impl_.my_ips_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.echo_, lhs_arena,
                                       &other->_impl_.echo_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.routing_secret_)
      + sizeof(CMsgSteamDatagramGameserverPingRequestBody::_impl_.routing_secret_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_ip_)>(
          reinterpret_cast<char*>(&_impl_.your_public_ip_),
          reinterpret_cast<char*>(&other->_impl_.your_public_ip_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPingRequestBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[5]);
}
// ===================================================================

class CMsgSteamDatagramGameserverPingRequestEnvelope::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverPingRequestEnvelope>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_._has_bits_);
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramGameserverPingRequestEnvelope* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signed_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_your_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_legacy_your_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_legacy_relay_unix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_legacy_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_legacy_router_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dummy_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramGameserverPingRequestEnvelope::_Internal::cert(const CMsgSteamDatagramGameserverPingRequestEnvelope* msg) {
  return *msg->_impl_.cert_;
}
void CMsgSteamDatagramGameserverPingRequestEnvelope::clear_cert() {
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgSteamDatagramGameserverPingRequestEnvelope::CMsgSteamDatagramGameserverPingRequestEnvelope(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingRequestEnvelope)
}
CMsgSteamDatagramGameserverPingRequestEnvelope::CMsgSteamDatagramGameserverPingRequestEnvelope(const CMsgSteamDatagramGameserverPingRequestEnvelope& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramGameserverPingRequestEnvelope* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.signed_data_){},
      decltype(_impl_.signature_){},
      decltype(_impl_.dummy_pad_){},
      decltype(_impl_.cert_){nullptr},
      decltype(_impl_.legacy_your_public_ip_){},
      decltype(_impl_.legacy_relay_unix_time_){},
      decltype(_impl_.legacy_challenge_){},
      decltype(_impl_.legacy_router_timestamp_){},
      decltype(_impl_.legacy_your_public_port_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.signed_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signed_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.signed_data_.Set(from._internal_signed_data(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _impl_.dummy_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dummy_pad_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.dummy_pad_.Set(from._internal_dummy_pad(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.cert_ = new ::CMsgSteamDatagramCertificateSigned(*from._impl_.cert_);
  }
  ::memcpy(&_impl_.legacy_your_public_ip_, &from._impl_.legacy_your_public_ip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.legacy_your_public_port_) -
    reinterpret_cast<char*>(&_impl_.legacy_your_public_ip_)) + sizeof(_impl_.legacy_your_public_port_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingRequestEnvelope)
}
inline void CMsgSteamDatagramGameserverPingRequestEnvelope::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.signed_data_){},
      decltype(_impl_.signature_){},
      decltype(_impl_.dummy_pad_){},
      decltype(_impl_.cert_){nullptr},
      decltype(_impl_.legacy_your_public_ip_){0u},
      decltype(_impl_.legacy_relay_unix_time_){0u},
      decltype(_impl_.legacy_challenge_){::uint64_t{0u}},
      decltype(_impl_.legacy_router_timestamp_){0u},
      decltype(_impl_.legacy_your_public_port_){0u},
  };
  _impl_.signed_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signed_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dummy_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dummy_pad_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramGameserverPingRequestEnvelope::~CMsgSteamDatagramGameserverPingRequestEnvelope() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingRequestEnvelope)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramGameserverPingRequestEnvelope::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signed_data_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.dummy_pad_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cert_;
}
void CMsgSteamDatagramGameserverPingRequestEnvelope::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverPingRequestEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.signed_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.dummy_pad_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.legacy_your_public_ip_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_router_timestamp_) -
        reinterpret_cast<char*>(&_impl_.legacy_your_public_ip_)) + sizeof(_impl_.legacy_router_timestamp_));
  }
  _impl_.legacy_your_public_port_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverPingRequestEnvelope::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 0, 7> CMsgSteamDatagramGameserverPingRequestEnvelope::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_._has_bits_),
    0, // no _extensions_
    1023, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramGameserverPingRequestEnvelope_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 legacy_your_public_ip = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_ip_)}},
    // optional fixed32 legacy_relay_unix_time = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_relay_unix_time_)}},
    // optional fixed64 legacy_challenge = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_challenge_)}},
    // optional fixed32 legacy_router_timestamp = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_router_timestamp_)}},
    // optional fixed32 legacy_your_public_port = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_port_)}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.cert_)}},
    // optional bytes signed_data = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signed_data_)}},
    // optional bytes signature = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signature_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes dummy_pad = 1023;
    {::_pbi::TcParser::FastBS2,
     {16378, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.dummy_pad_)}},
  }}, {{
    1023, 0, 1,
    65534, 8,
    65535, 65535
  }}, {{
    // optional fixed32 legacy_your_public_ip = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_ip_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 legacy_relay_unix_time = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_relay_unix_time_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 legacy_challenge = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_challenge_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 legacy_router_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_router_timestamp_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 legacy_your_public_port = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_port_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.cert_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes signed_data = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signed_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes signature = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes dummy_pad = 1023;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.dummy_pad_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramGameserverPingRequestEnvelope::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 legacy_your_public_ip = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_legacy_your_public_ip(), target);
  }

  // optional fixed32 legacy_relay_unix_time = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_legacy_relay_unix_time(), target);
  }

  // optional fixed64 legacy_challenge = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_legacy_challenge(), target);
  }

  // optional fixed32 legacy_router_timestamp = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this->_internal_legacy_router_timestamp(), target);
  }

  // optional fixed32 legacy_your_public_port = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_legacy_your_public_port(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cert(this),
        _Internal::cert(this).GetCachedSize(), target, stream);
  }

  // optional bytes signed_data = 7;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_signed_data();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // optional bytes signature = 8;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // optional bytes dummy_pad = 1023;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_dummy_pad();
    target = stream->WriteBytesMaybeAliased(1023, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingRequestEnvelope)
  return target;
}

::size_t CMsgSteamDatagramGameserverPingRequestEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes signed_data = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_signed_data());
    }

    // optional bytes signature = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_signature());
    }

    // optional bytes dummy_pad = 1023;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_dummy_pad());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cert_);
    }

    // optional fixed32 legacy_your_public_ip = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional fixed32 legacy_relay_unix_time = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional fixed64 legacy_challenge = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional fixed32 legacy_router_timestamp = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  // optional fixed32 legacy_your_public_port = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramGameserverPingRequestEnvelope::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramGameserverPingRequestEnvelope::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramGameserverPingRequestEnvelope::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramGameserverPingRequestEnvelope::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverPingRequestEnvelope*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverPingRequestEnvelope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_signed_data(from._internal_signed_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_dummy_pad(from._internal_dummy_pad());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(
          from._internal_cert());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_your_public_ip_ = from._impl_.legacy_your_public_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.legacy_relay_unix_time_ = from._impl_.legacy_relay_unix_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.legacy_challenge_ = from._impl_.legacy_challenge_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.legacy_router_timestamp_ = from._impl_.legacy_router_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_legacy_your_public_port(from._internal_legacy_your_public_port());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverPingRequestEnvelope::CopyFrom(const CMsgSteamDatagramGameserverPingRequestEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramGameserverPingRequestEnvelope::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverPingRequestEnvelope::InternalSwap(CMsgSteamDatagramGameserverPingRequestEnvelope* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signed_data_, lhs_arena,
                                       &other->_impl_.signed_data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dummy_pad_, lhs_arena,
                                       &other->_impl_.dummy_pad_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_port_)
      + sizeof(CMsgSteamDatagramGameserverPingRequestEnvelope::_impl_.legacy_your_public_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.cert_)>(
          reinterpret_cast<char*>(&_impl_.cert_),
          reinterpret_cast<char*>(&other->_impl_.cert_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPingRequestEnvelope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[6]);
}
// ===================================================================

class CMsgSteamDatagramGameserverPingReplyData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverPingReplyData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_._has_bits_);
  static void set_has_echo_relay_unix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_echo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_legacy_router_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_center_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_network_config_version(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_my_unix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgSteamDatagramGameserverPingReplyData::CMsgSteamDatagramGameserverPingReplyData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingReplyData)
}
CMsgSteamDatagramGameserverPingReplyData::CMsgSteamDatagramGameserverPingReplyData(const CMsgSteamDatagramGameserverPingReplyData& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramGameserverPingReplyData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.echo_){},
      decltype(_impl_.build_){},
      decltype(_impl_.legacy_challenge_){},
      decltype(_impl_.echo_relay_unix_time_){},
      decltype(_impl_.legacy_router_timestamp_){},
      decltype(_impl_.data_center_id_){},
      decltype(_impl_.appid_){},
      decltype(_impl_.protocol_version_){},
      decltype(_impl_.my_unix_time_){},
      decltype(_impl_.network_config_version_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.echo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.echo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.echo_.Set(from._internal_echo(), _this->GetArenaForAllocation());
  }
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.build_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.build_.Set(from._internal_build(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.legacy_challenge_, &from._impl_.legacy_challenge_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.network_config_version_) -
    reinterpret_cast<char*>(&_impl_.legacy_challenge_)) + sizeof(_impl_.network_config_version_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingReplyData)
}
inline void CMsgSteamDatagramGameserverPingReplyData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.echo_){},
      decltype(_impl_.build_){},
      decltype(_impl_.legacy_challenge_){::uint64_t{0u}},
      decltype(_impl_.echo_relay_unix_time_){0u},
      decltype(_impl_.legacy_router_timestamp_){0u},
      decltype(_impl_.data_center_id_){0u},
      decltype(_impl_.appid_){0u},
      decltype(_impl_.protocol_version_){0u},
      decltype(_impl_.my_unix_time_){0u},
      decltype(_impl_.network_config_version_){::uint64_t{0u}},
  };
  _impl_.echo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.echo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.build_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramGameserverPingReplyData::~CMsgSteamDatagramGameserverPingReplyData() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingReplyData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramGameserverPingReplyData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.echo_.Destroy();
  _impl_.build_.Destroy();
}
void CMsgSteamDatagramGameserverPingReplyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverPingReplyData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingReplyData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.echo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.build_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.legacy_challenge_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protocol_version_) -
        reinterpret_cast<char*>(&_impl_.legacy_challenge_)) + sizeof(_impl_.protocol_version_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.my_unix_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.network_config_version_) -
        reinterpret_cast<char*>(&_impl_.my_unix_time_)) + sizeof(_impl_.network_config_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverPingReplyData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 62, 2> CMsgSteamDatagramGameserverPingReplyData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965249,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramGameserverPingReplyData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 echo_relay_unix_time = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_relay_unix_time_)}},
    // optional fixed64 legacy_challenge = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_challenge_)}},
    // optional fixed32 legacy_router_timestamp = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_router_timestamp_)}},
    // optional fixed32 data_center_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.data_center_id_)}},
    // optional uint32 appid = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverPingReplyData, _impl_.appid_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.appid_)}},
    // optional uint32 protocol_version = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverPingReplyData, _impl_.protocol_version_), 7>(),
     {56, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.protocol_version_)}},
    // optional bytes echo = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_)}},
    // optional string build = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.build_)}},
    // optional uint64 network_config_version = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_)}},
    // optional fixed32 my_unix_time = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.my_unix_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 echo_relay_unix_time = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_relay_unix_time_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 legacy_challenge = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_challenge_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 legacy_router_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_router_timestamp_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 data_center_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.data_center_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 appid = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.appid_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 protocol_version = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.protocol_version_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes echo = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string build = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.build_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint64 network_config_version = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional fixed32 my_unix_time = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.my_unix_time_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
    "\50\0\0\0\0\0\0\0\5\0\0\0\0\0\0\0"
    "CMsgSteamDatagramGameserverPingReplyData"
    "build"
  }},
};

::uint8_t* CMsgSteamDatagramGameserverPingReplyData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingReplyData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 echo_relay_unix_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_echo_relay_unix_time(), target);
  }

  // optional fixed64 legacy_challenge = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_legacy_challenge(), target);
  }

  // optional fixed32 legacy_router_timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this->_internal_legacy_router_timestamp(), target);
  }

  // optional fixed32 data_center_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_data_center_id(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_appid(), target);
  }

  // optional uint32 protocol_version = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_protocol_version(), target);
  }

  // optional bytes echo = 8;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_echo();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // optional string build = 9;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_build();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverPingReplyData.build");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional uint64 network_config_version = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_network_config_version(), target);
  }

  // optional fixed32 my_unix_time = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this->_internal_my_unix_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingReplyData)
  return target;
}

::size_t CMsgSteamDatagramGameserverPingReplyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingReplyData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes echo = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_echo());
    }

    // optional string build = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_build());
    }

    // optional fixed64 legacy_challenge = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional fixed32 echo_relay_unix_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional fixed32 legacy_router_timestamp = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional fixed32 data_center_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

    // optional uint32 protocol_version = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol_version());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed32 my_unix_time = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 5;
    }

    // optional uint64 network_config_version = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_network_config_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramGameserverPingReplyData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramGameserverPingReplyData::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramGameserverPingReplyData::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramGameserverPingReplyData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverPingReplyData*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverPingReplyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingReplyData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_echo(from._internal_echo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_build(from._internal_build());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.legacy_challenge_ = from._impl_.legacy_challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.echo_relay_unix_time_ = from._impl_.echo_relay_unix_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_router_timestamp_ = from._impl_.legacy_router_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.data_center_id_ = from._impl_.data_center_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.my_unix_time_ = from._impl_.my_unix_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.network_config_version_ = from._impl_.network_config_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverPingReplyData::CopyFrom(const CMsgSteamDatagramGameserverPingReplyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingReplyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramGameserverPingReplyData::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverPingReplyData::InternalSwap(CMsgSteamDatagramGameserverPingReplyData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.echo_, lhs_arena,
                                       &other->_impl_.echo_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.build_, lhs_arena,
                                       &other->_impl_.build_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_)
      + sizeof(CMsgSteamDatagramGameserverPingReplyData::_impl_.network_config_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_challenge_)>(
          reinterpret_cast<char*>(&_impl_.legacy_challenge_),
          reinterpret_cast<char*>(&other->_impl_.legacy_challenge_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPingReplyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[7]);
}
// ===================================================================

class CMsgSteamDatagramNoSessionRelayToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramNoSessionRelayToClient>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_your_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_your_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoSessionRelayToClient)
}
CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(const CMsgSteamDatagramNoSessionRelayToClient& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramNoSessionRelayToClient)
}
inline void CMsgSteamDatagramNoSessionRelayToClient::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.your_public_ip_){0u},
      decltype(_impl_.server_time_){0u},
      decltype(_impl_.challenge_){::uint64_t{0u}},
      decltype(_impl_.seconds_until_shutdown_){0u},
      decltype(_impl_.your_public_port_){0u},
      decltype(_impl_.connection_id_){0u},
  };
}
CMsgSteamDatagramNoSessionRelayToClient::~CMsgSteamDatagramNoSessionRelayToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoSessionRelayToClient)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramNoSessionRelayToClient::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgSteamDatagramNoSessionRelayToClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramNoSessionRelayToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoSessionRelayToClient)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.your_public_ip_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.connection_id_) -
        reinterpret_cast<char*>(&_impl_.your_public_ip_)) + sizeof(_impl_.connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramNoSessionRelayToClient::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> CMsgSteamDatagramNoSessionRelayToClient::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967169,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramNoSessionRelayToClient_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 your_public_ip = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_ip_)}},
    // optional fixed32 server_time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.server_time_)}},
    // optional fixed64 challenge = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.challenge_)}},
    // optional uint32 seconds_until_shutdown = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramNoSessionRelayToClient, _impl_.seconds_until_shutdown_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.seconds_until_shutdown_)}},
    // optional fixed32 your_public_port = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_port_)}},
    // optional fixed32 connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.connection_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 your_public_ip = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_ip_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 server_time = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.server_time_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.challenge_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 seconds_until_shutdown = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 your_public_port = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_port_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.connection_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramNoSessionRelayToClient::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoSessionRelayToClient)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 your_public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_your_public_ip(), target);
  }

  // optional fixed32 server_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this->_internal_server_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this->_internal_challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 your_public_port = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this->_internal_your_public_port(), target);
  }

  // optional fixed32 connection_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this->_internal_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoSessionRelayToClient)
  return target;
}

::size_t CMsgSteamDatagramNoSessionRelayToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoSessionRelayToClient)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed32 your_public_ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional fixed32 server_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional fixed64 challenge = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed32 your_public_port = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional fixed32 connection_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramNoSessionRelayToClient::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramNoSessionRelayToClient::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramNoSessionRelayToClient::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramNoSessionRelayToClient::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramNoSessionRelayToClient*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramNoSessionRelayToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoSessionRelayToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.your_public_ip_ = from._impl_.your_public_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.server_time_ = from._impl_.server_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.your_public_port_ = from._impl_.your_public_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramNoSessionRelayToClient::CopyFrom(const CMsgSteamDatagramNoSessionRelayToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoSessionRelayToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramNoSessionRelayToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoSessionRelayToClient::InternalSwap(CMsgSteamDatagramNoSessionRelayToClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.connection_id_)
      + sizeof(CMsgSteamDatagramNoSessionRelayToClient::_impl_.connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_ip_)>(
          reinterpret_cast<char*>(&_impl_.your_public_ip_),
          reinterpret_cast<char*>(&other->_impl_.your_public_ip_));
}

::google::protobuf::Metadata CMsgSteamDatagramNoSessionRelayToClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[8]);
}
// ===================================================================

class CMsgSteamDatagramNoSessionRelayToPeer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramNoSessionRelayToPeer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_._has_bits_);
  static void set_has_legacy_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kludge_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoSessionRelayToPeer)
}
CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(const CMsgSteamDatagramNoSessionRelayToPeer& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramNoSessionRelayToPeer)
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.legacy_relay_session_id_){0u},
      decltype(_impl_.from_relay_session_id_){0u},
      decltype(_impl_.kludge_pad_){::uint64_t{0u}},
      decltype(_impl_.from_connection_id_){0u},
  };
}
CMsgSteamDatagramNoSessionRelayToPeer::~CMsgSteamDatagramNoSessionRelayToPeer() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoSessionRelayToPeer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgSteamDatagramNoSessionRelayToPeer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramNoSessionRelayToPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.legacy_relay_session_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.from_connection_id_) -
        reinterpret_cast<char*>(&_impl_.legacy_relay_session_id_)) + sizeof(_impl_.from_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramNoSessionRelayToPeer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 0, 7> CMsgSteamDatagramNoSessionRelayToPeer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_._has_bits_),
    0, // no _extensions_
    99, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967228,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramNoSessionRelayToPeer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 legacy_relay_session_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_)}},
    // optional fixed32 from_relay_session_id = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_relay_session_id_)}},
    // optional fixed64 kludge_pad = 99;
    {::_pbi::TcParser::FastF64S2,
     {1689, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.kludge_pad_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 from_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_connection_id_)}},
  }}, {{
    99, 0, 1,
    65534, 3,
    65535, 65535
  }}, {{
    // optional uint32 legacy_relay_session_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 from_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_relay_session_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_connection_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 kludge_pad = 99;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.kludge_pad_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramNoSessionRelayToPeer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 legacy_relay_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_legacy_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_from_relay_session_id(), target);
  }

  // optional fixed32 from_connection_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this->_internal_from_connection_id(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        99, this->_internal_kludge_pad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoSessionRelayToPeer)
  return target;
}

::size_t CMsgSteamDatagramNoSessionRelayToPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 legacy_relay_session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_legacy_relay_session_id());
    }

    // optional fixed32 from_relay_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional fixed64 kludge_pad = 99;
    if (cached_has_bits & 0x00000004u) {
      total_size += 10;
    }

    // optional fixed32 from_connection_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramNoSessionRelayToPeer::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramNoSessionRelayToPeer::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramNoSessionRelayToPeer::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramNoSessionRelayToPeer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramNoSessionRelayToPeer*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramNoSessionRelayToPeer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.legacy_relay_session_id_ = from._impl_.legacy_relay_session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.from_relay_session_id_ = from._impl_.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kludge_pad_ = from._impl_.kludge_pad_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.from_connection_id_ = from._impl_.from_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramNoSessionRelayToPeer::CopyFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoSessionRelayToPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramNoSessionRelayToPeer::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoSessionRelayToPeer::InternalSwap(CMsgSteamDatagramNoSessionRelayToPeer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_connection_id_)
      + sizeof(CMsgSteamDatagramNoSessionRelayToPeer::_impl_.from_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_)>(
          reinterpret_cast<char*>(&_impl_.legacy_relay_session_id_),
          reinterpret_cast<char*>(&other->_impl_.legacy_relay_session_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramNoSessionRelayToPeer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[9]);
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleRequest)
}
CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(const CMsgSteamDatagramClientPingSampleRequest& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleRequest)
}
inline void CMsgSteamDatagramClientPingSampleRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.connection_id_){0u},
  };
}
CMsgSteamDatagramClientPingSampleRequest::~CMsgSteamDatagramClientPingSampleRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramClientPingSampleRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgSteamDatagramClientPingSampleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CMsgSteamDatagramClientPingSampleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramClientPingSampleRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_.connection_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_.connection_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramClientPingSampleRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleRequest)
  return target;
}

::size_t CMsgSteamDatagramClientPingSampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed32 connection_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramClientPingSampleRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramClientPingSampleRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramClientPingSampleRequest::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramClientPingSampleRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramClientPingSampleRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleRequest::InternalSwap(CMsgSteamDatagramClientPingSampleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.connection_id_, other->_impl_.connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[10]);
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
}
CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.front_ping_ms_){},
      decltype(_impl_.penalty_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.front_ping_ms_, &from._impl_.front_ping_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.penalty_) -
    reinterpret_cast<char*>(&_impl_.front_ping_ms_)) + sizeof(_impl_.penalty_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
}
inline void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.front_ping_ms_){0u},
      decltype(_impl_.penalty_){0u},
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::~CMsgSteamDatagramClientPingSampleReply_POP_AltAddress() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}
void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.front_ping_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.penalty_) -
        reinterpret_cast<char*>(&_impl_.front_ping_ms_)) + sizeof(_impl_.penalty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 64, 2> CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string id = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.id_)}},
    // optional uint32 front_ping_ms = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_)}},
    // optional uint32 penalty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 front_ping_ms = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 penalty = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\65\2\0\0\0\0\0\0"
    "CMsgSteamDatagramClientPingSampleReply.POP.AltAddress"
    "id"
  }},
};

::uint8_t* CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 front_ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_front_ping_ms(), target);
  }

  // optional uint32 penalty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  return target;
}

::size_t CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional uint32 front_ping_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_front_ping_ms());
    }

    // optional uint32 penalty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_penalty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.front_ping_ms_ = from._impl_.front_ping_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.penalty_ = from._impl_.penalty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::InternalSwap(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_impl_.penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_)>(
          reinterpret_cast<char*>(&_impl_.front_ping_ms_),
          reinterpret_cast<char*>(&other->_impl_.front_ping_ms_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[11]);
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_POP::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_POP>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_._has_bits_);
  static void set_has_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_front_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cluster_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_e2e_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_e2e_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_p2p_via_peer_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_best_dc_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_dc_score(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_dc_via_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_default_dc_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_default_dc_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_default_dc_via_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_test_dc_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_test_dc_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_test_dc_via_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.POP)
}
CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(const CMsgSteamDatagramClientPingSampleReply_POP& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramClientPingSampleReply_POP* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.alt_addresses_){from._impl_.alt_addresses_},
      decltype(_impl_.pop_id_){},
      decltype(_impl_.default_front_ping_ms_){},
      decltype(_impl_.default_e2e_ping_ms_){},
      decltype(_impl_.cluster_penalty_){},
      decltype(_impl_.default_e2e_score_){},
      decltype(_impl_.p2p_via_peer_relay_pop_id_){},
      decltype(_impl_.best_dc_ping_ms_){},
      decltype(_impl_.best_dc_score_){},
      decltype(_impl_.best_dc_via_relay_pop_id_){},
      decltype(_impl_.default_dc_ping_ms_){},
      decltype(_impl_.default_dc_score_){},
      decltype(_impl_.default_dc_via_relay_pop_id_){},
      decltype(_impl_.test_dc_ping_ms_){},
      decltype(_impl_.test_dc_score_){},
      decltype(_impl_.test_dc_via_relay_pop_id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.pop_id_, &from._impl_.pop_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.test_dc_via_relay_pop_id_) -
    reinterpret_cast<char*>(&_impl_.pop_id_)) + sizeof(_impl_.test_dc_via_relay_pop_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.POP)
}
inline void CMsgSteamDatagramClientPingSampleReply_POP::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.alt_addresses_){arena},
      decltype(_impl_.pop_id_){0u},
      decltype(_impl_.default_front_ping_ms_){0u},
      decltype(_impl_.default_e2e_ping_ms_){0u},
      decltype(_impl_.cluster_penalty_){0u},
      decltype(_impl_.default_e2e_score_){0u},
      decltype(_impl_.p2p_via_peer_relay_pop_id_){0u},
      decltype(_impl_.best_dc_ping_ms_){0u},
      decltype(_impl_.best_dc_score_){0u},
      decltype(_impl_.best_dc_via_relay_pop_id_){0u},
      decltype(_impl_.default_dc_ping_ms_){0u},
      decltype(_impl_.default_dc_score_){0u},
      decltype(_impl_.default_dc_via_relay_pop_id_){0u},
      decltype(_impl_.test_dc_ping_ms_){0u},
      decltype(_impl_.test_dc_score_){0u},
      decltype(_impl_.test_dc_via_relay_pop_id_){0u},
  };
}
CMsgSteamDatagramClientPingSampleReply_POP::~CMsgSteamDatagramClientPingSampleReply_POP() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.POP)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramClientPingSampleReply_POP::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.alt_addresses_.~RepeatedPtrField();
}
void CMsgSteamDatagramClientPingSampleReply_POP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleReply_POP::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_alt_addresses()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.pop_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.best_dc_score_) -
        reinterpret_cast<char*>(&_impl_.pop_id_)) + sizeof(_impl_.best_dc_score_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.best_dc_via_relay_pop_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.test_dc_via_relay_pop_id_) -
        reinterpret_cast<char*>(&_impl_.best_dc_via_relay_pop_id_)) + sizeof(_impl_.test_dc_via_relay_pop_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleReply_POP::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 1, 0, 2> CMsgSteamDatagramClientPingSampleReply_POP::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836352,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramClientPingSampleReply_POP_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 pop_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.pop_id_)}},
    // optional uint32 default_front_ping_ms = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_front_ping_ms_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_front_ping_ms_)}},
    // optional uint32 default_e2e_ping_ms = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_ping_ms_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_ping_ms_)}},
    // optional uint32 cluster_penalty = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.cluster_penalty_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.cluster_penalty_)}},
    // optional uint32 default_e2e_score = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_score_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_score_)}},
    // optional fixed32 p2p_via_peer_relay_pop_id = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.p2p_via_peer_relay_pop_id_)}},
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.alt_addresses_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 best_dc_ping_ms = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_ping_ms_), 6>(),
     {72, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_ping_ms_)}},
    // optional uint32 best_dc_score = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_score_), 7>(),
     {80, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_score_)}},
    // optional fixed32 best_dc_via_relay_pop_id = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_via_relay_pop_id_)}},
    // optional uint32 default_dc_ping_ms = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_ping_ms_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_ping_ms_)}},
    // optional uint32 default_dc_score = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_score_), 10>(),
     {104, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_score_)}},
    // optional fixed32 default_dc_via_relay_pop_id = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_via_relay_pop_id_)}},
    // optional uint32 test_dc_ping_ms = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_ping_ms_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_ping_ms_)}},
    // optional uint32 test_dc_score = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_score_)}},
    // optional fixed32 test_dc_via_relay_pop_id = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_via_relay_pop_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 pop_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.pop_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 default_front_ping_ms = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_front_ping_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 default_e2e_ping_ms = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_ping_ms_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 cluster_penalty = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.cluster_penalty_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 default_e2e_score = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_score_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 p2p_via_peer_relay_pop_id = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.p2p_via_peer_relay_pop_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.alt_addresses_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 best_dc_ping_ms = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_ping_ms_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_dc_score = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_score_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 best_dc_via_relay_pop_id = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_via_relay_pop_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 default_dc_ping_ms = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_ping_ms_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 default_dc_score = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_score_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 default_dc_via_relay_pop_id = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_via_relay_pop_id_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 test_dc_ping_ms = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_ping_ms_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 test_dc_score = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_score_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 test_dc_via_relay_pop_id = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_via_relay_pop_id_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramClientPingSampleReply_POP::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 pop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_pop_id(), target);
  }

  // optional uint32 default_front_ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_default_front_ping_ms(), target);
  }

  // optional uint32 default_e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_default_e2e_ping_ms(), target);
  }

  // optional uint32 cluster_penalty = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_cluster_penalty(), target);
  }

  // optional uint32 default_e2e_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_default_e2e_score(), target);
  }

  // optional fixed32 p2p_via_peer_relay_pop_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this->_internal_p2p_via_peer_relay_pop_id(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alt_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_alt_addresses().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 best_dc_ping_ms = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_best_dc_ping_ms(), target);
  }

  // optional uint32 best_dc_score = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_best_dc_score(), target);
  }

  // optional fixed32 best_dc_via_relay_pop_id = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this->_internal_best_dc_via_relay_pop_id(), target);
  }

  // optional uint32 default_dc_ping_ms = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_default_dc_ping_ms(), target);
  }

  // optional uint32 default_dc_score = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_default_dc_score(), target);
  }

  // optional fixed32 default_dc_via_relay_pop_id = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        14, this->_internal_default_dc_via_relay_pop_id(), target);
  }

  // optional uint32 test_dc_ping_ms = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_test_dc_ping_ms(), target);
  }

  // optional uint32 test_dc_score = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_test_dc_score(), target);
  }

  // optional fixed32 test_dc_via_relay_pop_id = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        17, this->_internal_test_dc_via_relay_pop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.POP)
  return target;
}

::size_t CMsgSteamDatagramClientPingSampleReply_POP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
  total_size += 1UL * this->_internal_alt_addresses_size();
  for (const auto& msg : this->_internal_alt_addresses()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed32 pop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional uint32 default_front_ping_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_default_front_ping_ms());
    }

    // optional uint32 default_e2e_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_default_e2e_ping_ms());
    }

    // optional uint32 cluster_penalty = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cluster_penalty());
    }

    // optional uint32 default_e2e_score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_default_e2e_score());
    }

    // optional fixed32 p2p_via_peer_relay_pop_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional uint32 best_dc_ping_ms = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_best_dc_ping_ms());
    }

    // optional uint32 best_dc_score = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_best_dc_score());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional fixed32 best_dc_via_relay_pop_id = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 5;
    }

    // optional uint32 default_dc_ping_ms = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_default_dc_ping_ms());
    }

    // optional uint32 default_dc_score = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_default_dc_score());
    }

    // optional fixed32 default_dc_via_relay_pop_id = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 5;
    }

    // optional uint32 test_dc_ping_ms = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_test_dc_ping_ms());
    }

    // optional uint32 test_dc_score = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_test_dc_score());
    }

    // optional fixed32 test_dc_via_relay_pop_id = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 6;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramClientPingSampleReply_POP::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramClientPingSampleReply_POP::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramClientPingSampleReply_POP::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramClientPingSampleReply_POP::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleReply_POP*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleReply_POP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_alt_addresses()->MergeFrom(from._internal_alt_addresses());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pop_id_ = from._impl_.pop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.default_front_ping_ms_ = from._impl_.default_front_ping_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.default_e2e_ping_ms_ = from._impl_.default_e2e_ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cluster_penalty_ = from._impl_.cluster_penalty_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.default_e2e_score_ = from._impl_.default_e2e_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.p2p_via_peer_relay_pop_id_ = from._impl_.p2p_via_peer_relay_pop_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.best_dc_ping_ms_ = from._impl_.best_dc_ping_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.best_dc_score_ = from._impl_.best_dc_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.best_dc_via_relay_pop_id_ = from._impl_.best_dc_via_relay_pop_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.default_dc_ping_ms_ = from._impl_.default_dc_ping_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.default_dc_score_ = from._impl_.default_dc_score_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.default_dc_via_relay_pop_id_ = from._impl_.default_dc_via_relay_pop_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.test_dc_ping_ms_ = from._impl_.test_dc_ping_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.test_dc_score_ = from._impl_.test_dc_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.test_dc_via_relay_pop_id_ = from._impl_.test_dc_via_relay_pop_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleReply_POP::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_POP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.POP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramClientPingSampleReply_POP::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_POP::InternalSwap(CMsgSteamDatagramClientPingSampleReply_POP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.alt_addresses_.InternalSwap(&other->_impl_.alt_addresses_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_via_relay_pop_id_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_POP::_impl_.test_dc_via_relay_pop_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.pop_id_)>(
          reinterpret_cast<char*>(&_impl_.pop_id_),
          reinterpret_cast<char*>(&other->_impl_.pop_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_POP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[12]);
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_._has_bits_);
  static void set_has_data_center_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_best_dc_via_relay_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_best_dc_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
}
CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
}
inline void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_center_id_){0u},
      decltype(_impl_.best_dc_via_relay_pop_id_){0u},
      decltype(_impl_.best_dc_ping_ms_){0u},
  };
}
CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::~CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.data_center_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.best_dc_ping_ms_) -
        reinterpret_cast<char*>(&_impl_.data_center_id_)) + sizeof(_impl_.best_dc_ping_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 data_center_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.data_center_id_)}},
    // optional fixed32 best_dc_via_relay_pop_id = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_via_relay_pop_id_)}},
    // optional uint32 best_dc_ping_ms = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 data_center_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.data_center_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 best_dc_via_relay_pop_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_via_relay_pop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 best_dc_ping_ms = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_data_center_id(), target);
  }

  // optional fixed32 best_dc_via_relay_pop_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_best_dc_via_relay_pop_id(), target);
  }

  // optional uint32 best_dc_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_best_dc_ping_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  return target;
}

::size_t CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 data_center_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional fixed32 best_dc_via_relay_pop_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional uint32 best_dc_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_best_dc_ping_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_center_id_ = from._impl_.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.best_dc_via_relay_pop_id_ = from._impl_.best_dc_via_relay_pop_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.best_dc_ping_ms_ = from._impl_.best_dc_ping_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::InternalSwap(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_impl_.best_dc_ping_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.data_center_id_)>(
          reinterpret_cast<char*>(&_impl_.data_center_id_),
          reinterpret_cast<char*>(&other->_impl_.data_center_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[13]);
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientPingSampleReply>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relay_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply)
}
CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(const CMsgSteamDatagramClientPingSampleReply& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramClientPingSampleReply* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.pops_){from._impl_.pops_},
      decltype(_impl_.legacy_data_centers_){from._impl_.legacy_data_centers_},
      decltype(_impl_.connection_id_){},
      decltype(_impl_.relay_override_active_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.connection_id_, &from._impl_.connection_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.relay_override_active_) -
    reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.relay_override_active_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply)
}
inline void CMsgSteamDatagramClientPingSampleReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.pops_){arena},
      decltype(_impl_.legacy_data_centers_){arena},
      decltype(_impl_.connection_id_){0u},
      decltype(_impl_.relay_override_active_){false},
  };
}
CMsgSteamDatagramClientPingSampleReply::~CMsgSteamDatagramClientPingSampleReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramClientPingSampleReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pops_.~RepeatedPtrField();
  _impl_.legacy_data_centers_.~RepeatedPtrField();
}
void CMsgSteamDatagramClientPingSampleReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_pops()->Clear();
  _internal_mutable_legacy_data_centers()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.relay_override_active_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.relay_override_active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientPingSampleReply::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 2, 0, 2> CMsgSteamDatagramClientPingSampleReply::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramClientPingSampleReply_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.connection_id_)}},
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.pops_)}},
    // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.legacy_data_centers_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool relay_override_active = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_), 1>(),
     {40, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.connection_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.pops_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.legacy_data_centers_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool relay_override_active = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_POP>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramClientPingSampleReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_connection_id(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pops_size()); i < n; i++) {
    const auto& repfield = this->_internal_pops().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_legacy_data_centers_size()); i < n; i++) {
    const auto& repfield = this->_internal_legacy_data_centers().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool relay_override_active = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_relay_override_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply)
  return target;
}

::size_t CMsgSteamDatagramClientPingSampleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
  total_size += 1UL * this->_internal_pops_size();
  for (const auto& msg : this->_internal_pops()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
  total_size += 1UL * this->_internal_legacy_data_centers_size();
  for (const auto& msg : this->_internal_legacy_data_centers()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional bool relay_override_active = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramClientPingSampleReply::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramClientPingSampleReply::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramClientPingSampleReply::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramClientPingSampleReply::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleReply*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pops()->MergeFrom(from._internal_pops());
  _this->_internal_mutable_legacy_data_centers()->MergeFrom(from._internal_legacy_data_centers());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.relay_override_active_ = from._impl_.relay_override_active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramClientPingSampleReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply::InternalSwap(CMsgSteamDatagramClientPingSampleReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pops_.InternalSwap(&other->_impl_.pops_);
  _impl_.legacy_data_centers_.InternalSwap(&other->_impl_.legacy_data_centers_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply::_impl_.relay_override_active_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[14]);
}
// ===================================================================

class CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_back_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_until_down(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}
CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.score_){0u},
      decltype(_impl_.front_ping_){0u},
      decltype(_impl_.back_ping_){0u},
      decltype(_impl_.seconds_until_down_){0u},
  };
}
CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.score_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seconds_until_down_) -
        reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.seconds_until_down_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 seconds_until_down = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_)}},
    // optional uint32 score = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_)}},
    // optional uint32 front_ping = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.front_ping_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.front_ping_)}},
    // optional uint32 back_ping = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.back_ping_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.back_ping_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 score = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 front_ping = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.front_ping_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 back_ping = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.back_ping_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seconds_until_down = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_score(), target);
  }

  // optional uint32 front_ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_front_ping(), target);
  }

  // optional uint32 back_ping = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_back_ping(), target);
  }

  // optional uint32 seconds_until_down = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_seconds_until_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return target;
}

::size_t CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_score());
    }

    // optional uint32 front_ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_front_ping());
    }

    // optional uint32 back_ping = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_back_ping());
    }

    // optional uint32 seconds_until_down = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seconds_until_down());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.front_ping_ = from._impl_.front_ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.back_ping_ = from._impl_.back_ping_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seconds_until_down_ = from._impl_.seconds_until_down_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_)
      + sizeof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_impl_.seconds_until_down_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[15]);
}
// ===================================================================

class CMsgSteamDatagramClientSwitchedPrimary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramClientSwitchedPrimary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_from_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_from_router_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_from_active_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_from_active_packets_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_from_dropped_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gap_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_from_quality_now(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_to_quality_now(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_from_quality_then(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_to_quality_then(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::_Internal::from_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->_impl_.from_quality_now_;
}
const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::_Internal::to_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->_impl_.to_quality_now_;
}
const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::_Internal::from_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->_impl_.from_quality_then_;
}
const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::_Internal::to_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->_impl_.to_quality_then_;
}
CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientSwitchedPrimary)
}
CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(const CMsgSteamDatagramClientSwitchedPrimary& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramClientSwitchedPrimary* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.from_dropped_reason_){},
      decltype(_impl_.from_quality_now_){nullptr},
      decltype(_impl_.to_quality_now_){nullptr},
      decltype(_impl_.from_quality_then_){nullptr},
      decltype(_impl_.to_quality_then_){nullptr},
      decltype(_impl_.connection_id_){},
      decltype(_impl_.from_ip_){},
      decltype(_impl_.from_port_){},
      decltype(_impl_.from_router_cluster_){},
      decltype(_impl_.from_active_time_){},
      decltype(_impl_.from_active_packets_recv_){},
      decltype(_impl_.gap_ms_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.from_dropped_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_dropped_reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.from_dropped_reason_.Set(from._internal_from_dropped_reason(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.from_quality_now_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from._impl_.from_quality_now_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.to_quality_now_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from._impl_.to_quality_now_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.from_quality_then_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from._impl_.from_quality_then_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.to_quality_then_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from._impl_.to_quality_then_);
  }
  ::memcpy(&_impl_.connection_id_, &from._impl_.connection_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.gap_ms_) -
    reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.gap_ms_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientSwitchedPrimary)
}
inline void CMsgSteamDatagramClientSwitchedPrimary::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.from_dropped_reason_){},
      decltype(_impl_.from_quality_now_){nullptr},
      decltype(_impl_.to_quality_now_){nullptr},
      decltype(_impl_.from_quality_then_){nullptr},
      decltype(_impl_.to_quality_then_){nullptr},
      decltype(_impl_.connection_id_){0u},
      decltype(_impl_.from_ip_){0u},
      decltype(_impl_.from_port_){0u},
      decltype(_impl_.from_router_cluster_){0u},
      decltype(_impl_.from_active_time_){0u},
      decltype(_impl_.from_active_packets_recv_){0u},
      decltype(_impl_.gap_ms_){0u},
  };
  _impl_.from_dropped_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_dropped_reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramClientSwitchedPrimary::~CMsgSteamDatagramClientSwitchedPrimary() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientSwitchedPrimary)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramClientSwitchedPrimary::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_dropped_reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_quality_now_;
  if (this != internal_default_instance()) delete _impl_.to_quality_now_;
  if (this != internal_default_instance()) delete _impl_.from_quality_then_;
  if (this != internal_default_instance()) delete _impl_.to_quality_then_;
}
void CMsgSteamDatagramClientSwitchedPrimary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramClientSwitchedPrimary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.from_dropped_reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.from_quality_now_ != nullptr);
      _impl_.from_quality_now_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.to_quality_now_ != nullptr);
      _impl_.to_quality_now_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.from_quality_then_ != nullptr);
      _impl_.from_quality_then_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.to_quality_then_ != nullptr);
      _impl_.to_quality_then_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.from_port_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.from_port_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.from_router_cluster_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.gap_ms_) -
        reinterpret_cast<char*>(&_impl_.from_router_cluster_)) + sizeof(_impl_.gap_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramClientSwitchedPrimary::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 4, 74, 2> CMsgSteamDatagramClientSwitchedPrimary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.connection_id_)}},
    // optional fixed32 from_ip = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_ip_)}},
    // optional uint32 from_port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_port_), 7>(),
     {24, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_port_)}},
    // optional fixed32 from_router_cluster = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_router_cluster_)}},
    // optional uint32 from_active_time = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_time_), 9>(),
     {40, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_time_)}},
    // optional uint32 from_active_packets_recv = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_packets_recv_), 10>(),
     {48, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_packets_recv_)}},
    // optional string from_dropped_reason = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_dropped_reason_)}},
    // optional uint32 gap_ms = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_), 11>(),
     {64, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_)}},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_now_)}},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_now_)}},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 3, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_then_)}},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 4, 3, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_then_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.connection_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_ip = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_ip_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 from_port = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_port_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 from_router_cluster = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_router_cluster_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 from_active_time = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_time_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 from_active_packets_recv = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_packets_recv_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string from_dropped_reason = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_dropped_reason_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 gap_ms = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_now_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_now_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_then_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_then_), _Internal::kHasBitsOffset + 4, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()},
  }}, {{
    "\46\0\0\0\0\0\0\23\0\0\0\0\0\0\0\0"
    "CMsgSteamDatagramClientSwitchedPrimary"
    "from_dropped_reason"
  }},
};

::uint8_t* CMsgSteamDatagramClientSwitchedPrimary::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_connection_id(), target);
  }

  // optional fixed32 from_ip = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_from_ip(), target);
  }

  // optional uint32 from_port = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_from_port(), target);
  }

  // optional fixed32 from_router_cluster = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this->_internal_from_router_cluster(), target);
  }

  // optional uint32 from_active_time = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_from_active_time(), target);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_from_active_packets_recv(), target);
  }

  // optional string from_dropped_reason = 7;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_from_dropped_reason();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional uint32 gap_ms = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_gap_ms(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::from_quality_now(this),
        _Internal::from_quality_now(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::to_quality_now(this),
        _Internal::to_quality_now(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::from_quality_then(this),
        _Internal::from_quality_then(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::to_quality_then(this),
        _Internal::to_quality_then(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientSwitchedPrimary)
  return target;
}

::size_t CMsgSteamDatagramClientSwitchedPrimary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string from_dropped_reason = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_from_dropped_reason());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.from_quality_now_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.to_quality_now_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.from_quality_then_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.to_quality_then_);
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional fixed32 from_ip = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

    // optional uint32 from_port = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_from_port());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed32 from_router_cluster = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 5;
    }

    // optional uint32 from_active_time = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_from_active_time());
    }

    // optional uint32 from_active_packets_recv = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_from_active_packets_recv());
    }

    // optional uint32 gap_ms = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_gap_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramClientSwitchedPrimary::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramClientSwitchedPrimary::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramClientSwitchedPrimary::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramClientSwitchedPrimary::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientSwitchedPrimary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientSwitchedPrimary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_from_dropped_reason(from._internal_from_dropped_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_from_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(
          from._internal_from_quality_now());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_to_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(
          from._internal_to_quality_now());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_from_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(
          from._internal_from_quality_then());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_to_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(
          from._internal_to_quality_then());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.from_ip_ = from._impl_.from_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.from_port_ = from._impl_.from_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.from_router_cluster_ = from._impl_.from_router_cluster_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.from_active_time_ = from._impl_.from_active_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.from_active_packets_recv_ = from._impl_.from_active_packets_recv_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.gap_ms_ = from._impl_.gap_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramClientSwitchedPrimary::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_dropped_reason_, lhs_arena,
                                       &other->_impl_.from_dropped_reason_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_)
      + sizeof(CMsgSteamDatagramClientSwitchedPrimary::_impl_.gap_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_now_)>(
          reinterpret_cast<char*>(&_impl_.from_quality_now_),
          reinterpret_cast<char*>(&other->_impl_.from_quality_now_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[16]);
}
// ===================================================================

class CMsgSteamDatagramConnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_my_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ping_est_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_virtual_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gameserver_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamDatagramConnectRequest* msg);
  static void set_has_crypt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramConnectRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_legacy_client_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramConnectRequest::_Internal::crypt(const CMsgSteamDatagramConnectRequest* msg) {
  return *msg->_impl_.crypt_;
}
const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramConnectRequest::_Internal::cert(const CMsgSteamDatagramConnectRequest* msg) {
  return *msg->_impl_.cert_;
}
void CMsgSteamDatagramConnectRequest::clear_crypt() {
  if (_impl_.crypt_ != nullptr) _impl_.crypt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectRequest::clear_cert() {
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectRequest)
}
CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(const CMsgSteamDatagramConnectRequest& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.crypt_){nullptr},
      decltype(_impl_.cert_){nullptr},
      decltype(_impl_.connection_id_){},
      decltype(_impl_.gameserver_relay_session_id_){},
      decltype(_impl_.legacy_client_steam_id_){},
      decltype(_impl_.my_timestamp_){},
      decltype(_impl_.ping_est_ms_){},
      decltype(_impl_.virtual_port_){},
      decltype(_impl_.routing_secret_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from._impl_.crypt_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cert_ = new ::CMsgSteamDatagramCertificateSigned(*from._impl_.cert_);
  }
  ::memcpy(&_impl_.connection_id_, &from._impl_.connection_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.routing_secret_) -
    reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.routing_secret_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectRequest)
}
inline void CMsgSteamDatagramConnectRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.crypt_){nullptr},
      decltype(_impl_.cert_){nullptr},
      decltype(_impl_.connection_id_){0u},
      decltype(_impl_.gameserver_relay_session_id_){0u},
      decltype(_impl_.legacy_client_steam_id_){::uint64_t{0u}},
      decltype(_impl_.my_timestamp_){::uint64_t{0u}},
      decltype(_impl_.ping_est_ms_){0u},
      decltype(_impl_.virtual_port_){0u},
      decltype(_impl_.routing_secret_){::uint64_t{0u}},
  };
}
CMsgSteamDatagramConnectRequest::~CMsgSteamDatagramConnectRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.crypt_;
  if (this != internal_default_instance()) delete _impl_.cert_;
}
void CMsgSteamDatagramConnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.crypt_ != nullptr);
      _impl_.crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.virtual_port_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.virtual_port_));
  }
  _impl_.routing_secret_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 0, 2> CMsgSteamDatagramConnectRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966400,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.connection_id_)}},
    // optional uint32 gameserver_relay_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectRequest, _impl_.gameserver_relay_session_id_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.gameserver_relay_session_id_)}},
    // optional fixed64 legacy_client_steam_id = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.legacy_client_steam_id_)}},
    // optional fixed64 my_timestamp = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.my_timestamp_)}},
    // optional uint32 ping_est_ms = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectRequest, _impl_.ping_est_ms_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.ping_est_ms_)}},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.crypt_)}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.cert_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 virtual_port = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectRequest, _impl_.virtual_port_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.virtual_port_)}},
    // optional fixed64 routing_secret = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.routing_secret_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.connection_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 gameserver_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.gameserver_relay_session_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 legacy_client_steam_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.legacy_client_steam_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 my_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.my_timestamp_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 ping_est_ms = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.ping_est_ms_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.crypt_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.cert_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 virtual_port = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.virtual_port_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 routing_secret = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.routing_secret_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramSessionCryptInfoSigned>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramConnectRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_legacy_client_steam_id(), target);
  }

  // optional fixed64 my_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this->_internal_my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_ping_est_ms(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::crypt(this),
        _Internal::crypt(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cert(this),
        _Internal::cert(this).GetCachedSize(), target, stream);
  }

  // optional uint32 virtual_port = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_virtual_port(), target);
  }

  // optional fixed64 routing_secret = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        10, this->_internal_routing_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectRequest)
  return target;
}

::size_t CMsgSteamDatagramConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cert_);
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional uint32 gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_gameserver_relay_session_id());
    }

    // optional fixed64 legacy_client_steam_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional fixed64 my_timestamp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional uint32 ping_est_ms = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ping_est_ms());
    }

    // optional uint32 virtual_port = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_virtual_port());
    }

  }
  // optional fixed64 routing_secret = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectRequest::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(
          from._internal_crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(
          from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gameserver_relay_session_id_ = from._impl_.gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_client_steam_id_ = from._impl_.legacy_client_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.my_timestamp_ = from._impl_.my_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ping_est_ms_ = from._impl_.ping_est_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.virtual_port_ = from._impl_.virtual_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_routing_secret(from._internal_routing_secret());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectRequest::CopyFrom(const CMsgSteamDatagramConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectRequest::InternalSwap(CMsgSteamDatagramConnectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.routing_secret_)
      + sizeof(CMsgSteamDatagramConnectRequest::_impl_.routing_secret_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.crypt_)>(
          reinterpret_cast<char*>(&_impl_.crypt_),
          reinterpret_cast<char*>(&other->_impl_.crypt_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[17]);
}
// ===================================================================

class CMsgSteamDatagramConnectOK::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectOK>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_._has_bits_);
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_your_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delay_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gameserver_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamDatagramConnectOK* msg);
  static void set_has_crypt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramConnectOK* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramConnectOK::_Internal::crypt(const CMsgSteamDatagramConnectOK* msg) {
  return *msg->_impl_.crypt_;
}
const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramConnectOK::_Internal::cert(const CMsgSteamDatagramConnectOK* msg) {
  return *msg->_impl_.cert_;
}
void CMsgSteamDatagramConnectOK::clear_crypt() {
  if (_impl_.crypt_ != nullptr) _impl_.crypt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectOK::clear_cert() {
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectOK)
}
CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(const CMsgSteamDatagramConnectOK& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectOK* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.crypt_){nullptr},
      decltype(_impl_.cert_){nullptr},
      decltype(_impl_.client_connection_id_){},
      decltype(_impl_.gameserver_relay_session_id_){},
      decltype(_impl_.your_timestamp_){},
      decltype(_impl_.delay_time_usec_){},
      decltype(_impl_.server_connection_id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from._impl_.crypt_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cert_ = new ::CMsgSteamDatagramCertificateSigned(*from._impl_.cert_);
  }
  ::memcpy(&_impl_.client_connection_id_, &from._impl_.client_connection_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.server_connection_id_) -
    reinterpret_cast<char*>(&_impl_.client_connection_id_)) + sizeof(_impl_.server_connection_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectOK)
}
inline void CMsgSteamDatagramConnectOK::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.crypt_){nullptr},
      decltype(_impl_.cert_){nullptr},
      decltype(_impl_.client_connection_id_){0u},
      decltype(_impl_.gameserver_relay_session_id_){0u},
      decltype(_impl_.your_timestamp_){::uint64_t{0u}},
      decltype(_impl_.delay_time_usec_){0u},
      decltype(_impl_.server_connection_id_){0u},
  };
}
CMsgSteamDatagramConnectOK::~CMsgSteamDatagramConnectOK() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectOK)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectOK::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.crypt_;
  if (this != internal_default_instance()) delete _impl_.cert_;
}
void CMsgSteamDatagramConnectOK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectOK)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.crypt_ != nullptr);
      _impl_.crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.client_connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.server_connection_id_) -
        reinterpret_cast<char*>(&_impl_.client_connection_id_)) + sizeof(_impl_.server_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectOK::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> CMsgSteamDatagramConnectOK::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectOK_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.client_connection_id_)}},
    // optional uint32 gameserver_relay_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectOK, _impl_.gameserver_relay_session_id_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.gameserver_relay_session_id_)}},
    // optional fixed64 your_timestamp = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.your_timestamp_)}},
    // optional uint32 delay_time_usec = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectOK, _impl_.delay_time_usec_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.delay_time_usec_)}},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.crypt_)}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.cert_)}},
    // optional fixed32 server_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.server_connection_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 client_connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 gameserver_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.gameserver_relay_session_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 your_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.your_timestamp_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 delay_time_usec = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.delay_time_usec_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.crypt_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.cert_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional fixed32 server_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramSessionCryptInfoSigned>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramConnectOK::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectOK)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_client_connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_gameserver_relay_session_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_delay_time_usec(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::crypt(this),
        _Internal::crypt(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cert(this),
        _Internal::cert(this).GetCachedSize(), target, stream);
  }

  // optional fixed32 server_connection_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this->_internal_server_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectOK)
  return target;
}

::size_t CMsgSteamDatagramConnectOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectOK)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cert_);
    }

    // optional fixed32 client_connection_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional uint32 gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_gameserver_relay_session_id());
    }

    // optional fixed64 your_timestamp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional uint32 delay_time_usec = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_delay_time_usec());
    }

    // optional fixed32 server_connection_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectOK::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectOK::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectOK::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectOK::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectOK*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectOK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectOK)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(
          from._internal_crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(
          from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gameserver_relay_session_id_ = from._impl_.gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.your_timestamp_ = from._impl_.your_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.delay_time_usec_ = from._impl_.delay_time_usec_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectOK::CopyFrom(const CMsgSteamDatagramConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectOK::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectOK::InternalSwap(CMsgSteamDatagramConnectOK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.server_connection_id_)
      + sizeof(CMsgSteamDatagramConnectOK::_impl_.server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.crypt_)>(
          reinterpret_cast<char*>(&_impl_.crypt_),
          reinterpret_cast<char*>(&other->_impl_.crypt_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectOK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[18]);
}
// ===================================================================

class CMsgSteamNetworkingP2PSDRRoutingSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingP2PSDRRoutingSummary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_._has_bits_);
  static void set_has_initial_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_ping_front_local(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial_ping_front_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_pop_local(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_initial_pop_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_best_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_best_ping_front_local(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_best_ping_front_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_best_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_best_pop_local(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_best_pop_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_best_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_negotiation_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_selected_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PSDRRoutingSummary)
}
CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(const CMsgSteamNetworkingP2PSDRRoutingSummary& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PSDRRoutingSummary)
}
inline void CMsgSteamNetworkingP2PSDRRoutingSummary::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.initial_ping_){0u},
      decltype(_impl_.initial_ping_front_local_){0u},
      decltype(_impl_.initial_ping_front_remote_){0u},
      decltype(_impl_.initial_score_){0u},
      decltype(_impl_.initial_pop_local_){0u},
      decltype(_impl_.initial_pop_remote_){0u},
      decltype(_impl_.negotiation_ms_){0u},
      decltype(_impl_.selected_seconds_){0u},
      decltype(_impl_.best_ping_){0u},
      decltype(_impl_.best_ping_front_local_){0u},
      decltype(_impl_.best_ping_front_remote_){0u},
      decltype(_impl_.best_score_){0u},
      decltype(_impl_.best_pop_local_){0u},
      decltype(_impl_.best_pop_remote_){0u},
      decltype(_impl_.best_time_){0u},
  };
}
CMsgSteamNetworkingP2PSDRRoutingSummary::~CMsgSteamNetworkingP2PSDRRoutingSummary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PSDRRoutingSummary)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamNetworkingP2PSDRRoutingSummary::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgSteamNetworkingP2PSDRRoutingSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamNetworkingP2PSDRRoutingSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.initial_ping_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.selected_seconds_) -
        reinterpret_cast<char*>(&_impl_.initial_ping_)) + sizeof(_impl_.selected_seconds_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.best_ping_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.best_time_) -
        reinterpret_cast<char*>(&_impl_.best_ping_)) + sizeof(_impl_.best_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingP2PSDRRoutingSummary::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 0, 0, 2> CMsgSteamNetworkingP2PSDRRoutingSummary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_._has_bits_),
    0, // no _extensions_
    17, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamNetworkingP2PSDRRoutingSummary_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional fixed32 best_pop_remote = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_remote_)}},
    // optional uint32 initial_ping = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_)}},
    // optional uint32 initial_ping_front_local = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_local_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_local_)}},
    // optional uint32 initial_ping_front_remote = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_remote_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_remote_)}},
    // optional uint32 initial_score = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_score_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_score_)}},
    // optional fixed32 initial_pop_local = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_local_)}},
    // optional fixed32 initial_pop_remote = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_remote_)}},
    // optional uint32 negotiation_ms = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.negotiation_ms_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.negotiation_ms_)}},
    // optional uint32 selected_seconds = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.selected_seconds_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.selected_seconds_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 best_ping = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_), 8>(),
     {88, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_)}},
    // optional uint32 best_ping_front_local = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_local_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_local_)}},
    // optional uint32 best_ping_front_remote = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_remote_), 10>(),
     {104, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_remote_)}},
    // optional uint32 best_score = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_score_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_score_)}},
    // optional fixed32 best_pop_local = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_local_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 initial_ping = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 initial_ping_front_local = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_local_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 initial_ping_front_remote = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_remote_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 initial_score = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_score_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 initial_pop_local = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_local_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 initial_pop_remote = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_remote_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 negotiation_ms = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.negotiation_ms_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 selected_seconds = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.selected_seconds_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_ping = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_ping_front_local = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_local_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_ping_front_remote = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_remote_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_score = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_score_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 best_pop_local = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_local_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 best_pop_remote = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_remote_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 best_time = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_time_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamNetworkingP2PSDRRoutingSummary::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 initial_ping = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_initial_ping(), target);
  }

  // optional uint32 initial_ping_front_local = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_initial_ping_front_local(), target);
  }

  // optional uint32 initial_ping_front_remote = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_initial_ping_front_remote(), target);
  }

  // optional uint32 initial_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_initial_score(), target);
  }

  // optional fixed32 initial_pop_local = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_initial_pop_local(), target);
  }

  // optional fixed32 initial_pop_remote = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this->_internal_initial_pop_remote(), target);
  }

  // optional uint32 negotiation_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_negotiation_ms(), target);
  }

  // optional uint32 selected_seconds = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_selected_seconds(), target);
  }

  // optional uint32 best_ping = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_best_ping(), target);
  }

  // optional uint32 best_ping_front_local = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_best_ping_front_local(), target);
  }

  // optional uint32 best_ping_front_remote = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_best_ping_front_remote(), target);
  }

  // optional uint32 best_score = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_best_score(), target);
  }

  // optional fixed32 best_pop_local = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        15, this->_internal_best_pop_local(), target);
  }

  // optional fixed32 best_pop_remote = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        16, this->_internal_best_pop_remote(), target);
  }

  // optional uint32 best_time = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_best_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PSDRRoutingSummary)
  return target;
}

::size_t CMsgSteamNetworkingP2PSDRRoutingSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 initial_ping = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_initial_ping());
    }

    // optional uint32 initial_ping_front_local = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_initial_ping_front_local());
    }

    // optional uint32 initial_ping_front_remote = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_initial_ping_front_remote());
    }

    // optional uint32 initial_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_initial_score());
    }

    // optional fixed32 initial_pop_local = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional fixed32 initial_pop_remote = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional uint32 negotiation_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_negotiation_ms());
    }

    // optional uint32 selected_seconds = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_selected_seconds());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 best_ping = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_best_ping());
    }

    // optional uint32 best_ping_front_local = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_best_ping_front_local());
    }

    // optional uint32 best_ping_front_remote = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_best_ping_front_remote());
    }

    // optional uint32 best_score = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_best_score());
    }

    // optional fixed32 best_pop_local = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 5;
    }

    // optional fixed32 best_pop_remote = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 6;
    }

    // optional uint32 best_time = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_best_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamNetworkingP2PSDRRoutingSummary::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamNetworkingP2PSDRRoutingSummary::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamNetworkingP2PSDRRoutingSummary::GetClassData() const { return &_class_data_; }


void CMsgSteamNetworkingP2PSDRRoutingSummary::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamNetworkingP2PSDRRoutingSummary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamNetworkingP2PSDRRoutingSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.initial_ping_ = from._impl_.initial_ping_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.initial_ping_front_local_ = from._impl_.initial_ping_front_local_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.initial_ping_front_remote_ = from._impl_.initial_ping_front_remote_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.initial_score_ = from._impl_.initial_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.initial_pop_local_ = from._impl_.initial_pop_local_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.initial_pop_remote_ = from._impl_.initial_pop_remote_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.negotiation_ms_ = from._impl_.negotiation_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.selected_seconds_ = from._impl_.selected_seconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.best_ping_ = from._impl_.best_ping_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.best_ping_front_local_ = from._impl_.best_ping_front_local_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.best_ping_front_remote_ = from._impl_.best_ping_front_remote_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.best_score_ = from._impl_.best_score_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.best_pop_local_ = from._impl_.best_pop_local_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.best_pop_remote_ = from._impl_.best_pop_remote_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.best_time_ = from._impl_.best_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::CopyFrom(const CMsgSteamNetworkingP2PSDRRoutingSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamNetworkingP2PSDRRoutingSummary::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::InternalSwap(CMsgSteamNetworkingP2PSDRRoutingSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_time_)
      + sizeof(CMsgSteamNetworkingP2PSDRRoutingSummary::_impl_.best_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_)>(
          reinterpret_cast<char*>(&_impl_.initial_ping_),
          reinterpret_cast<char*>(&other->_impl_.initial_ping_));
}

::google::protobuf::Metadata CMsgSteamNetworkingP2PSDRRoutingSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[19]);
}
// ===================================================================

class CMsgSteamDatagramP2PRoutingSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PRoutingSummary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_._has_bits_);
  static const ::CMsgSteamNetworkingICESessionSummary& ice(const CMsgSteamDatagramP2PRoutingSummary* msg);
  static void set_has_ice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamNetworkingP2PSDRRoutingSummary& sdr(const CMsgSteamDatagramP2PRoutingSummary* msg);
  static void set_has_sdr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamNetworkingICESessionSummary& CMsgSteamDatagramP2PRoutingSummary::_Internal::ice(const CMsgSteamDatagramP2PRoutingSummary* msg) {
  return *msg->_impl_.ice_;
}
const ::CMsgSteamNetworkingP2PSDRRoutingSummary& CMsgSteamDatagramP2PRoutingSummary::_Internal::sdr(const CMsgSteamDatagramP2PRoutingSummary* msg) {
  return *msg->_impl_.sdr_;
}
void CMsgSteamDatagramP2PRoutingSummary::clear_ice() {
  if (_impl_.ice_ != nullptr) _impl_.ice_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutingSummary)
}
CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(const CMsgSteamDatagramP2PRoutingSummary& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramP2PRoutingSummary* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ice_){nullptr},
      decltype(_impl_.sdr_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ice_ = new ::CMsgSteamNetworkingICESessionSummary(*from._impl_.ice_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.sdr_ = new ::CMsgSteamNetworkingP2PSDRRoutingSummary(*from._impl_.sdr_);
  }

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutingSummary)
}
inline void CMsgSteamDatagramP2PRoutingSummary::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ice_){nullptr},
      decltype(_impl_.sdr_){nullptr},
  };
}
CMsgSteamDatagramP2PRoutingSummary::~CMsgSteamDatagramP2PRoutingSummary() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutingSummary)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PRoutingSummary::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ice_;
  if (this != internal_default_instance()) delete _impl_.sdr_;
}
void CMsgSteamDatagramP2PRoutingSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PRoutingSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutingSummary)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ice_ != nullptr);
      _impl_.ice_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.sdr_ != nullptr);
      _impl_.sdr_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PRoutingSummary::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CMsgSteamDatagramP2PRoutingSummary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_._has_bits_),
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramP2PRoutingSummary_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.ice_)}},
    // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.sdr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.ice_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.sdr_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingICESessionSummary>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingP2PSDRRoutingSummary>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramP2PRoutingSummary::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutingSummary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ice(this),
        _Internal::ice(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sdr(this),
        _Internal::sdr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutingSummary)
  return target;
}

::size_t CMsgSteamDatagramP2PRoutingSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutingSummary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.ice_);
    }

    // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.sdr_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PRoutingSummary::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PRoutingSummary::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PRoutingSummary::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PRoutingSummary::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PRoutingSummary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PRoutingSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutingSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ice()->::CMsgSteamNetworkingICESessionSummary::MergeFrom(
          from._internal_ice());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sdr()->::CMsgSteamNetworkingP2PSDRRoutingSummary::MergeFrom(
          from._internal_sdr());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PRoutingSummary::CopyFrom(const CMsgSteamDatagramP2PRoutingSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutingSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PRoutingSummary::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutingSummary::InternalSwap(CMsgSteamDatagramP2PRoutingSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.sdr_)
      + sizeof(CMsgSteamDatagramP2PRoutingSummary::_impl_.sdr_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.ice_)>(
          reinterpret_cast<char*>(&_impl_.ice_),
          reinterpret_cast<char*>(&other->_impl_.ice_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutingSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[20]);
}
// ===================================================================

class CMsgSteamDatagramConnectionClosed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionClosed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_._has_bits_);
  static void set_has_to_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_from_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_from_identity_binary(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_legacy_from_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_legacy_from_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_legacy_gameserver_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_to_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_from_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_forward_target_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forward_target_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_relay_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_not_primary_session(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_not_primary_transport(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_relay_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing_summary(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_p2p_routing_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgSteamNetworkingIdentityLegacyBinary& CMsgSteamDatagramConnectionClosed::_Internal::legacy_from_identity_binary(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->_impl_.legacy_from_identity_binary_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionClosed::_Internal::quality_relay(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->_impl_.quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionClosed::_Internal::quality_e2e(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->_impl_.quality_e2e_;
}
const ::CMsgSteamDatagramP2PRoutingSummary& CMsgSteamDatagramConnectionClosed::_Internal::p2p_routing_summary(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->_impl_.p2p_routing_summary_;
}
void CMsgSteamDatagramConnectionClosed::clear_legacy_from_identity_binary() {
  if (_impl_.legacy_from_identity_binary_ != nullptr) _impl_.legacy_from_identity_binary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CMsgSteamDatagramConnectionClosed::clear_quality_relay() {
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CMsgSteamDatagramConnectionClosed::clear_quality_e2e() {
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionClosed)
}
CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(const CMsgSteamDatagramConnectionClosed& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectionClosed* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.debug_){},
      decltype(_impl_.forward_target_relay_routing_token_){},
      decltype(_impl_.from_identity_string_){},
      decltype(_impl_.legacy_from_identity_binary_){nullptr},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.p2p_routing_summary_){nullptr},
      decltype(_impl_.legacy_from_steam_id_){},
      decltype(_impl_.legacy_gameserver_relay_session_id_){},
      decltype(_impl_.relay_mode_){},
      decltype(_impl_.reason_code_){},
      decltype(_impl_.to_connection_id_){},
      decltype(_impl_.from_connection_id_){},
      decltype(_impl_.to_relay_session_id_){},
      decltype(_impl_.from_relay_session_id_){},
      decltype(_impl_.forward_target_revision_){},
      decltype(_impl_.routing_secret_){},
      decltype(_impl_.not_primary_session_){},
      decltype(_impl_.not_primary_transport_){},
      decltype(_impl_.relay_override_active_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.debug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.debug_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.debug_.Set(from._internal_debug(), _this->GetArenaForAllocation());
  }
  _impl_.forward_target_relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.forward_target_relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.forward_target_relay_routing_token_.Set(from._internal_forward_target_relay_routing_token(), _this->GetArenaForAllocation());
  }
  _impl_.from_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.from_identity_string_.Set(from._internal_from_identity_string(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.legacy_from_identity_binary_ = new ::CMsgSteamNetworkingIdentityLegacyBinary(*from._impl_.legacy_from_identity_binary_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_relay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_e2e_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.p2p_routing_summary_ = new ::CMsgSteamDatagramP2PRoutingSummary(*from._impl_.p2p_routing_summary_);
  }
  ::memcpy(&_impl_.legacy_from_steam_id_, &from._impl_.legacy_from_steam_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.relay_override_active_) -
    reinterpret_cast<char*>(&_impl_.legacy_from_steam_id_)) + sizeof(_impl_.relay_override_active_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionClosed)
}
inline void CMsgSteamDatagramConnectionClosed::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.debug_){},
      decltype(_impl_.forward_target_relay_routing_token_){},
      decltype(_impl_.from_identity_string_){},
      decltype(_impl_.legacy_from_identity_binary_){nullptr},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.p2p_routing_summary_){nullptr},
      decltype(_impl_.legacy_from_steam_id_){::uint64_t{0u}},
      decltype(_impl_.legacy_gameserver_relay_session_id_){0u},
      decltype(_impl_.relay_mode_){0},
      decltype(_impl_.reason_code_){0u},
      decltype(_impl_.to_connection_id_){0u},
      decltype(_impl_.from_connection_id_){0u},
      decltype(_impl_.to_relay_session_id_){0u},
      decltype(_impl_.from_relay_session_id_){0u},
      decltype(_impl_.forward_target_revision_){0u},
      decltype(_impl_.routing_secret_){::uint64_t{0u}},
      decltype(_impl_.not_primary_session_){false},
      decltype(_impl_.not_primary_transport_){false},
      decltype(_impl_.relay_override_active_){false},
  };
  _impl_.debug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.debug_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.forward_target_relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.forward_target_relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramConnectionClosed::~CMsgSteamDatagramConnectionClosed() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionClosed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectionClosed::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.debug_.Destroy();
  _impl_.forward_target_relay_routing_token_.Destroy();
  _impl_.from_identity_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.legacy_from_identity_binary_;
  if (this != internal_default_instance()) delete _impl_.quality_relay_;
  if (this != internal_default_instance()) delete _impl_.quality_e2e_;
  if (this != internal_default_instance()) delete _impl_.p2p_routing_summary_;
}
void CMsgSteamDatagramConnectionClosed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionClosed)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.debug_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.forward_target_relay_routing_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.from_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.legacy_from_identity_binary_ != nullptr);
      _impl_.legacy_from_identity_binary_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.p2p_routing_summary_ != nullptr);
      _impl_.p2p_routing_summary_->Clear();
    }
  }
  _impl_.legacy_from_steam_id_ = ::uint64_t{0u};
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.legacy_gameserver_relay_session_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.forward_target_revision_) -
        reinterpret_cast<char*>(&_impl_.legacy_gameserver_relay_session_id_)) + sizeof(_impl_.forward_target_revision_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.routing_secret_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.relay_override_active_) -
        reinterpret_cast<char*>(&_impl_.routing_secret_)) + sizeof(_impl_.relay_override_active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionClosed::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 5, 83, 2> CMsgSteamDatagramConnectionClosed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4291297281,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectionClosed_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionClosed, _impl_.legacy_gameserver_relay_session_id_), 8>(),
     {16, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_gameserver_relay_session_id_)}},
    // optional fixed64 legacy_from_steam_id = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_steam_id_)}},
    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    {::_pbi::TcParser::FastEr0S1,
     {32, 9, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_mode_)}},
    // optional string debug = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.debug_)}},
    // optional uint32 reason_code = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionClosed, _impl_.reason_code_), 10>(),
     {48, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.reason_code_)}},
    // optional fixed32 to_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.to_connection_id_)}},
    // optional fixed32 from_connection_id = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_connection_id_)}},
    // optional fixed32 to_relay_session_id = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.to_relay_session_id_)}},
    // optional fixed32 from_relay_session_id = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_relay_session_id_)}},
    // optional bytes forward_target_relay_routing_token = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_relay_routing_token_)}},
    // optional uint32 forward_target_revision = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_revision_), 15>(),
     {96, 15, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_revision_)}},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 3, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_identity_binary_)}},
    // optional fixed64 routing_secret = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 16, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.routing_secret_)}},
    // optional string from_identity_string = 15;
    {::_pbi::TcParser::FastSS1,
     {122, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_identity_string_)}},
    // optional bool not_primary_session = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 17, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.not_primary_session_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 4, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 5, 3, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.quality_e2e_)}},
    // optional bool not_primary_transport = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 18, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.not_primary_transport_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 6, 4, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.p2p_routing_summary_)}},
    // optional bool relay_override_active = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 19, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_override_active_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_gameserver_relay_session_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 legacy_from_steam_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_steam_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_mode_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string debug = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.debug_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 reason_code = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.reason_code_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 to_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.to_connection_id_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_connection_id = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_connection_id_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 to_relay_session_id = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.to_relay_session_id_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_relay_session_id = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_relay_session_id_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional bytes forward_target_relay_routing_token = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_relay_routing_token_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 forward_target_revision = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_revision_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_identity_binary_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional fixed64 routing_secret = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.routing_secret_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional string from_identity_string = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_identity_string_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool not_primary_session = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.not_primary_session_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.quality_relay_), _Internal::kHasBitsOffset + 4, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 5, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool not_primary_transport = 19;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.not_primary_transport_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.p2p_routing_summary_), _Internal::kHasBitsOffset + 6, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool relay_override_active = 22;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_override_active_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {0, 3},
    {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIdentityLegacyBinary>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>()},
  }}, {{
    "\41\0\0\0\5\0\0\0\0\0\0\0\0\0\24\0\0\0\0\0\0\0\0\0"
    "CMsgSteamDatagramConnectionClosed"
    "debug"
    "from_identity_string"
  }},
};

::uint8_t* CMsgSteamDatagramConnectionClosed::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionClosed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_from_steam_id = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_legacy_from_steam_id(), target);
  }

  // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_relay_mode(), target);
  }

  // optional string debug = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_debug();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramConnectionClosed.debug");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional uint32 reason_code = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_reason_code(), target);
  }

  // optional fixed32 to_connection_id = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this->_internal_to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this->_internal_from_connection_id(), target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this->_internal_to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this->_internal_from_relay_session_id(), target);
  }

  // optional bytes forward_target_relay_routing_token = 11;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_forward_target_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // optional uint32 forward_target_revision = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_forward_target_revision(), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::legacy_from_identity_binary(this),
        _Internal::legacy_from_identity_binary(this).GetCachedSize(), target, stream);
  }

  // optional fixed64 routing_secret = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        14, this->_internal_routing_secret(), target);
  }

  // optional string from_identity_string = 15;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_from_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramConnectionClosed.from_identity_string");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // optional bool not_primary_session = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_not_primary_session(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::quality_relay(this),
        _Internal::quality_relay(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::quality_e2e(this),
        _Internal::quality_e2e(this).GetCachedSize(), target, stream);
  }

  // optional bool not_primary_transport = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_not_primary_transport(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::p2p_routing_summary(this),
        _Internal::p2p_routing_summary(this).GetCachedSize(), target, stream);
  }

  // optional bool relay_override_active = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_relay_override_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionClosed)
  return target;
}

::size_t CMsgSteamDatagramConnectionClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionClosed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string debug = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_debug());
    }

    // optional bytes forward_target_relay_routing_token = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_forward_target_relay_routing_token());
    }

    // optional string from_identity_string = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_from_identity_string());
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.legacy_from_identity_binary_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_e2e_);
    }

    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.p2p_routing_summary_);
    }

    // optional fixed64 legacy_from_steam_id = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_legacy_gameserver_relay_session_id());
    }

    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_relay_mode());
    }

    // optional uint32 reason_code = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_reason_code());
    }

    // optional fixed32 to_connection_id = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 5;
    }

    // optional fixed32 from_connection_id = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 5;
    }

    // optional fixed32 to_relay_session_id = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 5;
    }

    // optional fixed32 from_relay_session_id = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += 5;
    }

    // optional uint32 forward_target_revision = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_forward_target_revision());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional fixed64 routing_secret = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 9;
    }

    // optional bool not_primary_session = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3;
    }

    // optional bool not_primary_transport = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3;
    }

    // optional bool relay_override_active = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectionClosed::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectionClosed::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectionClosed::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectionClosed::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionClosed*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionClosed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionClosed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_debug(from._internal_debug());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_forward_target_relay_routing_token(from._internal_forward_target_relay_routing_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_from_identity_string(from._internal_from_identity_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_legacy_from_identity_binary()->::CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(
          from._internal_legacy_from_identity_binary());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_p2p_routing_summary()->::CMsgSteamDatagramP2PRoutingSummary::MergeFrom(
          from._internal_p2p_routing_summary());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.legacy_from_steam_id_ = from._impl_.legacy_from_steam_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.legacy_gameserver_relay_session_id_ = from._impl_.legacy_gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.relay_mode_ = from._impl_.relay_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.reason_code_ = from._impl_.reason_code_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.to_connection_id_ = from._impl_.to_connection_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.from_connection_id_ = from._impl_.from_connection_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.to_relay_session_id_ = from._impl_.to_relay_session_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.from_relay_session_id_ = from._impl_.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.forward_target_revision_ = from._impl_.forward_target_revision_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.not_primary_session_ = from._impl_.not_primary_session_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.not_primary_transport_ = from._impl_.not_primary_transport_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.relay_override_active_ = from._impl_.relay_override_active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionClosed::CopyFrom(const CMsgSteamDatagramConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectionClosed::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionClosed::InternalSwap(CMsgSteamDatagramConnectionClosed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.debug_, lhs_arena,
                                       &other->_impl_.debug_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forward_target_relay_routing_token_, lhs_arena,
                                       &other->_impl_.forward_target_relay_routing_token_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_identity_string_, lhs_arena,
                                       &other->_impl_.from_identity_string_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_override_active_)
      + sizeof(CMsgSteamDatagramConnectionClosed::_impl_.relay_override_active_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_identity_binary_)>(
          reinterpret_cast<char*>(&_impl_.legacy_from_identity_binary_),
          reinterpret_cast<char*>(&other->_impl_.legacy_from_identity_binary_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionClosed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[21]);
}
// ===================================================================

class CMsgSteamDatagramNoConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramNoConnection>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_._has_bits_);
  static void set_has_to_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_legacy_gameserver_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_to_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_from_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_from_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_from_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_end_to_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_not_primary_session(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_not_primary_transport(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_relay_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramNoConnection* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramNoConnection* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing_summary(const CMsgSteamDatagramNoConnection* msg);
  static void set_has_p2p_routing_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dummy_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramNoConnection::_Internal::quality_relay(const CMsgSteamDatagramNoConnection* msg) {
  return *msg->_impl_.quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramNoConnection::_Internal::quality_e2e(const CMsgSteamDatagramNoConnection* msg) {
  return *msg->_impl_.quality_e2e_;
}
const ::CMsgSteamDatagramP2PRoutingSummary& CMsgSteamDatagramNoConnection::_Internal::p2p_routing_summary(const CMsgSteamDatagramNoConnection* msg) {
  return *msg->_impl_.p2p_routing_summary_;
}
void CMsgSteamDatagramNoConnection::clear_quality_relay() {
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramNoConnection::clear_quality_e2e() {
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoConnection)
}
CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(const CMsgSteamDatagramNoConnection& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramNoConnection* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.from_identity_string_){},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.p2p_routing_summary_){nullptr},
      decltype(_impl_.legacy_from_steam_id_){},
      decltype(_impl_.legacy_gameserver_relay_session_id_){},
      decltype(_impl_.to_connection_id_){},
      decltype(_impl_.from_connection_id_){},
      decltype(_impl_.to_relay_session_id_){},
      decltype(_impl_.routing_secret_){},
      decltype(_impl_.from_relay_session_id_){},
      decltype(_impl_.end_to_end_){},
      decltype(_impl_.not_primary_session_){},
      decltype(_impl_.not_primary_transport_){},
      decltype(_impl_.relay_override_active_){},
      decltype(_impl_.dummy_pad_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.from_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.from_identity_string_.Set(from._internal_from_identity_string(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_relay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_e2e_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.p2p_routing_summary_ = new ::CMsgSteamDatagramP2PRoutingSummary(*from._impl_.p2p_routing_summary_);
  }
  ::memcpy(&_impl_.legacy_from_steam_id_, &from._impl_.legacy_from_steam_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.dummy_pad_) -
    reinterpret_cast<char*>(&_impl_.legacy_from_steam_id_)) + sizeof(_impl_.dummy_pad_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramNoConnection)
}
inline void CMsgSteamDatagramNoConnection::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.from_identity_string_){},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.p2p_routing_summary_){nullptr},
      decltype(_impl_.legacy_from_steam_id_){::uint64_t{0u}},
      decltype(_impl_.legacy_gameserver_relay_session_id_){0u},
      decltype(_impl_.to_connection_id_){0u},
      decltype(_impl_.from_connection_id_){0u},
      decltype(_impl_.to_relay_session_id_){0u},
      decltype(_impl_.routing_secret_){::uint64_t{0u}},
      decltype(_impl_.from_relay_session_id_){0u},
      decltype(_impl_.end_to_end_){false},
      decltype(_impl_.not_primary_session_){false},
      decltype(_impl_.not_primary_transport_){false},
      decltype(_impl_.relay_override_active_){false},
      decltype(_impl_.dummy_pad_){0u},
  };
  _impl_.from_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramNoConnection::~CMsgSteamDatagramNoConnection() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoConnection)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramNoConnection::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_identity_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quality_relay_;
  if (this != internal_default_instance()) delete _impl_.quality_e2e_;
  if (this != internal_default_instance()) delete _impl_.p2p_routing_summary_;
}
void CMsgSteamDatagramNoConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramNoConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoConnection)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.from_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.p2p_routing_summary_ != nullptr);
      _impl_.p2p_routing_summary_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.legacy_from_steam_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.from_connection_id_) -
        reinterpret_cast<char*>(&_impl_.legacy_from_steam_id_)) + sizeof(_impl_.from_connection_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.to_relay_session_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dummy_pad_) -
        reinterpret_cast<char*>(&_impl_.to_relay_session_id_)) + sizeof(_impl_.dummy_pad_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramNoConnection::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 3, 74, 7> CMsgSteamDatagramNoConnection::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_._has_bits_),
    0, // no _extensions_
    1023, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836353,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramNoConnection_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramNoConnection, _impl_.legacy_gameserver_relay_session_id_), 5>(),
     {16, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.legacy_gameserver_relay_session_id_)}},
    // optional fixed64 legacy_from_steam_id = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.legacy_from_steam_id_)}},
    // optional bool end_to_end = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramNoConnection, _impl_.end_to_end_), 11>(),
     {32, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.end_to_end_)}},
    // optional fixed32 to_connection_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.to_connection_id_)}},
    // optional fixed32 from_connection_id = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_connection_id_)}},
    // optional string from_identity_string = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_identity_string_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 to_relay_session_id = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.to_relay_session_id_)}},
    // optional fixed32 from_relay_session_id = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_relay_session_id_)}},
    // optional fixed64 routing_secret = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.routing_secret_)}},
    // optional bool not_primary_session = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramNoConnection, _impl_.not_primary_session_), 12>(),
     {96, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.not_primary_session_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_e2e_)}},
    // optional bool not_primary_transport = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramNoConnection, _impl_.not_primary_transport_), 13>(),
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.not_primary_transport_)}},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 3, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.p2p_routing_summary_)}},
    // optional bool relay_override_active = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.relay_override_active_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 dummy_pad = 1023;
    {::_pbi::TcParser::FastF32S2,
     {16381, 15, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.dummy_pad_)}},
  }}, {{
    1023, 0, 1,
    65534, 15,
    65535, 65535
  }}, {{
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.legacy_gameserver_relay_session_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 legacy_from_steam_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.legacy_from_steam_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional bool end_to_end = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.end_to_end_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional fixed32 to_connection_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.to_connection_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_connection_id = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string from_identity_string = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional fixed32 to_relay_session_id = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.to_relay_session_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_relay_session_id = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_relay_session_id_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 routing_secret = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.routing_secret_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional bool not_primary_session = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.not_primary_session_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_relay_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool not_primary_transport = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.not_primary_transport_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.p2p_routing_summary_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool relay_override_active = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.relay_override_active_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional fixed32 dummy_pad = 1023;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.dummy_pad_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>()},
  }}, {{
    "\35\0\0\0\0\0\24\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "CMsgSteamDatagramNoConnection"
    "from_identity_string"
  }},
};

::uint8_t* CMsgSteamDatagramNoConnection::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoConnection)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_from_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_legacy_from_steam_id(), target);
  }

  // optional bool end_to_end = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_end_to_end(), target);
  }

  // optional fixed32 to_connection_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this->_internal_from_connection_id(), target);
  }

  // optional string from_identity_string = 7;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_from_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramNoConnection.from_identity_string");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this->_internal_to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this->_internal_from_relay_session_id(), target);
  }

  // optional fixed64 routing_secret = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        11, this->_internal_routing_secret(), target);
  }

  // optional bool not_primary_session = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_not_primary_session(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::quality_relay(this),
        _Internal::quality_relay(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::quality_e2e(this),
        _Internal::quality_e2e(this).GetCachedSize(), target, stream);
  }

  // optional bool not_primary_transport = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_not_primary_transport(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::p2p_routing_summary(this),
        _Internal::p2p_routing_summary(this).GetCachedSize(), target, stream);
  }

  // optional bool relay_override_active = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_relay_override_active(), target);
  }

  // optional fixed32 dummy_pad = 1023;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1023, this->_internal_dummy_pad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoConnection)
  return target;
}

::size_t CMsgSteamDatagramNoConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoConnection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string from_identity_string = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_from_identity_string());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_e2e_);
    }

    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.p2p_routing_summary_);
    }

    // optional fixed64 legacy_from_steam_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_legacy_gameserver_relay_session_id());
    }

    // optional fixed32 to_connection_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

    // optional fixed32 from_connection_id = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional fixed32 to_relay_session_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 5;
    }

    // optional fixed64 routing_secret = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }

    // optional fixed32 from_relay_session_id = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 5;
    }

    // optional bool end_to_end = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional bool not_primary_session = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }

    // optional bool not_primary_transport = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2;
    }

    // optional bool relay_override_active = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3;
    }

    // optional fixed32 dummy_pad = 1023;
    if (cached_has_bits & 0x00008000u) {
      total_size += 6;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramNoConnection::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramNoConnection::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramNoConnection::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramNoConnection::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramNoConnection*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramNoConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoConnection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_from_identity_string(from._internal_from_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_p2p_routing_summary()->::CMsgSteamDatagramP2PRoutingSummary::MergeFrom(
          from._internal_p2p_routing_summary());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_from_steam_id_ = from._impl_.legacy_from_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.legacy_gameserver_relay_session_id_ = from._impl_.legacy_gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.to_connection_id_ = from._impl_.to_connection_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.from_connection_id_ = from._impl_.from_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.to_relay_session_id_ = from._impl_.to_relay_session_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.from_relay_session_id_ = from._impl_.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.end_to_end_ = from._impl_.end_to_end_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.not_primary_session_ = from._impl_.not_primary_session_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.not_primary_transport_ = from._impl_.not_primary_transport_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.relay_override_active_ = from._impl_.relay_override_active_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.dummy_pad_ = from._impl_.dummy_pad_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramNoConnection::CopyFrom(const CMsgSteamDatagramNoConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramNoConnection::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoConnection::InternalSwap(CMsgSteamDatagramNoConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_identity_string_, lhs_arena,
                                       &other->_impl_.from_identity_string_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.dummy_pad_)
      + sizeof(CMsgSteamDatagramNoConnection::_impl_.dummy_pad_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramNoConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[22]);
}
// ===================================================================

class CMsgSteamDatagramGameserverSessionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverSessionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_._has_bits_);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_network_config_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dev_gameserver_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& dev_client_cert(const CMsgSteamDatagramGameserverSessionRequest* msg);
  static void set_has_dev_client_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramGameserverSessionRequest::_Internal::dev_client_cert(const CMsgSteamDatagramGameserverSessionRequest* msg) {
  return *msg->_impl_.dev_client_cert_;
}
void CMsgSteamDatagramGameserverSessionRequest::clear_dev_client_cert() {
  if (_impl_.dev_client_cert_ != nullptr) _impl_.dev_client_cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverSessionRequest)
}
CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(const CMsgSteamDatagramGameserverSessionRequest& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramGameserverSessionRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ticket_){},
      decltype(_impl_.platform_){},
      decltype(_impl_.build_){},
      decltype(_impl_.dev_gameserver_identity_){},
      decltype(_impl_.dev_client_cert_){nullptr},
      decltype(_impl_.challenge_){},
      decltype(_impl_.challenge_time_){},
      decltype(_impl_.client_connection_id_){},
      decltype(_impl_.network_config_version_){},
      decltype(_impl_.protocol_version_){},
      decltype(_impl_.server_connection_id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ticket_.Set(from._internal_ticket(), _this->GetArenaForAllocation());
  }
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.platform_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.platform_.Set(from._internal_platform(), _this->GetArenaForAllocation());
  }
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.build_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.build_.Set(from._internal_build(), _this->GetArenaForAllocation());
  }
  _impl_.dev_gameserver_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dev_gameserver_identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.dev_gameserver_identity_.Set(from._internal_dev_gameserver_identity(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.dev_client_cert_ = new ::CMsgSteamDatagramCertificateSigned(*from._impl_.dev_client_cert_);
  }
  ::memcpy(&_impl_.challenge_, &from._impl_.challenge_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.server_connection_id_) -
    reinterpret_cast<char*>(&_impl_.challenge_)) + sizeof(_impl_.server_connection_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverSessionRequest)
}
inline void CMsgSteamDatagramGameserverSessionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ticket_){},
      decltype(_impl_.platform_){},
      decltype(_impl_.build_){},
      decltype(_impl_.dev_gameserver_identity_){},
      decltype(_impl_.dev_client_cert_){nullptr},
      decltype(_impl_.challenge_){::uint64_t{0u}},
      decltype(_impl_.challenge_time_){0u},
      decltype(_impl_.client_connection_id_){0u},
      decltype(_impl_.network_config_version_){::uint64_t{0u}},
      decltype(_impl_.protocol_version_){0u},
      decltype(_impl_.server_connection_id_){0u},
  };
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.platform_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.build_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dev_gameserver_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dev_gameserver_identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramGameserverSessionRequest::~CMsgSteamDatagramGameserverSessionRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverSessionRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramGameserverSessionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ticket_.Destroy();
  _impl_.platform_.Destroy();
  _impl_.build_.Destroy();
  _impl_.dev_gameserver_identity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dev_client_cert_;
}
void CMsgSteamDatagramGameserverSessionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverSessionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.build_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.dev_gameserver_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dev_client_cert_ != nullptr);
      _impl_.dev_client_cert_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.challenge_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.client_connection_id_) -
        reinterpret_cast<char*>(&_impl_.challenge_)) + sizeof(_impl_.client_connection_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.network_config_version_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.server_connection_id_) -
        reinterpret_cast<char*>(&_impl_.network_config_version_)) + sizeof(_impl_.server_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverSessionRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 1, 94, 7> CMsgSteamDatagramGameserverSessionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_._has_bits_),
    0, // no _extensions_
    101, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966274,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramGameserverSessionRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes ticket = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.ticket_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 challenge_time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_time_)}},
    // optional fixed64 challenge = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_)}},
    // optional fixed32 client_connection_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.client_connection_id_)}},
    // optional uint64 network_config_version = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CMsgSteamDatagramGameserverSessionRequest, _impl_.network_config_version_), 8>(),
     {48, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.network_config_version_)}},
    // optional uint32 protocol_version = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverSessionRequest, _impl_.protocol_version_), 9>(),
     {56, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.protocol_version_)}},
    // optional fixed32 server_connection_id = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.server_connection_id_)}},
    // optional string platform = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.platform_)}},
    // optional string build = 10;
    {::_pbi::TcParser::FastSS1,
     {82, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.build_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65532, 9,
    65535, 65535
  }}, {{
    // optional bytes ticket = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.ticket_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional fixed32 challenge_time = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_time_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 client_connection_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint64 network_config_version = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.network_config_version_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint32 protocol_version = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.protocol_version_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 server_connection_id = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string platform = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.platform_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string build = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.build_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string dev_gameserver_identity = 100;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_gameserver_identity_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .CMsgSteamDatagramCertificateSigned dev_client_cert = 101;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_client_cert_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }}, {{
    "\51\0\0\0\0\0\0\0\10\5\27\0\0\0\0\0"
    "CMsgSteamDatagramGameserverSessionRequest"
    "platform"
    "build"
    "dev_gameserver_identity"
  }},
};

::uint8_t* CMsgSteamDatagramGameserverSessionRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverSessionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_ticket();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional fixed32 challenge_time = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this->_internal_challenge_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this->_internal_challenge(), target);
  }

  // optional fixed32 client_connection_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_client_connection_id(), target);
  }

  // optional uint64 network_config_version = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_network_config_version(), target);
  }

  // optional uint32 protocol_version = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_protocol_version(), target);
  }

  // optional fixed32 server_connection_id = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this->_internal_server_connection_id(), target);
  }

  // optional string platform = 9;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_platform();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverSessionRequest.platform");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string build = 10;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_build();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverSessionRequest.build");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional string dev_gameserver_identity = 100;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_dev_gameserver_identity();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverSessionRequest.dev_gameserver_identity");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  // optional .CMsgSteamDatagramCertificateSigned dev_client_cert = 101;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::dev_client_cert(this),
        _Internal::dev_client_cert(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverSessionRequest)
  return target;
}

::size_t CMsgSteamDatagramGameserverSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverSessionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_ticket());
    }

    // optional string platform = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_platform());
    }

    // optional string build = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_build());
    }

    // optional string dev_gameserver_identity = 100;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_dev_gameserver_identity());
    }

    // optional .CMsgSteamDatagramCertificateSigned dev_client_cert = 101;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.dev_client_cert_);
    }

    // optional fixed64 challenge = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional fixed32 challenge_time = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

    // optional fixed32 client_connection_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 network_config_version = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_network_config_version());
    }

    // optional uint32 protocol_version = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol_version());
    }

    // optional fixed32 server_connection_id = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramGameserverSessionRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramGameserverSessionRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramGameserverSessionRequest::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramGameserverSessionRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverSessionRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverSessionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ticket(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_build(from._internal_build());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_dev_gameserver_identity(from._internal_dev_gameserver_identity());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_dev_client_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(
          from._internal_dev_client_cert());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.challenge_time_ = from._impl_.challenge_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.network_config_version_ = from._impl_.network_config_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramGameserverSessionRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverSessionRequest::InternalSwap(CMsgSteamDatagramGameserverSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticket_, lhs_arena,
                                       &other->_impl_.ticket_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.platform_, lhs_arena,
                                       &other->_impl_.platform_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.build_, lhs_arena,
                                       &other->_impl_.build_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dev_gameserver_identity_, lhs_arena,
                                       &other->_impl_.dev_gameserver_identity_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.server_connection_id_)
      + sizeof(CMsgSteamDatagramGameserverSessionRequest::_impl_.server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_client_cert_)>(
          reinterpret_cast<char*>(&_impl_.dev_client_cert_),
          reinterpret_cast<char*>(&other->_impl_.dev_client_cert_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[23]);
}
// ===================================================================

class CMsgSteamDatagramGameserverSessionEstablished::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameserverSessionEstablished>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameserver_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seq_num_r2c(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dummy_legacy_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_gameserver_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverSessionEstablished)
}
CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(const CMsgSteamDatagramGameserverSessionEstablished& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramGameserverSessionEstablished* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.gameserver_identity_string_){},
      decltype(_impl_.dummy_legacy_identity_binary_){},
      decltype(_impl_.connection_id_){},
      decltype(_impl_.seconds_until_shutdown_){},
      decltype(_impl_.legacy_gameserver_steamid_){},
      decltype(_impl_.seq_num_r2c_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.gameserver_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gameserver_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.gameserver_identity_string_.Set(from._internal_gameserver_identity_string(), _this->GetArenaForAllocation());
  }
  _impl_.dummy_legacy_identity_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dummy_legacy_identity_binary_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dummy_legacy_identity_binary_.Set(from._internal_dummy_legacy_identity_binary(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.connection_id_, &from._impl_.connection_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.seq_num_r2c_) -
    reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.seq_num_r2c_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverSessionEstablished)
}
inline void CMsgSteamDatagramGameserverSessionEstablished::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.gameserver_identity_string_){},
      decltype(_impl_.dummy_legacy_identity_binary_){},
      decltype(_impl_.connection_id_){0u},
      decltype(_impl_.seconds_until_shutdown_){0u},
      decltype(_impl_.legacy_gameserver_steamid_){::uint64_t{0u}},
      decltype(_impl_.seq_num_r2c_){0u},
  };
  _impl_.gameserver_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gameserver_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dummy_legacy_identity_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dummy_legacy_identity_binary_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramGameserverSessionEstablished::~CMsgSteamDatagramGameserverSessionEstablished() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverSessionEstablished)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramGameserverSessionEstablished::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameserver_identity_string_.Destroy();
  _impl_.dummy_legacy_identity_binary_.Destroy();
}
void CMsgSteamDatagramGameserverSessionEstablished::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.gameserver_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.dummy_legacy_identity_binary_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_r2c_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.seq_num_r2c_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameserverSessionEstablished::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 80, 2> CMsgSteamDatagramGameserverSessionEstablished::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967184,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramGameserverSessionEstablished_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.connection_id_)}},
    // optional string gameserver_identity_string = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.gameserver_identity_string_)}},
    // optional fixed64 legacy_gameserver_steamid = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.legacy_gameserver_steamid_)}},
    // optional uint32 seconds_until_shutdown = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seconds_until_shutdown_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seconds_until_shutdown_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seq_num_r2c = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_)}},
    // optional bytes dummy_legacy_identity_binary = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.dummy_legacy_identity_binary_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.connection_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string gameserver_identity_string = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.gameserver_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional fixed64 legacy_gameserver_steamid = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.legacy_gameserver_steamid_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 seconds_until_shutdown = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_r2c = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes dummy_legacy_identity_binary = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.dummy_legacy_identity_binary_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\55\0\32\0\0\0\0\0"
    "CMsgSteamDatagramGameserverSessionEstablished"
    "gameserver_identity_string"
  }},
};

::uint8_t* CMsgSteamDatagramGameserverSessionEstablished::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_connection_id(), target);
  }

  // optional string gameserver_identity_string = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_gameserver_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverSessionEstablished.gameserver_identity_string");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional fixed64 legacy_gameserver_steamid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_legacy_gameserver_steamid(), target);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_seconds_until_shutdown(), target);
  }

  // optional uint32 seq_num_r2c = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_seq_num_r2c(), target);
  }

  // optional bytes dummy_legacy_identity_binary = 7;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_dummy_legacy_identity_binary();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverSessionEstablished)
  return target;
}

::size_t CMsgSteamDatagramGameserverSessionEstablished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string gameserver_identity_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_gameserver_identity_string());
    }

    // optional bytes dummy_legacy_identity_binary = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_dummy_legacy_identity_binary());
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional uint32 seconds_until_shutdown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed64 legacy_gameserver_steamid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional uint32 seq_num_r2c = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_r2c());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramGameserverSessionEstablished::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramGameserverSessionEstablished::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramGameserverSessionEstablished::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramGameserverSessionEstablished::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverSessionEstablished*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverSessionEstablished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_gameserver_identity_string(from._internal_gameserver_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_dummy_legacy_identity_binary(from._internal_dummy_legacy_identity_binary());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_gameserver_steamid_ = from._impl_.legacy_gameserver_steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.seq_num_r2c_ = from._impl_.seq_num_r2c_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramGameserverSessionEstablished::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverSessionEstablished::InternalSwap(CMsgSteamDatagramGameserverSessionEstablished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gameserver_identity_string_, lhs_arena,
                                       &other->_impl_.gameserver_identity_string_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dummy_legacy_identity_binary_, lhs_arena,
                                       &other->_impl_.dummy_legacy_identity_binary_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_)
      + sizeof(CMsgSteamDatagramGameserverSessionEstablished::_impl_.seq_num_r2c_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionEstablished::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[24]);
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsClientToRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsClientToRouter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsClientToRouter* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsClientToRouter* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seq_num_c2r(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsClientToRouter::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
  return *msg->_impl_.quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsClientToRouter::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
  return *msg->_impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_relay() {
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_e2e() {
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsClientToRouter)
}
CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(const CMsgSteamDatagramConnectionStatsClientToRouter& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectionStatsClientToRouter* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){from._impl_.ack_relay_},
      decltype(_impl_.legacy_ack_e2e_){from._impl_.legacy_ack_e2e_},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.flags_){},
      decltype(_impl_.client_connection_id_){},
      decltype(_impl_.seq_num_c2r_){},
      decltype(_impl_.seq_num_e2e_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_relay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_e2e_);
  }
  ::memcpy(&_impl_.flags_, &from._impl_.flags_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
    reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.seq_num_e2e_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsClientToRouter)
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){arena},
      decltype(_impl_.legacy_ack_e2e_){arena},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.flags_){0u},
      decltype(_impl_.client_connection_id_){0u},
      decltype(_impl_.seq_num_c2r_){0u},
      decltype(_impl_.seq_num_e2e_){0u},
  };
}
CMsgSteamDatagramConnectionStatsClientToRouter::~CMsgSteamDatagramConnectionStatsClientToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsClientToRouter)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_relay_.~RepeatedField();
  _impl_.legacy_ack_e2e_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.quality_relay_;
  if (this != internal_default_instance()) delete _impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ack_relay()->Clear();
  _internal_mutable_legacy_ack_e2e()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.flags_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
        reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.seq_num_e2e_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsClientToRouter::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 2, 0, 2> CMsgSteamDatagramConnectionStatsClientToRouter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966340,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated fixed32 ack_relay = 4;
    {::_pbi::TcParser::FastF32R1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 5;
    {::_pbi::TcParser::FastF32R1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.flags_), 2>(),
     {48, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.flags_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_connection_id = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.client_connection_id_)}},
    // optional uint32 seq_num_c2r = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_c2r_), 4>(),
     {72, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_c2r_)}},
    // optional uint32 seq_num_e2e = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_), 5>(),
     {80, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_relay_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated fixed32 ack_relay = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.flags_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_connection_id = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seq_num_c2r = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_c2r_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramConnectionStatsClientToRouter::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::quality_relay(this),
        _Internal::quality_relay(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quality_e2e(this),
        _Internal::quality_e2e(this).GetCachedSize(), target, stream);
  }

  // repeated fixed32 ack_relay = 4;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this->_internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_flags(), target);
  }

  // optional fixed32 client_connection_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this->_internal_client_connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_seq_num_c2r(), target);
  }

  // optional uint32 seq_num_e2e = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_seq_num_e2e(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsClientToRouter)
  return target;
}

::size_t CMsgSteamDatagramConnectionStatsClientToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated fixed32 legacy_ack_e2e = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_e2e_);
    }

    // optional uint32 flags = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional fixed32 client_connection_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional uint32 seq_num_c2r = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_c2r());
    }

    // optional uint32 seq_num_e2e = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_e2e());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectionStatsClientToRouter::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectionStatsClientToRouter::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectionStatsClientToRouter::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectionStatsClientToRouter::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsClientToRouter*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsClientToRouter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.seq_num_c2r_ = from._impl_.seq_num_c2r_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectionStatsClientToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsClientToRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsClientToRouter::_impl_.seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsClientToRouter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[25]);
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsRouterToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsRouterToClient>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsRouterToClient* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToClient* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_migrate_request_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_migrate_request_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scoring_penalty_relay_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seq_num_r2c(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToClient::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
  return *msg->_impl_.quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToClient::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
  return *msg->_impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_relay() {
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_e2e() {
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsRouterToClient)
}
CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(const CMsgSteamDatagramConnectionStatsRouterToClient& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectionStatsRouterToClient* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){from._impl_.ack_relay_},
      decltype(_impl_.legacy_ack_e2e_){from._impl_.legacy_ack_e2e_},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.seconds_until_shutdown_){},
      decltype(_impl_.client_connection_id_){},
      decltype(_impl_.seq_num_r2c_){},
      decltype(_impl_.seq_num_e2e_){},
      decltype(_impl_.migrate_request_ip_){},
      decltype(_impl_.migrate_request_port_){},
      decltype(_impl_.scoring_penalty_relay_cluster_){},
      decltype(_impl_.flags_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_relay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_e2e_);
  }
  ::memcpy(&_impl_.seconds_until_shutdown_, &from._impl_.seconds_until_shutdown_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.seconds_until_shutdown_)) + sizeof(_impl_.flags_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsRouterToClient)
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){arena},
      decltype(_impl_.legacy_ack_e2e_){arena},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.seconds_until_shutdown_){0u},
      decltype(_impl_.client_connection_id_){0u},
      decltype(_impl_.seq_num_r2c_){0u},
      decltype(_impl_.seq_num_e2e_){0u},
      decltype(_impl_.migrate_request_ip_){0u},
      decltype(_impl_.migrate_request_port_){0u},
      decltype(_impl_.scoring_penalty_relay_cluster_){0u},
      decltype(_impl_.flags_){0u},
  };
}
CMsgSteamDatagramConnectionStatsRouterToClient::~CMsgSteamDatagramConnectionStatsRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsRouterToClient)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_relay_.~RepeatedField();
  _impl_.legacy_ack_e2e_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.quality_relay_;
  if (this != internal_default_instance()) delete _impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ack_relay()->Clear();
  _internal_mutable_legacy_ack_e2e()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.seconds_until_shutdown_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.migrate_request_port_) -
        reinterpret_cast<char*>(&_impl_.seconds_until_shutdown_)) + sizeof(_impl_.migrate_request_port_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.scoring_penalty_relay_cluster_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.scoring_penalty_relay_cluster_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsRouterToClient::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 2, 0, 2> CMsgSteamDatagramConnectionStatsRouterToClient::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934556,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seconds_until_shutdown = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seconds_until_shutdown_), 2>(),
     {48, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seconds_until_shutdown_)}},
    // optional fixed32 client_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.client_connection_id_)}},
    // optional uint32 seq_num_r2c = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_r2c_), 4>(),
     {64, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_r2c_)}},
    // optional uint32 seq_num_e2e = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_e2e_), 5>(),
     {72, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_e2e_)}},
    // optional fixed32 migrate_request_ip = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_ip_)}},
    // optional uint32 migrate_request_port = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_port_), 7>(),
     {88, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_port_)}},
    // optional uint32 scoring_penalty_relay_cluster = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.scoring_penalty_relay_cluster_), 8>(),
     {96, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.scoring_penalty_relay_cluster_)}},
    // repeated fixed32 ack_relay = 13;
    {::_pbi::TcParser::FastF32R1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 14;
    {::_pbi::TcParser::FastF32R1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_), 9>(),
     {120, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_relay_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 seconds_until_shutdown = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seq_num_r2c = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_r2c_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 migrate_request_ip = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_ip_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 migrate_request_port = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_port_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 scoring_penalty_relay_cluster = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.scoring_penalty_relay_cluster_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated fixed32 ack_relay = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramConnectionStatsRouterToClient::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::quality_relay(this),
        _Internal::quality_relay(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quality_e2e(this),
        _Internal::quality_e2e(this).GetCachedSize(), target, stream);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this->_internal_client_connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_seq_num_r2c(), target);
  }

  // optional uint32 seq_num_e2e = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_seq_num_e2e(), target);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this->_internal_migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 13;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        13, this->_internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        14, this->_internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsRouterToClient)
  return target;
}

::size_t CMsgSteamDatagramConnectionStatsRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 13;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated fixed32 legacy_ack_e2e = 14;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_e2e_);
    }

    // optional uint32 seconds_until_shutdown = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed32 client_connection_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional uint32 seq_num_r2c = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_r2c());
    }

    // optional uint32 seq_num_e2e = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_e2e());
    }

    // optional fixed32 migrate_request_ip = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

    // optional uint32 migrate_request_port = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_migrate_request_port());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 scoring_penalty_relay_cluster = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_scoring_penalty_relay_cluster());
    }

    // optional uint32 flags = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectionStatsRouterToClient::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectionStatsRouterToClient::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectionStatsRouterToClient::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectionStatsRouterToClient::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsRouterToClient*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsRouterToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.seq_num_r2c_ = from._impl_.seq_num_r2c_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.migrate_request_ip_ = from._impl_.migrate_request_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.migrate_request_port_ = from._impl_.migrate_request_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.scoring_penalty_relay_cluster_ = from._impl_.scoring_penalty_relay_cluster_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectionStatsRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_)
      + sizeof(CMsgSteamDatagramConnectionStatsRouterToClient::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[26]);
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsRouterToServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsRouterToServer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsRouterToServer* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToServer* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_seq_num_r2s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_client_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToServer::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
  return *msg->_impl_.quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToServer::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
  return *msg->_impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_relay() {
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_e2e() {
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsRouterToServer)
}
CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(const CMsgSteamDatagramConnectionStatsRouterToServer& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectionStatsRouterToServer* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){from._impl_.ack_relay_},
      decltype(_impl_.legacy_ack_e2e_){from._impl_.legacy_ack_e2e_},
      decltype(_impl_.client_identity_string_){},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.seq_num_r2s_){},
      decltype(_impl_.seq_num_e2e_){},
      decltype(_impl_.legacy_client_steam_id_){},
      decltype(_impl_.relay_session_id_){},
      decltype(_impl_.client_connection_id_){},
      decltype(_impl_.flags_){},
      decltype(_impl_.server_connection_id_){},
      decltype(_impl_.routing_secret_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.client_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.client_identity_string_.Set(from._internal_client_identity_string(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_relay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_e2e_);
  }
  ::memcpy(&_impl_.seq_num_r2s_, &from._impl_.seq_num_r2s_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.routing_secret_) -
    reinterpret_cast<char*>(&_impl_.seq_num_r2s_)) + sizeof(_impl_.routing_secret_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsRouterToServer)
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){arena},
      decltype(_impl_.legacy_ack_e2e_){arena},
      decltype(_impl_.client_identity_string_){},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.seq_num_r2s_){0u},
      decltype(_impl_.seq_num_e2e_){0u},
      decltype(_impl_.legacy_client_steam_id_){::uint64_t{0u}},
      decltype(_impl_.relay_session_id_){0u},
      decltype(_impl_.client_connection_id_){0u},
      decltype(_impl_.flags_){0u},
      decltype(_impl_.server_connection_id_){0u},
      decltype(_impl_.routing_secret_){::uint64_t{0u}},
  };
  _impl_.client_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramConnectionStatsRouterToServer::~CMsgSteamDatagramConnectionStatsRouterToServer() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsRouterToServer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_relay_.~RepeatedField();
  _impl_.legacy_ack_e2e_.~RepeatedField();
  _impl_.client_identity_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quality_relay_;
  if (this != internal_default_instance()) delete _impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsRouterToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ack_relay()->Clear();
  _internal_mutable_legacy_ack_e2e()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.client_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.seq_num_r2s_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.client_connection_id_) -
        reinterpret_cast<char*>(&_impl_.seq_num_r2s_)) + sizeof(_impl_.client_connection_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.flags_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.routing_secret_) -
        reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.routing_secret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsRouterToServer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 2, 85, 2> CMsgSteamDatagramConnectionStatsRouterToServer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934540,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seq_num_r2s = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_r2s_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_r2s_)}},
    // optional uint32 seq_num_e2e = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_e2e_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_e2e_)}},
    // optional fixed64 legacy_client_steam_id = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_client_steam_id_)}},
    // optional uint32 relay_session_id = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.relay_session_id_), 6>(),
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.relay_session_id_)}},
    // optional fixed32 client_connection_id = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_connection_id_)}},
    // repeated fixed32 ack_relay = 10;
    {::_pbi::TcParser::FastF32R1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 11;
    {::_pbi::TcParser::FastF32R1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.flags_), 8>(),
     {96, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.flags_)}},
    // optional fixed32 server_connection_id = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.server_connection_id_)}},
    // optional fixed64 routing_secret = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.routing_secret_)}},
    // optional string client_identity_string = 15;
    {::_pbi::TcParser::FastSS1,
     {122, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_identity_string_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_relay_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 seq_num_r2s = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_r2s_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 legacy_client_steam_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_client_steam_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 relay_session_id = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.relay_session_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_connection_id = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated fixed32 ack_relay = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.flags_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 server_connection_id = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 routing_secret = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.routing_secret_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional string client_identity_string = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }}, {{
    "\56\0\0\0\0\0\0\0\0\0\0\0\0\26\0\0"
    "CMsgSteamDatagramConnectionStatsRouterToServer"
    "client_identity_string"
  }},
};

::uint8_t* CMsgSteamDatagramConnectionStatsRouterToServer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::quality_relay(this),
        _Internal::quality_relay(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quality_e2e(this),
        _Internal::quality_e2e(this).GetCachedSize(), target, stream);
  }

  // optional uint32 seq_num_r2s = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_seq_num_r2s(), target);
  }

  // optional uint32 seq_num_e2e = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_seq_num_e2e(), target);
  }

  // optional fixed64 legacy_client_steam_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        7, this->_internal_legacy_client_steam_id(), target);
  }

  // optional uint32 relay_session_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this->_internal_client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 10;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this->_internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this->_internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_flags(), target);
  }

  // optional fixed32 server_connection_id = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        13, this->_internal_server_connection_id(), target);
  }

  // optional fixed64 routing_secret = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        14, this->_internal_routing_secret(), target);
  }

  // optional string client_identity_string = 15;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_client_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramConnectionStatsRouterToServer.client_identity_string");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsRouterToServer)
  return target;
}

::size_t CMsgSteamDatagramConnectionStatsRouterToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 10;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated fixed32 legacy_ack_e2e = 11;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string client_identity_string = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_client_identity_string());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_e2e_);
    }

    // optional uint32 seq_num_r2s = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_r2s());
    }

    // optional uint32 seq_num_e2e = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_e2e());
    }

    // optional fixed64 legacy_client_steam_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional uint32 relay_session_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_relay_session_id());
    }

    // optional fixed32 client_connection_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 flags = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional fixed32 server_connection_id = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 5;
    }

    // optional fixed64 routing_secret = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectionStatsRouterToServer::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectionStatsRouterToServer::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectionStatsRouterToServer::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectionStatsRouterToServer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsRouterToServer*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsRouterToServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_client_identity_string(from._internal_client_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seq_num_r2s_ = from._impl_.seq_num_r2s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.legacy_client_steam_id_ = from._impl_.legacy_client_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.relay_session_id_ = from._impl_.relay_session_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectionStatsRouterToServer::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_identity_string_, lhs_arena,
                                       &other->_impl_.client_identity_string_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.routing_secret_)
      + sizeof(CMsgSteamDatagramConnectionStatsRouterToServer::_impl_.routing_secret_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[27]);
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsServerToRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsServerToRouter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsServerToRouter* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsServerToRouter* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seq_num_s2r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relay_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsServerToRouter::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
  return *msg->_impl_.quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsServerToRouter::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
  return *msg->_impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_relay() {
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_e2e() {
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsServerToRouter)
}
CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(const CMsgSteamDatagramConnectionStatsServerToRouter& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectionStatsServerToRouter* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){from._impl_.ack_relay_},
      decltype(_impl_.legacy_ack_e2e_){from._impl_.legacy_ack_e2e_},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.seq_num_s2r_){},
      decltype(_impl_.seq_num_e2e_){},
      decltype(_impl_.relay_session_id_){},
      decltype(_impl_.client_connection_id_){},
      decltype(_impl_.flags_){},
      decltype(_impl_.server_connection_id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_relay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_e2e_);
  }
  ::memcpy(&_impl_.seq_num_s2r_, &from._impl_.seq_num_s2r_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.server_connection_id_) -
    reinterpret_cast<char*>(&_impl_.seq_num_s2r_)) + sizeof(_impl_.server_connection_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsServerToRouter)
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){arena},
      decltype(_impl_.legacy_ack_e2e_){arena},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.seq_num_s2r_){0u},
      decltype(_impl_.seq_num_e2e_){0u},
      decltype(_impl_.relay_session_id_){0u},
      decltype(_impl_.client_connection_id_){0u},
      decltype(_impl_.flags_){0u},
      decltype(_impl_.server_connection_id_){0u},
  };
}
CMsgSteamDatagramConnectionStatsServerToRouter::~CMsgSteamDatagramConnectionStatsServerToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsServerToRouter)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_relay_.~RepeatedField();
  _impl_.legacy_ack_e2e_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.quality_relay_;
  if (this != internal_default_instance()) delete _impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsServerToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ack_relay()->Clear();
  _internal_mutable_legacy_ack_e2e()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.seq_num_s2r_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.server_connection_id_) -
        reinterpret_cast<char*>(&_impl_.seq_num_s2r_)) + sizeof(_impl_.server_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsServerToRouter::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 0, 2> CMsgSteamDatagramConnectionStatsServerToRouter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_e2e_)}},
    // optional uint32 seq_num_s2r = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_s2r_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_s2r_)}},
    // optional uint32 seq_num_e2e = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_e2e_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 relay_session_id = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.relay_session_id_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.relay_session_id_)}},
    // optional fixed32 client_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.client_connection_id_)}},
    // repeated fixed32 ack_relay = 8;
    {::_pbi::TcParser::FastF32R1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 9;
    {::_pbi::TcParser::FastF32R1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.flags_), 6>(),
     {80, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.flags_)}},
    // optional fixed32 server_connection_id = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.server_connection_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_relay_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 seq_num_s2r = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_s2r_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 relay_session_id = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.relay_session_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated fixed32 ack_relay = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.flags_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 server_connection_id = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramConnectionStatsServerToRouter::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::quality_relay(this),
        _Internal::quality_relay(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quality_e2e(this),
        _Internal::quality_e2e(this).GetCachedSize(), target, stream);
  }

  // optional uint32 seq_num_s2r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_seq_num_s2r(), target);
  }

  // optional uint32 seq_num_e2e = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_seq_num_e2e(), target);
  }

  // optional uint32 relay_session_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this->_internal_client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 8;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this->_internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this->_internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_flags(), target);
  }

  // optional fixed32 server_connection_id = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this->_internal_server_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsServerToRouter)
  return target;
}

::size_t CMsgSteamDatagramConnectionStatsServerToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 8;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated fixed32 legacy_ack_e2e = 9;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_e2e_);
    }

    // optional uint32 seq_num_s2r = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_s2r());
    }

    // optional uint32 seq_num_e2e = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_e2e());
    }

    // optional uint32 relay_session_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_relay_session_id());
    }

    // optional fixed32 client_connection_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional uint32 flags = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional fixed32 server_connection_id = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectionStatsServerToRouter::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectionStatsServerToRouter::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectionStatsServerToRouter::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectionStatsServerToRouter::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsServerToRouter*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsServerToRouter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.seq_num_s2r_ = from._impl_.seq_num_s2r_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.relay_session_id_ = from._impl_.relay_session_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectionStatsServerToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsServerToRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.server_connection_id_)
      + sizeof(CMsgSteamDatagramConnectionStatsServerToRouter::_impl_.server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsServerToRouter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[28]);
}
// ===================================================================

class CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PSessionRequestBody_EncryptedData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_._has_bits_);
  static void set_has_peer_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
}
CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData(const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramP2PSessionRequestBody_EncryptedData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.peer_identity_string_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.peer_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peer_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.peer_identity_string_.Set(from._internal_peer_identity_string(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
}
inline void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.peer_identity_string_){},
  };
  _impl_.peer_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peer_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::~CMsgSteamDatagramP2PSessionRequestBody_EncryptedData() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peer_identity_string_.Destroy();
}
void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.peer_identity_string_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 81, 2> CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string peer_identity_string = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_.peer_identity_string_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string peer_identity_string = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_.peer_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\64\24\0\0\0\0\0\0"
    "CMsgSteamDatagramP2PSessionRequestBody.EncryptedData"
    "peer_identity_string"
  }},
};

::uint8_t* CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string peer_identity_string = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_peer_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramP2PSessionRequestBody.EncryptedData.peer_identity_string");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  return target;
}

::size_t CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string peer_identity_string = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_peer_identity_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PSessionRequestBody_EncryptedData*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_peer_identity_string(from._internal_peer_identity_string());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::InternalSwap(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.peer_identity_string_, lhs_arena,
                                       &other->_impl_.peer_identity_string_, rhs_arena);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[29]);
}
// ===================================================================

class CMsgSteamDatagramP2PSessionRequestBody::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PSessionRequestBody>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_._has_bits_);
  static void set_has_challenge_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_legacy_peer_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_peer_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_peer_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_encrypted_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_encryption_your_public_key_lead_byte(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_encryption_my_ephemeral_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_network_config_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionRequestBody)
}
CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(const CMsgSteamDatagramP2PSessionRequestBody& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramP2PSessionRequestBody* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.peer_identity_string_){},
      decltype(_impl_.platform_){},
      decltype(_impl_.build_){},
      decltype(_impl_.encrypted_data_){},
      decltype(_impl_.encryption_my_ephemeral_public_key_){},
      decltype(_impl_.challenge_){},
      decltype(_impl_.challenge_time_){},
      decltype(_impl_.client_connection_id_){},
      decltype(_impl_.legacy_peer_steam_id_){},
      decltype(_impl_.peer_connection_id_){},
      decltype(_impl_.protocol_version_){},
      decltype(_impl_.network_config_version_){},
      decltype(_impl_.encryption_your_public_key_lead_byte_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.peer_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peer_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.peer_identity_string_.Set(from._internal_peer_identity_string(), _this->GetArenaForAllocation());
  }
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.platform_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.platform_.Set(from._internal_platform(), _this->GetArenaForAllocation());
  }
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.build_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.build_.Set(from._internal_build(), _this->GetArenaForAllocation());
  }
  _impl_.encrypted_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encrypted_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.encrypted_data_.Set(from._internal_encrypted_data(), _this->GetArenaForAllocation());
  }
  _impl_.encryption_my_ephemeral_public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encryption_my_ephemeral_public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.encryption_my_ephemeral_public_key_.Set(from._internal_encryption_my_ephemeral_public_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.challenge_, &from._impl_.challenge_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.encryption_your_public_key_lead_byte_) -
    reinterpret_cast<char*>(&_impl_.challenge_)) + sizeof(_impl_.encryption_your_public_key_lead_byte_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionRequestBody)
}
inline void CMsgSteamDatagramP2PSessionRequestBody::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.peer_identity_string_){},
      decltype(_impl_.platform_){},
      decltype(_impl_.build_){},
      decltype(_impl_.encrypted_data_){},
      decltype(_impl_.encryption_my_ephemeral_public_key_){},
      decltype(_impl_.challenge_){::uint64_t{0u}},
      decltype(_impl_.challenge_time_){0u},
      decltype(_impl_.client_connection_id_){0u},
      decltype(_impl_.legacy_peer_steam_id_){::uint64_t{0u}},
      decltype(_impl_.peer_connection_id_){0u},
      decltype(_impl_.protocol_version_){0u},
      decltype(_impl_.network_config_version_){::uint64_t{0u}},
      decltype(_impl_.encryption_your_public_key_lead_byte_){0u},
  };
  _impl_.peer_identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peer_identity_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.platform_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.build_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encrypted_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encryption_my_ephemeral_public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encryption_my_ephemeral_public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramP2PSessionRequestBody::~CMsgSteamDatagramP2PSessionRequestBody() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionRequestBody)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PSessionRequestBody::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peer_identity_string_.Destroy();
  _impl_.platform_.Destroy();
  _impl_.build_.Destroy();
  _impl_.encrypted_data_.Destroy();
  _impl_.encryption_my_ephemeral_public_key_.Destroy();
}
void CMsgSteamDatagramP2PSessionRequestBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PSessionRequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionRequestBody)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.peer_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.build_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.encrypted_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.encryption_my_ephemeral_public_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.challenge_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.client_connection_id_) -
        reinterpret_cast<char*>(&_impl_.challenge_)) + sizeof(_impl_.client_connection_id_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.legacy_peer_steam_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.encryption_your_public_key_lead_byte_) -
        reinterpret_cast<char*>(&_impl_.legacy_peer_steam_id_)) + sizeof(_impl_.encryption_your_public_key_lead_byte_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PSessionRequestBody::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 88, 2> CMsgSteamDatagramP2PSessionRequestBody::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294902368,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramP2PSessionRequestBody_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bytes encryption_my_ephemeral_public_key = 16;
    {::_pbi::TcParser::FastBS2,
     {386, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_my_ephemeral_public_key_)}},
    // optional fixed32 challenge_time = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_time_)}},
    // optional fixed64 challenge = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_)}},
    // optional fixed32 client_connection_id = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.client_connection_id_)}},
    // optional fixed64 legacy_peer_steam_id = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.legacy_peer_steam_id_)}},
    // optional fixed32 peer_connection_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_connection_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 protocol_version = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PSessionRequestBody, _impl_.protocol_version_), 10>(),
     {64, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.protocol_version_)}},
    // optional uint64 network_config_version = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CMsgSteamDatagramP2PSessionRequestBody, _impl_.network_config_version_), 11>(),
     {72, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.network_config_version_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string peer_identity_string = 11;
    {::_pbi::TcParser::FastSS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_identity_string_)}},
    // optional string platform = 12;
    {::_pbi::TcParser::FastSS1,
     {98, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.platform_)}},
    // optional string build = 13;
    {::_pbi::TcParser::FastSS1,
     {106, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.build_)}},
    // optional bytes encrypted_data = 14;
    {::_pbi::TcParser::FastBS1,
     {114, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encrypted_data_)}},
    // optional uint32 encryption_your_public_key_lead_byte = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 challenge_time = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_time_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 client_connection_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 legacy_peer_steam_id = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.legacy_peer_steam_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 peer_connection_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_connection_id_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 protocol_version = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.protocol_version_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 network_config_version = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.network_config_version_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string peer_identity_string = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string platform = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.platform_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string build = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.build_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bytes encrypted_data = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encrypted_data_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 encryption_your_public_key_lead_byte = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes encryption_my_ephemeral_public_key = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_my_ephemeral_public_key_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\0\0\0\0\0\0\0\24\10\5\0\0\0\0\0"
    "CMsgSteamDatagramP2PSessionRequestBody"
    "peer_identity_string"
    "platform"
    "build"
  }},
};

::uint8_t* CMsgSteamDatagramP2PSessionRequestBody::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionRequestBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 challenge_time = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_challenge_time(), target);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this->_internal_challenge(), target);
  }

  // optional fixed32 client_connection_id = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this->_internal_client_connection_id(), target);
  }

  // optional fixed64 legacy_peer_steam_id = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this->_internal_legacy_peer_steam_id(), target);
  }

  // optional fixed32 peer_connection_id = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_peer_connection_id(), target);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_protocol_version(), target);
  }

  // optional uint64 network_config_version = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_network_config_version(), target);
  }

  // optional string peer_identity_string = 11;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_peer_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramP2PSessionRequestBody.peer_identity_string");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional string platform = 12;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_platform();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramP2PSessionRequestBody.platform");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string build = 13;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_build();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramP2PSessionRequestBody.build");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional bytes encrypted_data = 14;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_encrypted_data();
    target = stream->WriteBytesMaybeAliased(14, _s, target);
  }

  // optional uint32 encryption_your_public_key_lead_byte = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_encryption_your_public_key_lead_byte(), target);
  }

  // optional bytes encryption_my_ephemeral_public_key = 16;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_encryption_my_ephemeral_public_key();
    target = stream->WriteBytesMaybeAliased(16, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionRequestBody)
  return target;
}

::size_t CMsgSteamDatagramP2PSessionRequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionRequestBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string peer_identity_string = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_peer_identity_string());
    }

    // optional string platform = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_platform());
    }

    // optional string build = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_build());
    }

    // optional bytes encrypted_data = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_encrypted_data());
    }

    // optional bytes encryption_my_ephemeral_public_key = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_encryption_my_ephemeral_public_key());
    }

    // optional fixed64 challenge = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional fixed32 challenge_time = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

    // optional fixed32 client_connection_id = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional fixed64 legacy_peer_steam_id = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }

    // optional fixed32 peer_connection_id = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 5;
    }

    // optional uint32 protocol_version = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol_version());
    }

    // optional uint64 network_config_version = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_network_config_version());
    }

    // optional uint32 encryption_your_public_key_lead_byte = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_encryption_your_public_key_lead_byte());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PSessionRequestBody::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PSessionRequestBody::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PSessionRequestBody::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PSessionRequestBody::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PSessionRequestBody*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PSessionRequestBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionRequestBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_peer_identity_string(from._internal_peer_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_build(from._internal_build());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_encrypted_data(from._internal_encrypted_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_encryption_my_ephemeral_public_key(from._internal_encryption_my_ephemeral_public_key());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.challenge_time_ = from._impl_.challenge_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.legacy_peer_steam_id_ = from._impl_.legacy_peer_steam_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.peer_connection_id_ = from._impl_.peer_connection_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.network_config_version_ = from._impl_.network_config_version_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.encryption_your_public_key_lead_byte_ = from._impl_.encryption_your_public_key_lead_byte_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PSessionRequestBody::CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionRequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PSessionRequestBody::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionRequestBody::InternalSwap(CMsgSteamDatagramP2PSessionRequestBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.peer_identity_string_, lhs_arena,
                                       &other->_impl_.peer_identity_string_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.platform_, lhs_arena,
                                       &other->_impl_.platform_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.build_, lhs_arena,
                                       &other->_impl_.build_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_data_, lhs_arena,
                                       &other->_impl_.encrypted_data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encryption_my_ephemeral_public_key_, lhs_arena,
                                       &other->_impl_.encryption_my_ephemeral_public_key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_)
      + sizeof(CMsgSteamDatagramP2PSessionRequestBody::_impl_.encryption_your_public_key_lead_byte_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_)>(
          reinterpret_cast<char*>(&_impl_.challenge_),
          reinterpret_cast<char*>(&other->_impl_.challenge_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequestBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[30]);
}
// ===================================================================

class CMsgSteamDatagramP2PSessionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PSessionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_._has_bits_);
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramP2PSessionRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramP2PSessionRequest::_Internal::cert(const CMsgSteamDatagramP2PSessionRequest* msg) {
  return *msg->_impl_.cert_;
}
void CMsgSteamDatagramP2PSessionRequest::clear_cert() {
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionRequest)
}
CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(const CMsgSteamDatagramP2PSessionRequest& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramP2PSessionRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.body_){},
      decltype(_impl_.signature_){},
      decltype(_impl_.cert_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.body_.Set(from._internal_body(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.cert_ = new ::CMsgSteamDatagramCertificateSigned(*from._impl_.cert_);
  }

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionRequest)
}
inline void CMsgSteamDatagramP2PSessionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.body_){},
      decltype(_impl_.signature_){},
      decltype(_impl_.cert_){nullptr},
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramP2PSessionRequest::~CMsgSteamDatagramP2PSessionRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PSessionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
  _impl_.signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cert_;
}
void CMsgSteamDatagramP2PSessionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PSessionRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> CMsgSteamDatagramP2PSessionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramP2PSessionRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.cert_)}},
    // optional bytes body = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.body_)}},
    // optional bytes signature = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.signature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.cert_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes body = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes signature = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.signature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramP2PSessionRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cert(this),
        _Internal::cert(this).GetCachedSize(), target, stream);
  }

  // optional bytes body = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_body();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionRequest)
  return target;
}

::size_t CMsgSteamDatagramP2PSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes body = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_body());
    }

    // optional bytes signature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_signature());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cert_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PSessionRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PSessionRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PSessionRequest::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PSessionRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PSessionRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(
          from._internal_cert());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PSessionRequest::CopyFrom(const CMsgSteamDatagramP2PSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PSessionRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionRequest::InternalSwap(CMsgSteamDatagramP2PSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, lhs_arena,
                                       &other->_impl_.body_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  swap(_impl_.cert_, other->_impl_.cert_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[31]);
}
// ===================================================================

class CMsgSteamDatagramP2PSessionEstablished::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PSessionEstablished>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seq_num_r2c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionEstablished)
}
CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(const CMsgSteamDatagramP2PSessionEstablished& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramP2PSessionEstablished* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.relay_routing_token_){},
      decltype(_impl_.connection_id_){},
      decltype(_impl_.seconds_until_shutdown_){},
      decltype(_impl_.seq_num_r2c_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.relay_routing_token_.Set(from._internal_relay_routing_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.connection_id_, &from._impl_.connection_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.seq_num_r2c_) -
    reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.seq_num_r2c_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionEstablished)
}
inline void CMsgSteamDatagramP2PSessionEstablished::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.relay_routing_token_){},
      decltype(_impl_.connection_id_){0u},
      decltype(_impl_.seconds_until_shutdown_){0u},
      decltype(_impl_.seq_num_r2c_){0u},
  };
  _impl_.relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramP2PSessionEstablished::~CMsgSteamDatagramP2PSessionEstablished() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionEstablished)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PSessionEstablished::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relay_routing_token_.Destroy();
}
void CMsgSteamDatagramP2PSessionEstablished::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionEstablished)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_r2c_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.seq_num_r2c_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PSessionEstablished::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 0, 2> CMsgSteamDatagramP2PSessionEstablished::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967266,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramP2PSessionEstablished_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.connection_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seconds_until_shutdown = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PSessionEstablished, _impl_.seconds_until_shutdown_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seconds_until_shutdown_)}},
    // optional bytes relay_routing_token = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.relay_routing_token_)}},
    // optional uint32 seq_num_r2c = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.connection_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seconds_until_shutdown = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes relay_routing_token = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.relay_routing_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 seq_num_r2c = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramP2PSessionEstablished::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionEstablished)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_connection_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_seconds_until_shutdown(), target);
  }

  // optional bytes relay_routing_token = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional uint32 seq_num_r2c = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_seq_num_r2c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionEstablished)
  return target;
}

::size_t CMsgSteamDatagramP2PSessionEstablished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionEstablished)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes relay_routing_token = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_relay_routing_token());
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional uint32 seconds_until_shutdown = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seconds_until_shutdown());
    }

    // optional uint32 seq_num_r2c = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_r2c());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PSessionEstablished::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PSessionEstablished::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PSessionEstablished::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PSessionEstablished::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PSessionEstablished*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PSessionEstablished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionEstablished)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_relay_routing_token(from._internal_relay_routing_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seq_num_r2c_ = from._impl_.seq_num_r2c_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PSessionEstablished::CopyFrom(const CMsgSteamDatagramP2PSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PSessionEstablished::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionEstablished::InternalSwap(CMsgSteamDatagramP2PSessionEstablished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relay_routing_token_, lhs_arena,
                                       &other->_impl_.relay_routing_token_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_)
      + sizeof(CMsgSteamDatagramP2PSessionEstablished::_impl_.seq_num_r2c_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionEstablished::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[32]);
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsP2PClientToRouter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing_summary(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg);
  static void set_has_p2p_routing_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_forward_target_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_forward_target_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_routes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ack_peer_routes_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_seq_num_c2r(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
  return *msg->_impl_.quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
  return *msg->_impl_.quality_e2e_;
}
const ::CMsgSteamDatagramP2PRoutingSummary& CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal::p2p_routing_summary(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
  return *msg->_impl_.p2p_routing_summary_;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_relay() {
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_e2e() {
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}
CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectionStatsP2PClientToRouter* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){from._impl_.ack_relay_},
      decltype(_impl_.legacy_ack_e2e_){from._impl_.legacy_ack_e2e_},
      decltype(_impl_.forward_target_relay_routing_token_){},
      decltype(_impl_.routes_){},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.p2p_routing_summary_){nullptr},
      decltype(_impl_.flags_){},
      decltype(_impl_.forward_target_revision_){},
      decltype(_impl_.ack_peer_routes_revision_){},
      decltype(_impl_.connection_id_){},
      decltype(_impl_.seq_num_c2r_){},
      decltype(_impl_.seq_num_e2e_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.forward_target_relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.forward_target_relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.forward_target_relay_routing_token_.Set(from._internal_forward_target_relay_routing_token(), _this->GetArenaForAllocation());
  }
  _impl_.routes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.routes_.Set(from._internal_routes(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_relay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_e2e_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.p2p_routing_summary_ = new ::CMsgSteamDatagramP2PRoutingSummary(*from._impl_.p2p_routing_summary_);
  }
  ::memcpy(&_impl_.flags_, &from._impl_.flags_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
    reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.seq_num_e2e_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){arena},
      decltype(_impl_.legacy_ack_e2e_){arena},
      decltype(_impl_.forward_target_relay_routing_token_){},
      decltype(_impl_.routes_){},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.p2p_routing_summary_){nullptr},
      decltype(_impl_.flags_){0u},
      decltype(_impl_.forward_target_revision_){0u},
      decltype(_impl_.ack_peer_routes_revision_){0u},
      decltype(_impl_.connection_id_){0u},
      decltype(_impl_.seq_num_c2r_){0u},
      decltype(_impl_.seq_num_e2e_){0u},
  };
  _impl_.forward_target_relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.forward_target_relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramConnectionStatsP2PClientToRouter::~CMsgSteamDatagramConnectionStatsP2PClientToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_relay_.~RepeatedField();
  _impl_.legacy_ack_e2e_.~RepeatedField();
  _impl_.forward_target_relay_routing_token_.Destroy();
  _impl_.routes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quality_relay_;
  if (this != internal_default_instance()) delete _impl_.quality_e2e_;
  if (this != internal_default_instance()) delete _impl_.p2p_routing_summary_;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsP2PClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ack_relay()->Clear();
  _internal_mutable_legacy_ack_e2e()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.forward_target_relay_routing_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.routes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.p2p_routing_summary_ != nullptr);
      _impl_.p2p_routing_summary_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.flags_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ack_peer_routes_revision_) -
        reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.ack_peer_routes_revision_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.seq_num_e2e_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsP2PClientToRouter::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 3, 0, 2> CMsgSteamDatagramConnectionStatsP2PClientToRouter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294955008,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 3, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_e2e_)}},
    // repeated fixed32 ack_relay = 3;
    {::_pbi::TcParser::FastF32R1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 4;
    {::_pbi::TcParser::FastF32R1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.flags_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.flags_)}},
    // optional bytes forward_target_relay_routing_token = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_relay_routing_token_)}},
    // optional uint32 forward_target_revision = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_revision_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_revision_)}},
    // optional bytes routes = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.routes_)}},
    // optional uint32 ack_peer_routes_revision = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_peer_routes_revision_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_peer_routes_revision_)}},
    // optional fixed32 connection_id = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.connection_id_)}},
    // optional uint32 seq_num_c2r = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_c2r_), 9>(),
     {88, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_c2r_)}},
    // optional uint32 seq_num_e2e = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_), 10>(),
     {96, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 4, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.p2p_routing_summary_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_relay_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated fixed32 ack_relay = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.flags_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes forward_target_relay_routing_token = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_relay_routing_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 forward_target_revision = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_revision_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes routes = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.routes_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 ack_peer_routes_revision = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_peer_routes_revision_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 connection_id = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.connection_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seq_num_c2r = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_c2r_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.p2p_routing_summary_), _Internal::kHasBitsOffset + 4, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramConnectionStatsP2PClientToRouter::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::quality_relay(this),
        _Internal::quality_relay(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quality_e2e(this),
        _Internal::quality_e2e(this).GetCachedSize(), target, stream);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this->_internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this->_internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_flags(), target);
  }

  // optional bytes forward_target_relay_routing_token = 6;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_forward_target_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // optional uint32 forward_target_revision = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_forward_target_revision(), target);
  }

  // optional bytes routes = 8;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_routes();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // optional uint32 ack_peer_routes_revision = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this->_internal_connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_seq_num_c2r(), target);
  }

  // optional uint32 seq_num_e2e = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_seq_num_e2e(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::p2p_routing_summary(this),
        _Internal::p2p_routing_summary(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  return target;
}

::size_t CMsgSteamDatagramConnectionStatsP2PClientToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated fixed32 legacy_ack_e2e = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes forward_target_relay_routing_token = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_forward_target_relay_routing_token());
    }

    // optional bytes routes = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_routes());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_e2e_);
    }

    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.p2p_routing_summary_);
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 forward_target_revision = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_forward_target_revision());
    }

    // optional uint32 ack_peer_routes_revision = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ack_peer_routes_revision());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional fixed32 connection_id = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 5;
    }

    // optional uint32 seq_num_c2r = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_c2r());
    }

    // optional uint32 seq_num_e2e = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_e2e());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectionStatsP2PClientToRouter::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectionStatsP2PClientToRouter::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsP2PClientToRouter*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsP2PClientToRouter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_forward_target_relay_routing_token(from._internal_forward_target_relay_routing_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_routes(from._internal_routes());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_p2p_routing_summary()->::CMsgSteamDatagramP2PRoutingSummary::MergeFrom(
          from._internal_p2p_routing_summary());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.forward_target_revision_ = from._impl_.forward_target_revision_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ack_peer_routes_revision_ = from._impl_.ack_peer_routes_revision_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.seq_num_c2r_ = from._impl_.seq_num_c2r_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forward_target_relay_routing_token_, lhs_arena,
                                       &other->_impl_.forward_target_relay_routing_token_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routes_, lhs_arena,
                                       &other->_impl_.routes_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsP2PClientToRouter::_impl_.seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PClientToRouter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[33]);
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsP2PRouterToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionStatsP2PRouterToClient>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg);
  static void set_has_quality_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg);
  static void set_has_quality_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_until_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_migrate_request_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_migrate_request_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scoring_penalty_relay_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ack_forward_target_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_routes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack_peer_routes_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_seq_num_r2c(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_seq_num_e2e(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToClient::_Internal::quality_relay(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
  return *msg->_impl_.quality_relay_;
}
const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToClient::_Internal::quality_e2e(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
  return *msg->_impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_relay() {
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_e2e() {
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}
CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramConnectionStatsP2PRouterToClient* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){from._impl_.ack_relay_},
      decltype(_impl_.legacy_ack_e2e_){from._impl_.legacy_ack_e2e_},
      decltype(_impl_.routes_){},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.seconds_until_shutdown_){},
      decltype(_impl_.migrate_request_ip_){},
      decltype(_impl_.migrate_request_port_){},
      decltype(_impl_.scoring_penalty_relay_cluster_){},
      decltype(_impl_.flags_){},
      decltype(_impl_.ack_forward_target_revision_){},
      decltype(_impl_.ack_peer_routes_revision_){},
      decltype(_impl_.connection_id_){},
      decltype(_impl_.seq_num_r2c_){},
      decltype(_impl_.seq_num_e2e_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.routes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.routes_.Set(from._internal_routes(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.quality_relay_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_relay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality(*from._impl_.quality_e2e_);
  }
  ::memcpy(&_impl_.seconds_until_shutdown_, &from._impl_.seconds_until_shutdown_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
    reinterpret_cast<char*>(&_impl_.seconds_until_shutdown_)) + sizeof(_impl_.seq_num_e2e_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ack_relay_){arena},
      decltype(_impl_.legacy_ack_e2e_){arena},
      decltype(_impl_.routes_){},
      decltype(_impl_.quality_relay_){nullptr},
      decltype(_impl_.quality_e2e_){nullptr},
      decltype(_impl_.seconds_until_shutdown_){0u},
      decltype(_impl_.migrate_request_ip_){0u},
      decltype(_impl_.migrate_request_port_){0u},
      decltype(_impl_.scoring_penalty_relay_cluster_){0u},
      decltype(_impl_.flags_){0u},
      decltype(_impl_.ack_forward_target_revision_){0u},
      decltype(_impl_.ack_peer_routes_revision_){0u},
      decltype(_impl_.connection_id_){0u},
      decltype(_impl_.seq_num_r2c_){0u},
      decltype(_impl_.seq_num_e2e_){0u},
  };
  _impl_.routes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramConnectionStatsP2PRouterToClient::~CMsgSteamDatagramConnectionStatsP2PRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_relay_.~RepeatedField();
  _impl_.legacy_ack_e2e_.~RepeatedField();
  _impl_.routes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quality_relay_;
  if (this != internal_default_instance()) delete _impl_.quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsP2PRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ack_relay()->Clear();
  _internal_mutable_legacy_ack_e2e()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.routes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.seconds_until_shutdown_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.seconds_until_shutdown_)) + sizeof(_impl_.flags_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.ack_forward_target_revision_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
        reinterpret_cast<char*>(&_impl_.ack_forward_target_revision_)) + sizeof(_impl_.seq_num_e2e_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionStatsP2PRouterToClient::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 2, 0, 2> CMsgSteamDatagramConnectionStatsP2PRouterToClient::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_e2e_)}},
    // optional uint32 seconds_until_shutdown = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seconds_until_shutdown_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seconds_until_shutdown_)}},
    // optional fixed32 migrate_request_ip = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_ip_)}},
    // optional uint32 migrate_request_port = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_port_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_port_)}},
    // optional uint32 scoring_penalty_relay_cluster = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.scoring_penalty_relay_cluster_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.scoring_penalty_relay_cluster_)}},
    // repeated fixed32 ack_relay = 7;
    {::_pbi::TcParser::FastF32R1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 8;
    {::_pbi::TcParser::FastF32R1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.flags_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.flags_)}},
    // optional uint32 ack_forward_target_revision = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_forward_target_revision_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_forward_target_revision_)}},
    // optional bytes routes = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.routes_)}},
    // optional uint32 ack_peer_routes_revision = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_peer_routes_revision_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_peer_routes_revision_)}},
    // optional fixed32 connection_id = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.connection_id_)}},
    // optional uint32 seq_num_r2c = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_r2c_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_r2c_)}},
    // optional uint32 seq_num_e2e = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_relay_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 seconds_until_shutdown = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 migrate_request_ip = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_ip_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 migrate_request_port = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_port_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 scoring_penalty_relay_cluster = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.scoring_penalty_relay_cluster_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated fixed32 ack_relay = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.flags_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ack_forward_target_revision = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_forward_target_revision_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes routes = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.routes_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 ack_peer_routes_revision = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_peer_routes_revision_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 connection_id = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.connection_id_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seq_num_r2c = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_r2c_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramConnectionStatsP2PRouterToClient::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::quality_relay(this),
        _Internal::quality_relay(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quality_e2e(this),
        _Internal::quality_e2e(this).GetCachedSize(), target, stream);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 migrate_request_ip = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this->_internal_migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 7;
  for (int i = 0, n = this->_internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this->_internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  for (int i = 0, n = this->_internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this->_internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_flags(), target);
  }

  // optional uint32 ack_forward_target_revision = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_ack_forward_target_revision(), target);
  }

  // optional bytes routes = 11;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_routes();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // optional uint32 ack_peer_routes_revision = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        13, this->_internal_connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_seq_num_r2c(), target);
  }

  // optional uint32 seq_num_e2e = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_seq_num_e2e(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  return target;
}

::size_t CMsgSteamDatagramConnectionStatsP2PRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 7;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_ack_relay_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated fixed32 legacy_ack_e2e = 8;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_legacy_ack_e2e_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes routes = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_routes());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_relay_);
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.quality_e2e_);
    }

    // optional uint32 seconds_until_shutdown = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seconds_until_shutdown());
    }

    // optional fixed32 migrate_request_ip = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional uint32 migrate_request_port = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_migrate_request_port());
    }

    // optional uint32 scoring_penalty_relay_cluster = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_scoring_penalty_relay_cluster());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 ack_forward_target_revision = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ack_forward_target_revision());
    }

    // optional uint32 ack_peer_routes_revision = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ack_peer_routes_revision());
    }

    // optional fixed32 connection_id = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 5;
    }

    // optional uint32 seq_num_r2c = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_r2c());
    }

    // optional uint32 seq_num_e2e = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_num_e2e());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramConnectionStatsP2PRouterToClient::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramConnectionStatsP2PRouterToClient::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsP2PRouterToClient*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsP2PRouterToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_routes(from._internal_routes());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_relay());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(
          from._internal_quality_e2e());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.migrate_request_ip_ = from._impl_.migrate_request_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.migrate_request_port_ = from._impl_.migrate_request_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.scoring_penalty_relay_cluster_ = from._impl_.scoring_penalty_relay_cluster_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.ack_forward_target_revision_ = from._impl_.ack_forward_target_revision_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ack_peer_routes_revision_ = from._impl_.ack_peer_routes_revision_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.seq_num_r2c_ = from._impl_.seq_num_r2c_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routes_, lhs_arena,
                                       &other->_impl_.routes_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsP2PRouterToClient::_impl_.seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PRouterToClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[34]);
}
// ===================================================================

class CMsgSteamDatagramP2PBadRouteRouterToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PBadRouteRouterToClient>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_failed_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack_forward_target_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kludge_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
}
CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramP2PBadRouteRouterToClient* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.failed_relay_routing_token_){},
      decltype(_impl_.connection_id_){},
      decltype(_impl_.ack_forward_target_revision_){},
      decltype(_impl_.kludge_pad_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.failed_relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.failed_relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.failed_relay_routing_token_.Set(from._internal_failed_relay_routing_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.connection_id_, &from._impl_.connection_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.kludge_pad_) -
    reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.kludge_pad_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.failed_relay_routing_token_){},
      decltype(_impl_.connection_id_){0u},
      decltype(_impl_.ack_forward_target_revision_){0u},
      decltype(_impl_.kludge_pad_){::uint64_t{0u}},
  };
  _impl_.failed_relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.failed_relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramP2PBadRouteRouterToClient::~CMsgSteamDatagramP2PBadRouteRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.failed_relay_routing_token_.Destroy();
}
void CMsgSteamDatagramP2PBadRouteRouterToClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PBadRouteRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.failed_relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.kludge_pad_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.kludge_pad_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PBadRouteRouterToClient::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 7> CMsgSteamDatagramP2PBadRouteRouterToClient::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_._has_bits_),
    0, // no _extensions_
    99, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.connection_id_)}},
    // optional bytes failed_relay_routing_token = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.failed_relay_routing_token_)}},
    // optional uint32 ack_forward_target_revision = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.ack_forward_target_revision_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.ack_forward_target_revision_)}},
  }}, {{
    99, 0, 1,
    65534, 3,
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.connection_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional bytes failed_relay_routing_token = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.failed_relay_routing_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 ack_forward_target_revision = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.ack_forward_target_revision_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 kludge_pad = 99;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.kludge_pad_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramP2PBadRouteRouterToClient::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_connection_id(), target);
  }

  // optional bytes failed_relay_routing_token = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_failed_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional uint32 ack_forward_target_revision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_ack_forward_target_revision(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        99, this->_internal_kludge_pad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PBadRouteRouterToClient)
  return target;
}

::size_t CMsgSteamDatagramP2PBadRouteRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes failed_relay_routing_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_failed_relay_routing_token());
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional uint32 ack_forward_target_revision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ack_forward_target_revision());
    }

    // optional fixed64 kludge_pad = 99;
    if (cached_has_bits & 0x00000008u) {
      total_size += 10;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PBadRouteRouterToClient::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PBadRouteRouterToClient::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PBadRouteRouterToClient::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PBadRouteRouterToClient::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PBadRouteRouterToClient*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PBadRouteRouterToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_failed_relay_routing_token(from._internal_failed_relay_routing_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ack_forward_target_revision_ = from._impl_.ack_forward_target_revision_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kludge_pad_ = from._impl_.kludge_pad_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PBadRouteRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::InternalSwap(CMsgSteamDatagramP2PBadRouteRouterToClient* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.failed_relay_routing_token_, lhs_arena,
                                       &other->_impl_.failed_relay_routing_token_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.kludge_pad_)
      + sizeof(CMsgSteamDatagramP2PBadRouteRouterToClient::_impl_.kludge_pad_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PBadRouteRouterToClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[35]);
}
// ===================================================================

class CMsgSteamDatagramP2PRoutes_RelayCluster::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PRoutes_RelayCluster>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_._has_bits_);
  static void set_has_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_session_relay_routing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
}
CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramP2PRoutes_RelayCluster* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.session_relay_routing_token_){},
      decltype(_impl_.pop_id_){},
      decltype(_impl_.ping_ms_){},
      decltype(_impl_.score_penalty_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.session_relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.session_relay_routing_token_.Set(from._internal_session_relay_routing_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pop_id_, &from._impl_.pop_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.score_penalty_) -
    reinterpret_cast<char*>(&_impl_.pop_id_)) + sizeof(_impl_.score_penalty_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.session_relay_routing_token_){},
      decltype(_impl_.pop_id_){0u},
      decltype(_impl_.ping_ms_){0u},
      decltype(_impl_.score_penalty_){0u},
  };
  _impl_.session_relay_routing_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_relay_routing_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramP2PRoutes_RelayCluster::~CMsgSteamDatagramP2PRoutes_RelayCluster() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_relay_routing_token_.Destroy();
}
void CMsgSteamDatagramP2PRoutes_RelayCluster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PRoutes_RelayCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.session_relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.pop_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.score_penalty_) -
        reinterpret_cast<char*>(&_impl_.pop_id_)) + sizeof(_impl_.score_penalty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> CMsgSteamDatagramP2PRoutes_RelayCluster::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bytes session_relay_routing_token = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.session_relay_routing_token_)}},
    // optional fixed32 pop_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.pop_id_)}},
    // optional uint32 ping_ms = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.ping_ms_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.ping_ms_)}},
    // optional uint32 score_penalty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 pop_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.pop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 ping_ms = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.ping_ms_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 score_penalty = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes session_relay_routing_token = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.session_relay_routing_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 pop_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_pop_id(), target);
  }

  // optional uint32 ping_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_ping_ms(), target);
  }

  // optional uint32 score_penalty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_score_penalty(), target);
  }

  // optional bytes session_relay_routing_token = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_session_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes.RelayCluster)
  return target;
}

::size_t CMsgSteamDatagramP2PRoutes_RelayCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes session_relay_routing_token = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_session_relay_routing_token());
    }

    // optional fixed32 pop_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional uint32 ping_ms = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ping_ms());
    }

    // optional uint32 score_penalty = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_score_penalty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PRoutes_RelayCluster::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PRoutes_RelayCluster::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PRoutes_RelayCluster::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PRoutes_RelayCluster::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PRoutes_RelayCluster*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PRoutes_RelayCluster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_session_relay_routing_token(from._internal_session_relay_routing_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pop_id_ = from._impl_.pop_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ping_ms_ = from._impl_.ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.score_penalty_ = from._impl_.score_penalty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::CopyFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PRoutes_RelayCluster::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::InternalSwap(CMsgSteamDatagramP2PRoutes_RelayCluster* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_relay_routing_token_, lhs_arena,
                                       &other->_impl_.session_relay_routing_token_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_)
      + sizeof(CMsgSteamDatagramP2PRoutes_RelayCluster::_impl_.score_penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.pop_id_)>(
          reinterpret_cast<char*>(&_impl_.pop_id_),
          reinterpret_cast<char*>(&other->_impl_.pop_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes_RelayCluster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[36]);
}
// ===================================================================

class CMsgSteamDatagramP2PRoutes_Route::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PRoutes_Route>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_._has_bits_);
  static void set_has_my_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_your_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interior_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes.Route)
}
CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(const CMsgSteamDatagramP2PRoutes_Route& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutes.Route)
}
inline void CMsgSteamDatagramP2PRoutes_Route::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.my_pop_id_){0u},
      decltype(_impl_.your_pop_id_){0u},
      decltype(_impl_.legacy_score_){0u},
      decltype(_impl_.interior_score_){0u},
  };
}
CMsgSteamDatagramP2PRoutes_Route::~CMsgSteamDatagramP2PRoutes_Route() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes.Route)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PRoutes_Route::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgSteamDatagramP2PRoutes_Route::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PRoutes_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes.Route)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.my_pop_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.interior_score_) -
        reinterpret_cast<char*>(&_impl_.my_pop_id_)) + sizeof(_impl_.interior_score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PRoutes_Route::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> CMsgSteamDatagramP2PRoutes_Route::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramP2PRoutes_Route_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 interior_score = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_)}},
    // optional fixed32 my_pop_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.my_pop_id_)}},
    // optional fixed32 your_pop_id = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.your_pop_id_)}},
    // optional uint32 legacy_score = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes_Route, _impl_.legacy_score_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.legacy_score_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 my_pop_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.my_pop_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 your_pop_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.your_pop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 legacy_score = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.legacy_score_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 interior_score = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramP2PRoutes_Route::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes.Route)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 my_pop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_my_pop_id(), target);
  }

  // optional fixed32 your_pop_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_your_pop_id(), target);
  }

  // optional uint32 legacy_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_legacy_score(), target);
  }

  // optional uint32 interior_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_interior_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes.Route)
  return target;
}

::size_t CMsgSteamDatagramP2PRoutes_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes.Route)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 my_pop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional fixed32 your_pop_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional uint32 legacy_score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_legacy_score());
    }

    // optional uint32 interior_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_interior_score());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PRoutes_Route::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PRoutes_Route::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PRoutes_Route::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PRoutes_Route::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PRoutes_Route*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PRoutes_Route&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes.Route)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.my_pop_id_ = from._impl_.my_pop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.your_pop_id_ = from._impl_.your_pop_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.legacy_score_ = from._impl_.legacy_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.interior_score_ = from._impl_.interior_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PRoutes_Route::CopyFrom(const CMsgSteamDatagramP2PRoutes_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PRoutes_Route::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes_Route::InternalSwap(CMsgSteamDatagramP2PRoutes_Route* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_)
      + sizeof(CMsgSteamDatagramP2PRoutes_Route::_impl_.interior_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.my_pop_id_)>(
          reinterpret_cast<char*>(&_impl_.my_pop_id_),
          reinterpret_cast<char*>(&other->_impl_.my_pop_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes_Route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[37]);
}
// ===================================================================

class CMsgSteamDatagramP2PRoutes::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramP2PRoutes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_._has_bits_);
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes)
}
CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(const CMsgSteamDatagramP2PRoutes& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramP2PRoutes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.relay_clusters_){from._impl_.relay_clusters_},
      decltype(_impl_.routes_){from._impl_.routes_},
      decltype(_impl_.revision_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.revision_ = from._impl_.revision_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutes)
}
inline void CMsgSteamDatagramP2PRoutes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.relay_clusters_){arena},
      decltype(_impl_.routes_){arena},
      decltype(_impl_.revision_){0u},
  };
}
CMsgSteamDatagramP2PRoutes::~CMsgSteamDatagramP2PRoutes() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramP2PRoutes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relay_clusters_.~RepeatedPtrField();
  _impl_.routes_.~RepeatedPtrField();
}
void CMsgSteamDatagramP2PRoutes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramP2PRoutes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relay_clusters()->Clear();
  _internal_mutable_routes()->Clear();
  _impl_.revision_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramP2PRoutes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> CMsgSteamDatagramP2PRoutes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramP2PRoutes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.relay_clusters_)}},
    // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.routes_)}},
    // optional uint32 revision = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes, _impl_.revision_), 0>(),
     {24, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.revision_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.relay_clusters_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.routes_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 revision = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.revision_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutes_RelayCluster>()},
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutes_Route>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramP2PRoutes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relay_clusters_size()); i < n; i++) {
    const auto& repfield = this->_internal_relay_clusters().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 revision = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes)
  return target;
}

::size_t CMsgSteamDatagramP2PRoutes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  total_size += 1UL * this->_internal_relay_clusters_size();
  for (const auto& msg : this->_internal_relay_clusters()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->_internal_routes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional uint32 revision = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_revision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramP2PRoutes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramP2PRoutes::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramP2PRoutes::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramP2PRoutes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PRoutes*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PRoutes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relay_clusters()->MergeFrom(from._internal_relay_clusters());
  _this->_internal_mutable_routes()->MergeFrom(from._internal_routes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_revision(from._internal_revision());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PRoutes::CopyFrom(const CMsgSteamDatagramP2PRoutes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramP2PRoutes::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes::InternalSwap(CMsgSteamDatagramP2PRoutes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.relay_clusters_.InternalSwap(&other->_impl_.relay_clusters_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
        swap(_impl_.revision_, other->_impl_.revision_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[38]);
}
// ===================================================================

class CMsgSteamDatagramSetSecondaryAddressRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSetSecondaryAddressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_._has_bits_);
  static void set_has_client_main_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_main_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_send_duplication(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kludge_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSetSecondaryAddressRequest)
}
CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(const CMsgSteamDatagramSetSecondaryAddressRequest& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramSetSecondaryAddressRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.client_identity_){},
      decltype(_impl_.kludge_pad_){},
      decltype(_impl_.client_main_ip_){},
      decltype(_impl_.client_main_port_){},
      decltype(_impl_.client_connection_id_){},
      decltype(_impl_.request_send_duplication_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.client_identity_.Set(from._internal_client_identity(), _this->GetArenaForAllocation());
  }
  _impl_.kludge_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.kludge_pad_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.kludge_pad_.Set(from._internal_kludge_pad(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.client_main_ip_, &from._impl_.client_main_ip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.request_send_duplication_) -
    reinterpret_cast<char*>(&_impl_.client_main_ip_)) + sizeof(_impl_.request_send_duplication_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSetSecondaryAddressRequest)
}
inline void CMsgSteamDatagramSetSecondaryAddressRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.client_identity_){},
      decltype(_impl_.kludge_pad_){},
      decltype(_impl_.client_main_ip_){0u},
      decltype(_impl_.client_main_port_){0u},
      decltype(_impl_.client_connection_id_){0u},
      decltype(_impl_.request_send_duplication_){false},
  };
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kludge_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.kludge_pad_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramSetSecondaryAddressRequest::~CMsgSteamDatagramSetSecondaryAddressRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSetSecondaryAddressRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramSetSecondaryAddressRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_identity_.Destroy();
  _impl_.kludge_pad_.Destroy();
}
void CMsgSteamDatagramSetSecondaryAddressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramSetSecondaryAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.client_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.kludge_pad_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.client_main_ip_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.request_send_duplication_) -
        reinterpret_cast<char*>(&_impl_.client_main_ip_)) + sizeof(_impl_.request_send_duplication_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSetSecondaryAddressRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 67, 7> CMsgSteamDatagramSetSecondaryAddressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_._has_bits_),
    0, // no _extensions_
    99, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramSetSecondaryAddressRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_main_ip = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_ip_)}},
    // optional fixed32 client_main_port = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_port_)}},
    // optional fixed32 client_connection_id = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_connection_id_)}},
    // optional string client_identity = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_identity_)}},
    // optional bool request_send_duplication = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    99, 0, 1,
    65534, 5,
    65535, 65535
  }}, {{
    // optional fixed32 client_main_ip = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_ip_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 client_main_port = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_port_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 client_connection_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string client_identity = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_identity_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool request_send_duplication = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bytes kludge_pad = 99;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.kludge_pad_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\0\0\0\17\0\0\0"
    "CMsgSteamDatagramSetSecondaryAddressRequest"
    "client_identity"
  }},
};

::uint8_t* CMsgSteamDatagramSetSecondaryAddressRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 client_main_ip = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_client_main_ip(), target);
  }

  // optional fixed32 client_main_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_client_main_port(), target);
  }

  // optional fixed32 client_connection_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this->_internal_client_connection_id(), target);
  }

  // optional string client_identity = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_client_identity();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramSetSecondaryAddressRequest.client_identity");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool request_send_duplication = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_request_send_duplication(), target);
  }

  // optional bytes kludge_pad = 99;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_kludge_pad();
    target = stream->WriteBytesMaybeAliased(99, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSetSecondaryAddressRequest)
  return target;
}

::size_t CMsgSteamDatagramSetSecondaryAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string client_identity = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_client_identity());
    }

    // optional bytes kludge_pad = 99;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_kludge_pad());
    }

    // optional fixed32 client_main_ip = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional fixed32 client_main_port = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional fixed32 client_connection_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional bool request_send_duplication = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramSetSecondaryAddressRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramSetSecondaryAddressRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramSetSecondaryAddressRequest::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramSetSecondaryAddressRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramSetSecondaryAddressRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramSetSecondaryAddressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_client_identity(from._internal_client_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_kludge_pad(from._internal_kludge_pad());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_main_ip_ = from._impl_.client_main_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_main_port_ = from._impl_.client_main_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.request_send_duplication_ = from._impl_.request_send_duplication_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramSetSecondaryAddressRequest::CopyFrom(const CMsgSteamDatagramSetSecondaryAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramSetSecondaryAddressRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSetSecondaryAddressRequest::InternalSwap(CMsgSteamDatagramSetSecondaryAddressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_identity_, lhs_arena,
                                       &other->_impl_.client_identity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.kludge_pad_, lhs_arena,
                                       &other->_impl_.kludge_pad_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_)
      + sizeof(CMsgSteamDatagramSetSecondaryAddressRequest::_impl_.request_send_duplication_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_ip_)>(
          reinterpret_cast<char*>(&_impl_.client_main_ip_),
          reinterpret_cast<char*>(&other->_impl_.client_main_ip_));
}

::google::protobuf::Metadata CMsgSteamDatagramSetSecondaryAddressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[39]);
}
// ===================================================================

class CMsgSteamDatagramSetSecondaryAddressResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSetSecondaryAddressResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSetSecondaryAddressResult)
}
CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(const CMsgSteamDatagramSetSecondaryAddressResult& from) : ::google::protobuf::Message() {
  CMsgSteamDatagramSetSecondaryAddressResult* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.message_){},
      decltype(_impl_.success_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSetSecondaryAddressResult)
}
inline void CMsgSteamDatagramSetSecondaryAddressResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.message_){},
      decltype(_impl_.success_){false},
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CMsgSteamDatagramSetSecondaryAddressResult::~CMsgSteamDatagramSetSecondaryAddressResult() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSetSecondaryAddressResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramSetSecondaryAddressResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}
void CMsgSteamDatagramSetSecondaryAddressResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgSteamDatagramSetSecondaryAddressResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSetSecondaryAddressResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 58, 2> CMsgSteamDatagramSetSecondaryAddressResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramSetSecondaryAddressResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string message = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.message_)}},
    // optional bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.success_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool success = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.success_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string message = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\0\7\0\0\0\0\0"
    "CMsgSteamDatagramSetSecondaryAddressResult"
    "message"
  }},
};

::uint8_t* CMsgSteamDatagramSetSecondaryAddressResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramSetSecondaryAddressResult.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSetSecondaryAddressResult)
  return target;
}

::size_t CMsgSteamDatagramSetSecondaryAddressResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_message());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramSetSecondaryAddressResult::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgSteamDatagramSetSecondaryAddressResult::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgSteamDatagramSetSecondaryAddressResult::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramSetSecondaryAddressResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramSetSecondaryAddressResult*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramSetSecondaryAddressResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramSetSecondaryAddressResult::CopyFrom(const CMsgSteamDatagramSetSecondaryAddressResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSetSecondaryAddressResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramSetSecondaryAddressResult::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSetSecondaryAddressResult::InternalSwap(CMsgSteamDatagramSetSecondaryAddressResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata CMsgSteamDatagramSetSecondaryAddressResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[40]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
