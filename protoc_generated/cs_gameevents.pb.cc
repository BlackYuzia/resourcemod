// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_gameevents.proto

#include "cs_gameevents.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR CMsgTEPlayerAnimEvent::CMsgTEPlayerAnimEvent(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.event_)*/ 0u,
      /*decltype(_impl_.data_)*/ 0,
      /*decltype(_impl_.player_)*/ 16777215u,
    } {}
struct CMsgTEPlayerAnimEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTEPlayerAnimEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTEPlayerAnimEventDefaultTypeInternal() {}
  union {
    CMsgTEPlayerAnimEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTEPlayerAnimEventDefaultTypeInternal _CMsgTEPlayerAnimEvent_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgTERadioIcon::CMsgTERadioIcon(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.player_)*/ 16777215u,
    } {}
struct CMsgTERadioIconDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTERadioIconDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTERadioIconDefaultTypeInternal() {}
  union {
    CMsgTERadioIcon _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTERadioIconDefaultTypeInternal _CMsgTERadioIcon_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CMsgTEFireBullets::CMsgTEFireBullets(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.origin_)*/ nullptr,
      /*decltype(_impl_.angles_)*/ nullptr,
      /*decltype(_impl_.ent_origin_)*/ nullptr,
      /*decltype(_impl_.mode_)*/ 0u,
      /*decltype(_impl_.seed_)*/ 0u,
      /*decltype(_impl_.inaccuracy_)*/ 0,
      /*decltype(_impl_.recoil_index_)*/ 0,
      /*decltype(_impl_.spread_)*/ 0,
      /*decltype(_impl_.sound_type_)*/ 0,
      /*decltype(_impl_.item_def_index_)*/ 0u,
      /*decltype(_impl_.sound_dsp_effect_)*/ 0u,
      /*decltype(_impl_.num_bullets_remaining_)*/ 0u,
      /*decltype(_impl_.weapon_id_)*/ 16777215u,
      /*decltype(_impl_.player_)*/ 16777215u,
    } {}
struct CMsgTEFireBulletsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTEFireBulletsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTEFireBulletsDefaultTypeInternal() {}
  union {
    CMsgTEFireBullets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTEFireBulletsDefaultTypeInternal _CMsgTEFireBullets_default_instance_;
static ::_pb::Metadata file_level_metadata_cs_5fgameevents_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cs_5fgameevents_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cs_5fgameevents_2eproto = nullptr;
const ::uint32_t TableStruct_cs_5fgameevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CMsgTEPlayerAnimEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEPlayerAnimEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgTEPlayerAnimEvent, _impl_.player_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEPlayerAnimEvent, _impl_.event_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEPlayerAnimEvent, _impl_.data_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::CMsgTERadioIcon, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgTERadioIcon, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgTERadioIcon, _impl_.player_),
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.origin_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.angles_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.weapon_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.seed_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.player_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.inaccuracy_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.recoil_index_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.spread_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.sound_type_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.item_def_index_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.sound_dsp_effect_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.ent_origin_),
    PROTOBUF_FIELD_OFFSET(::CMsgTEFireBullets, _impl_.num_bullets_remaining_),
    0,
    1,
    12,
    3,
    4,
    13,
    5,
    6,
    7,
    8,
    9,
    10,
    2,
    11,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::CMsgTEPlayerAnimEvent)},
        {14, 23, -1, sizeof(::CMsgTERadioIcon)},
        {24, 46, -1, sizeof(::CMsgTEFireBullets)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_CMsgTEPlayerAnimEvent_default_instance_._instance,
    &::_CMsgTERadioIcon_default_instance_._instance,
    &::_CMsgTEFireBullets_default_instance_._instance,
};
const char descriptor_table_protodef_cs_5fgameevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023cs_gameevents.proto\032\026networkbasetypes."
    "proto\"N\n\025CMsgTEPlayerAnimEvent\022\030\n\006player"
    "\030\001 \001(\007:\01016777215\022\r\n\005event\030\002 \001(\r\022\014\n\004data\030"
    "\003 \001(\005\"+\n\017CMsgTERadioIcon\022\030\n\006player\030\001 \001(\007"
    ":\01016777215\"\340\002\n\021CMsgTEFireBullets\022\033\n\006orig"
    "in\030\001 \001(\0132\013.CMsgVector\022\033\n\006angles\030\002 \001(\0132\013."
    "CMsgQAngle\022\033\n\tweapon_id\030\003 \001(\r:\01016777215\022"
    "\014\n\004mode\030\004 \001(\r\022\014\n\004seed\030\005 \001(\r\022\030\n\006player\030\006 "
    "\001(\007:\01016777215\022\022\n\ninaccuracy\030\007 \001(\002\022\024\n\014rec"
    "oil_index\030\010 \001(\002\022\016\n\006spread\030\t \001(\002\022\022\n\nsound"
    "_type\030\n \001(\005\022\026\n\016item_def_index\030\013 \001(\r\022\030\n\020s"
    "ound_dsp_effect\030\014 \001(\007\022\037\n\nent_origin\030\r \001("
    "\0132\013.CMsgVector\022\035\n\025num_bullets_remaining\030"
    "\016 \001(\r*]\n\017ECsgoGameEvents\022\031\n\024GE_PlayerAni"
    "mEventId\020\302\003\022\030\n\023GE_RadioIconEventId\020\303\003\022\025\n"
    "\020GE_FireBulletsId\020\304\003"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cs_5fgameevents_2eproto_deps[1] =
    {
        &::descriptor_table_networkbasetypes_2eproto,
};
static ::absl::once_flag descriptor_table_cs_5fgameevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cs_5fgameevents_2eproto = {
    false,
    false,
    620,
    descriptor_table_protodef_cs_5fgameevents_2eproto,
    "cs_gameevents.proto",
    &descriptor_table_cs_5fgameevents_2eproto_once,
    descriptor_table_cs_5fgameevents_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_cs_5fgameevents_2eproto::offsets,
    file_level_metadata_cs_5fgameevents_2eproto,
    file_level_enum_descriptors_cs_5fgameevents_2eproto,
    file_level_service_descriptors_cs_5fgameevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cs_5fgameevents_2eproto_getter() {
  return &descriptor_table_cs_5fgameevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cs_5fgameevents_2eproto(&descriptor_table_cs_5fgameevents_2eproto);
const ::google::protobuf::EnumDescriptor* ECsgoGameEvents_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_cs_5fgameevents_2eproto);
  return file_level_enum_descriptors_cs_5fgameevents_2eproto[0];
}
bool ECsgoGameEvents_IsValid(int value) {
  switch (value) {
    case 450:
    case 451:
    case 452:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class CMsgTEPlayerAnimEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTEPlayerAnimEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_._has_bits_);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgTEPlayerAnimEvent::CMsgTEPlayerAnimEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTEPlayerAnimEvent)
}
CMsgTEPlayerAnimEvent::CMsgTEPlayerAnimEvent(const CMsgTEPlayerAnimEvent& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTEPlayerAnimEvent)
}
inline void CMsgTEPlayerAnimEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.event_){0u},
      decltype(_impl_.data_){0},
      decltype(_impl_.player_){16777215u},
  };
}
CMsgTEPlayerAnimEvent::~CMsgTEPlayerAnimEvent() {
  // @@protoc_insertion_point(destructor:CMsgTEPlayerAnimEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgTEPlayerAnimEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgTEPlayerAnimEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgTEPlayerAnimEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTEPlayerAnimEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.event_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.data_) -
        reinterpret_cast<char*>(&_impl_.event_)) + sizeof(_impl_.data_));
    _impl_.player_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgTEPlayerAnimEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> CMsgTEPlayerAnimEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgTEPlayerAnimEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 player = 1 [default = 16777215];
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_.player_)}},
    // optional uint32 event = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgTEPlayerAnimEvent, _impl_.event_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_.event_)}},
    // optional int32 data = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgTEPlayerAnimEvent, _impl_.data_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 player = 1 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_.player_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 event = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_.event_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 data = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_.data_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgTEPlayerAnimEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTEPlayerAnimEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 player = 1 [default = 16777215];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_player(), target);
  }

  // optional uint32 event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_event(), target);
  }

  // optional int32 data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTEPlayerAnimEvent)
  return target;
}

::size_t CMsgTEPlayerAnimEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTEPlayerAnimEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_event());
    }

    // optional int32 data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_data());
    }

    // optional fixed32 player = 1 [default = 16777215];
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgTEPlayerAnimEvent::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgTEPlayerAnimEvent::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgTEPlayerAnimEvent::GetClassData() const { return &_class_data_; }


void CMsgTEPlayerAnimEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgTEPlayerAnimEvent*>(&to_msg);
  auto& from = static_cast<const CMsgTEPlayerAnimEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTEPlayerAnimEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_ = from._impl_.event_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_ = from._impl_.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_ = from._impl_.player_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTEPlayerAnimEvent::CopyFrom(const CMsgTEPlayerAnimEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTEPlayerAnimEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgTEPlayerAnimEvent::IsInitialized() const {
  return true;
}

void CMsgTEPlayerAnimEvent::InternalSwap(CMsgTEPlayerAnimEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_.player_)
      + sizeof(CMsgTEPlayerAnimEvent::_impl_.player_)
      - PROTOBUF_FIELD_OFFSET(CMsgTEPlayerAnimEvent, _impl_.event_)>(
          reinterpret_cast<char*>(&_impl_.event_),
          reinterpret_cast<char*>(&other->_impl_.event_));
}

::google::protobuf::Metadata CMsgTEPlayerAnimEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cs_5fgameevents_2eproto_getter, &descriptor_table_cs_5fgameevents_2eproto_once,
      file_level_metadata_cs_5fgameevents_2eproto[0]);
}
// ===================================================================

class CMsgTERadioIcon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTERadioIcon>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgTERadioIcon, _impl_._has_bits_);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTERadioIcon::CMsgTERadioIcon(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTERadioIcon)
}
CMsgTERadioIcon::CMsgTERadioIcon(const CMsgTERadioIcon& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTERadioIcon)
}
inline void CMsgTERadioIcon::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.player_){16777215u},
  };
}
CMsgTERadioIcon::~CMsgTERadioIcon() {
  // @@protoc_insertion_point(destructor:CMsgTERadioIcon)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgTERadioIcon::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CMsgTERadioIcon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgTERadioIcon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTERadioIcon)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_ = 16777215u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgTERadioIcon::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CMsgTERadioIcon::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgTERadioIcon, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgTERadioIcon_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional fixed32 player = 1 [default = 16777215];
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgTERadioIcon, _impl_.player_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 player = 1 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CMsgTERadioIcon, _impl_.player_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgTERadioIcon::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTERadioIcon)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 player = 1 [default = 16777215];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this->_internal_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTERadioIcon)
  return target;
}

::size_t CMsgTERadioIcon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTERadioIcon)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed32 player = 1 [default = 16777215];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgTERadioIcon::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgTERadioIcon::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgTERadioIcon::GetClassData() const { return &_class_data_; }


void CMsgTERadioIcon::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgTERadioIcon*>(&to_msg);
  auto& from = static_cast<const CMsgTERadioIcon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTERadioIcon)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_player(from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTERadioIcon::CopyFrom(const CMsgTERadioIcon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTERadioIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgTERadioIcon::IsInitialized() const {
  return true;
}

void CMsgTERadioIcon::InternalSwap(CMsgTERadioIcon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.player_, other->_impl_.player_);
}

::google::protobuf::Metadata CMsgTERadioIcon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cs_5fgameevents_2eproto_getter, &descriptor_table_cs_5fgameevents_2eproto_once,
      file_level_metadata_cs_5fgameevents_2eproto[1]);
}
// ===================================================================

class CMsgTEFireBullets::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTEFireBullets>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_._has_bits_);
  static const ::CMsgVector& origin(const CMsgTEFireBullets* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgQAngle& angles(const CMsgTEFireBullets* msg);
  static void set_has_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weapon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_inaccuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_recoil_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_spread(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sound_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sound_dsp_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgVector& ent_origin(const CMsgTEFireBullets* msg);
  static void set_has_ent_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_bullets_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CMsgVector& CMsgTEFireBullets::_Internal::origin(const CMsgTEFireBullets* msg) {
  return *msg->_impl_.origin_;
}
const ::CMsgQAngle& CMsgTEFireBullets::_Internal::angles(const CMsgTEFireBullets* msg) {
  return *msg->_impl_.angles_;
}
const ::CMsgVector& CMsgTEFireBullets::_Internal::ent_origin(const CMsgTEFireBullets* msg) {
  return *msg->_impl_.ent_origin_;
}
void CMsgTEFireBullets::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgTEFireBullets::clear_angles() {
  if (_impl_.angles_ != nullptr) _impl_.angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgTEFireBullets::clear_ent_origin() {
  if (_impl_.ent_origin_ != nullptr) _impl_.ent_origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgTEFireBullets::CMsgTEFireBullets(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTEFireBullets)
}
CMsgTEFireBullets::CMsgTEFireBullets(const CMsgTEFireBullets& from) : ::google::protobuf::Message() {
  CMsgTEFireBullets* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.origin_){nullptr},
      decltype(_impl_.angles_){nullptr},
      decltype(_impl_.ent_origin_){nullptr},
      decltype(_impl_.mode_){},
      decltype(_impl_.seed_){},
      decltype(_impl_.inaccuracy_){},
      decltype(_impl_.recoil_index_){},
      decltype(_impl_.spread_){},
      decltype(_impl_.sound_type_){},
      decltype(_impl_.item_def_index_){},
      decltype(_impl_.sound_dsp_effect_){},
      decltype(_impl_.num_bullets_remaining_){},
      decltype(_impl_.weapon_id_){},
      decltype(_impl_.player_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.origin_ = new ::CMsgVector(*from._impl_.origin_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.angles_ = new ::CMsgQAngle(*from._impl_.angles_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.ent_origin_ = new ::CMsgVector(*from._impl_.ent_origin_);
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.player_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.player_));

  // @@protoc_insertion_point(copy_constructor:CMsgTEFireBullets)
}
inline void CMsgTEFireBullets::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.origin_){nullptr},
      decltype(_impl_.angles_){nullptr},
      decltype(_impl_.ent_origin_){nullptr},
      decltype(_impl_.mode_){0u},
      decltype(_impl_.seed_){0u},
      decltype(_impl_.inaccuracy_){0},
      decltype(_impl_.recoil_index_){0},
      decltype(_impl_.spread_){0},
      decltype(_impl_.sound_type_){0},
      decltype(_impl_.item_def_index_){0u},
      decltype(_impl_.sound_dsp_effect_){0u},
      decltype(_impl_.num_bullets_remaining_){0u},
      decltype(_impl_.weapon_id_){16777215u},
      decltype(_impl_.player_){16777215u},
  };
}
CMsgTEFireBullets::~CMsgTEFireBullets() {
  // @@protoc_insertion_point(destructor:CMsgTEFireBullets)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgTEFireBullets::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.angles_;
  if (this != internal_default_instance()) delete _impl_.ent_origin_;
}
void CMsgTEFireBullets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CMsgTEFireBullets::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTEFireBullets)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.origin_ != nullptr);
      _impl_.origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angles_ != nullptr);
      _impl_.angles_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ent_origin_ != nullptr);
      _impl_.ent_origin_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.mode_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.spread_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.spread_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.sound_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_bullets_remaining_) -
        reinterpret_cast<char*>(&_impl_.sound_type_)) + sizeof(_impl_.num_bullets_remaining_));
    _impl_.weapon_id_ = 16777215u;
    _impl_.player_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgTEFireBullets::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 3, 0, 2> CMsgTEFireBullets::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgTEFireBullets_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgVector origin = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.origin_)}},
    // optional .CMsgQAngle angles = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.angles_)}},
    // optional uint32 weapon_id = 3 [default = 16777215];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgTEFireBullets, _impl_.weapon_id_), 12>(),
     {24, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.weapon_id_)}},
    // optional uint32 mode = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgTEFireBullets, _impl_.mode_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.mode_)}},
    // optional uint32 seed = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgTEFireBullets, _impl_.seed_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.seed_)}},
    // optional fixed32 player = 6 [default = 16777215];
    {::_pbi::TcParser::FastF32S1,
     {53, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.player_)}},
    // optional float inaccuracy = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.inaccuracy_)}},
    // optional float recoil_index = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.recoil_index_)}},
    // optional float spread = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.spread_)}},
    // optional int32 sound_type = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgTEFireBullets, _impl_.sound_type_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.sound_type_)}},
    // optional uint32 item_def_index = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgTEFireBullets, _impl_.item_def_index_), 9>(),
     {88, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.item_def_index_)}},
    // optional fixed32 sound_dsp_effect = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.sound_dsp_effect_)}},
    // optional .CMsgVector ent_origin = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 2, 2, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.ent_origin_)}},
    // optional uint32 num_bullets_remaining = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgTEFireBullets, _impl_.num_bullets_remaining_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.num_bullets_remaining_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgVector origin = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.origin_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgQAngle angles = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.angles_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 weapon_id = 3 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.weapon_id_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 mode = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.mode_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seed = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.seed_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 player = 6 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.player_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional float inaccuracy = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.inaccuracy_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float recoil_index = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.recoil_index_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float spread = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.spread_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 sound_type = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.sound_type_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 item_def_index = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.item_def_index_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 sound_dsp_effect = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.sound_dsp_effect_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional .CMsgVector ent_origin = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.ent_origin_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 num_bullets_remaining = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.num_bullets_remaining_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::CMsgQAngle>()},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
  }}, {{
  }},
};

::uint8_t* CMsgTEFireBullets::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTEFireBullets)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::angles(this),
        _Internal::angles(this).GetCachedSize(), target, stream);
  }

  // optional uint32 weapon_id = 3 [default = 16777215];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_weapon_id(), target);
  }

  // optional uint32 mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_mode(), target);
  }

  // optional uint32 seed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_seed(), target);
  }

  // optional fixed32 player = 6 [default = 16777215];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this->_internal_player(), target);
  }

  // optional float inaccuracy = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_inaccuracy(), target);
  }

  // optional float recoil_index = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_recoil_index(), target);
  }

  // optional float spread = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_spread(), target);
  }

  // optional int32 sound_type = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_sound_type(), target);
  }

  // optional uint32 item_def_index = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_item_def_index(), target);
  }

  // optional fixed32 sound_dsp_effect = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        12, this->_internal_sound_dsp_effect(), target);
  }

  // optional .CMsgVector ent_origin = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::ent_origin(this),
        _Internal::ent_origin(this).GetCachedSize(), target, stream);
  }

  // optional uint32 num_bullets_remaining = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_num_bullets_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTEFireBullets)
  return target;
}

::size_t CMsgTEFireBullets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTEFireBullets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.origin_);
    }

    // optional .CMsgQAngle angles = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.angles_);
    }

    // optional .CMsgVector ent_origin = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.ent_origin_);
    }

    // optional uint32 mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_mode());
    }

    // optional uint32 seed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seed());
    }

    // optional float inaccuracy = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional float recoil_index = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

    // optional float spread = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int32 sound_type = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_sound_type());
    }

    // optional uint32 item_def_index = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_item_def_index());
    }

    // optional fixed32 sound_dsp_effect = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 5;
    }

    // optional uint32 num_bullets_remaining = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_num_bullets_remaining());
    }

    // optional uint32 weapon_id = 3 [default = 16777215];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_weapon_id());
    }

    // optional fixed32 player = 6 [default = 16777215];
    if (cached_has_bits & 0x00002000u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgTEFireBullets::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CMsgTEFireBullets::MergeImpl
};
const ::google::protobuf::Message::ClassData*CMsgTEFireBullets::GetClassData() const { return &_class_data_; }


void CMsgTEFireBullets::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgTEFireBullets*>(&to_msg);
  auto& from = static_cast<const CMsgTEFireBullets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTEFireBullets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::CMsgVector::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_angles()->::CMsgQAngle::MergeFrom(
          from._internal_angles());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ent_origin()->::CMsgVector::MergeFrom(
          from._internal_ent_origin());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.seed_ = from._impl_.seed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.inaccuracy_ = from._impl_.inaccuracy_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.recoil_index_ = from._impl_.recoil_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.spread_ = from._impl_.spread_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.sound_type_ = from._impl_.sound_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.item_def_index_ = from._impl_.item_def_index_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.sound_dsp_effect_ = from._impl_.sound_dsp_effect_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.num_bullets_remaining_ = from._impl_.num_bullets_remaining_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.weapon_id_ = from._impl_.weapon_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.player_ = from._impl_.player_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTEFireBullets::CopyFrom(const CMsgTEFireBullets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTEFireBullets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgTEFireBullets::IsInitialized() const {
  return true;
}

void CMsgTEFireBullets::InternalSwap(CMsgTEFireBullets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.player_)
      + sizeof(CMsgTEFireBullets::_impl_.player_)
      - PROTOBUF_FIELD_OFFSET(CMsgTEFireBullets, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
}

::google::protobuf::Metadata CMsgTEFireBullets::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cs_5fgameevents_2eproto_getter, &descriptor_table_cs_5fgameevents_2eproto_once,
      file_level_metadata_cs_5fgameevents_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
