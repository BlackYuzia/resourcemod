// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamworkssdk.proto

#include "steammessages_cloud.steamworkssdk.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.appid_)*/ 0u,
    } {}
struct CCloud_GetUploadServerInfo_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_GetUploadServerInfo_RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_GetUploadServerInfo_RequestDefaultTypeInternal() {}
  union {
    CCloud_GetUploadServerInfo_Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_GetUploadServerInfo_RequestDefaultTypeInternal _CCloud_GetUploadServerInfo_Request_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.server_url_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal() {}
  union {
    CCloud_GetUploadServerInfo_Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal _CCloud_GetUploadServerInfo_Response_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ugcid_)*/ ::uint64_t{0u},
      /*decltype(_impl_.appid_)*/ 0u,
    } {}
struct CCloud_GetFileDetails_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_GetFileDetails_RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_GetFileDetails_RequestDefaultTypeInternal() {}
  union {
    CCloud_GetFileDetails_Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_GetFileDetails_RequestDefaultTypeInternal _CCloud_GetFileDetails_Request_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CCloud_UserFile::CCloud_UserFile(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.filename_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.url_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.ugcid_)*/ ::uint64_t{0u},
      /*decltype(_impl_.appid_)*/ 0u,
      /*decltype(_impl_.file_size_)*/ 0u,
      /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u},
      /*decltype(_impl_.steamid_creator_)*/ ::uint64_t{0u},
    } {}
struct CCloud_UserFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_UserFileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_UserFileDefaultTypeInternal() {}
  union {
    CCloud_UserFile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_UserFileDefaultTypeInternal _CCloud_UserFile_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.details_)*/ nullptr,
    } {}
struct CCloud_GetFileDetails_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_GetFileDetails_ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_GetFileDetails_ResponseDefaultTypeInternal() {}
  union {
    CCloud_GetFileDetails_Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_GetFileDetails_ResponseDefaultTypeInternal _CCloud_GetFileDetails_Response_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.appid_)*/ 0u,
      /*decltype(_impl_.extended_details_)*/ false,
      /*decltype(_impl_.count_)*/ 0u,
      /*decltype(_impl_.start_index_)*/ 0u,
    } {}
struct CCloud_EnumerateUserFiles_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_EnumerateUserFiles_RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_EnumerateUserFiles_RequestDefaultTypeInternal() {}
  union {
    CCloud_EnumerateUserFiles_Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_EnumerateUserFiles_RequestDefaultTypeInternal _CCloud_EnumerateUserFiles_Request_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.files_)*/ {},
      /*decltype(_impl_.total_files_)*/ 0u,
    } {}
struct CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal() {}
  union {
    CCloud_EnumerateUserFiles_Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal _CCloud_EnumerateUserFiles_Response_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CCloud_Delete_Request::CCloud_Delete_Request(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.filename_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.appid_)*/ 0u,
    } {}
struct CCloud_Delete_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_Delete_RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_Delete_RequestDefaultTypeInternal() {}
  union {
    CCloud_Delete_Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_Delete_RequestDefaultTypeInternal _CCloud_Delete_Request_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CCloud_Delete_Response::CCloud_Delete_Response(::_pbi::ConstantInitialized) {}
struct CCloud_Delete_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCloud_Delete_ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCloud_Delete_ResponseDefaultTypeInternal() {}
  union {
    CCloud_Delete_Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCloud_Delete_ResponseDefaultTypeInternal _CCloud_Delete_Response_default_instance_;
static ::_pb::Metadata file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_steammessages_5fcloud_2esteamworkssdk_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_steammessages_5fcloud_2esteamworkssdk_2eproto = nullptr;
const ::uint32_t TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Request, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Request, _impl_.appid_),
    0,
    PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Response, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Response, _impl_.server_url_),
    0,
    PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Request, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Request, _impl_.ugcid_),
    PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Request, _impl_.appid_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _impl_.appid_),
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _impl_.ugcid_),
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _impl_.filename_),
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _impl_.file_size_),
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _impl_.url_),
    PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _impl_.steamid_creator_),
    3,
    2,
    0,
    5,
    4,
    1,
    6,
    PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Response, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Response, _impl_.details_),
    0,
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, _impl_.appid_),
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, _impl_.extended_details_),
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, _impl_.count_),
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, _impl_.start_index_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Response, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Response, _impl_.files_),
    PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Response, _impl_.total_files_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, _impl_.filename_),
    PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, _impl_.appid_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::CCloud_GetUploadServerInfo_Request)},
        {10, 19, -1, sizeof(::CCloud_GetUploadServerInfo_Response)},
        {20, 30, -1, sizeof(::CCloud_GetFileDetails_Request)},
        {32, 47, -1, sizeof(::CCloud_UserFile)},
        {54, 63, -1, sizeof(::CCloud_GetFileDetails_Response)},
        {64, 76, -1, sizeof(::CCloud_EnumerateUserFiles_Request)},
        {80, 90, -1, sizeof(::CCloud_EnumerateUserFiles_Response)},
        {92, 102, -1, sizeof(::CCloud_Delete_Request)},
        {104, -1, -1, sizeof(::CCloud_Delete_Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_CCloud_GetUploadServerInfo_Request_default_instance_._instance,
    &::_CCloud_GetUploadServerInfo_Response_default_instance_._instance,
    &::_CCloud_GetFileDetails_Request_default_instance_._instance,
    &::_CCloud_UserFile_default_instance_._instance,
    &::_CCloud_GetFileDetails_Response_default_instance_._instance,
    &::_CCloud_EnumerateUserFiles_Request_default_instance_._instance,
    &::_CCloud_EnumerateUserFiles_Response_default_instance_._instance,
    &::_CCloud_Delete_Request_default_instance_._instance,
    &::_CCloud_Delete_Response_default_instance_._instance,
};
const char descriptor_table_protodef_steammessages_5fcloud_2esteamworkssdk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'steammessages_cloud.steamworkssdk.prot"
    "o\032.steammessages_unified_base.steamworks"
    "sdk.proto\"d\n\"CCloud_GetUploadServerInfo_"
    "Request\022>\n\005appid\030\001 \001(\rB/\202\265\030+App ID to wh"
    "ich a file will be uploaded to.\"9\n#CClou"
    "d_GetUploadServerInfo_Response\022\022\n\nserver"
    "_url\030\001 \001(\t\"\214\001\n\035CCloud_GetFileDetails_Req"
    "uest\022;\n\005ugcid\030\001 \001(\004B,\202\265\030(ID of the Cloud"
    " file to get details for.\022.\n\005appid\030\002 \001(\r"
    "B\037\202\265\030\033App ID the file belongs to.\"\215\001\n\017CC"
    "loud_UserFile\022\r\n\005appid\030\001 \001(\r\022\r\n\005ugcid\030\002 "
    "\001(\004\022\020\n\010filename\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\004"
    "\022\021\n\tfile_size\030\005 \001(\r\022\013\n\003url\030\006 \001(\t\022\027\n\017stea"
    "mid_creator\030\007 \001(\006\"C\n\036CCloud_GetFileDetai"
    "ls_Response\022!\n\007details\030\001 \001(\0132\020.CCloud_Us"
    "erFile\"\351\003\n!CCloud_EnumerateUserFiles_Req"
    "uest\0224\n\005appid\030\001 \001(\rB%\202\265\030!App ID to enume"
    "rate the files of.\022\233\001\n\020extended_details\030"
    "\002 \001(\010B\200\001\202\265\030|(Optional) Get extended deta"
    "ils back on the files found. Defaults to"
    " only returned the app Id and UGC Id of "
    "the files found.\022|\n\005count\030\003 \001(\rBm\202\265\030i(Op"
    "tional) Maximum number of results to ret"
    "urn on this call. Defaults to a maximum "
    "of 500 files returned.\022r\n\013start_index\030\004 "
    "\001(\rB]\202\265\030Y(Optional) Starting index to be"
    "gin enumeration at. Defaults to the begi"
    "nning of the list.\"Z\n\"CCloud_EnumerateUs"
    "erFiles_Response\022\037\n\005files\030\001 \003(\0132\020.CCloud"
    "_UserFile\022\023\n\013total_files\030\002 \001(\r\"Y\n\025CCloud"
    "_Delete_Request\022\020\n\010filename\030\001 \001(\t\022.\n\005app"
    "id\030\002 \001(\rB\037\202\265\030\033App ID the file belongs to"
    ".\"\030\n\026CCloud_Delete_Response2\355\004\n\005Cloud\022\234\001"
    "\n\023GetUploadServerInfo\022#.CCloud_GetUpload"
    "ServerInfo_Request\032$.CCloud_GetUploadSer"
    "verInfo_Response\":\202\265\0306Returns the URL of"
    " the proper cloud server for a user.\022w\n\016"
    "GetFileDetails\022\036.CCloud_GetFileDetails_R"
    "equest\032\037.CCloud_GetFileDetails_Response\""
    "$\202\265\030 Returns details on a Cloud file.\022\272\001"
    "\n\022EnumerateUserFiles\022\".CCloud_EnumerateU"
    "serFiles_Request\032#.CCloud_EnumerateUserF"
    "iles_Response\"[\202\265\030WEnumerates Cloud file"
    "s for a user of a given app ID. Returns "
    "up to 500 files at a time.\022d\n\006Delete\022\026.C"
    "Cloud_Delete_Request\032\027.CCloud_Delete_Res"
    "ponse\")\202\265\030%Deletes a file from the user\'"
    "s cloud.\032)\202\265\030%A service for Steam Cloud "
    "operations."
};
static const ::_pbi::DescriptorTable* const descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_deps[1] =
    {
        &::descriptor_table_steammessages_5funified_5fbase_2esteamworkssdk_2eproto,
};
static ::absl::once_flag descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto = {
    false,
    false,
    1931,
    descriptor_table_protodef_steammessages_5fcloud_2esteamworkssdk_2eproto,
    "steammessages_cloud.steamworkssdk.proto",
    &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
    descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_deps,
    1,
    9,
    schemas,
    file_default_instances,
    TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto::offsets,
    file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto,
    file_level_enum_descriptors_steammessages_5fcloud_2esteamworkssdk_2eproto,
    file_level_service_descriptors_steammessages_5fcloud_2esteamworkssdk_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter() {
  return &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fcloud_2esteamworkssdk_2eproto(&descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
// ===================================================================

class CCloud_GetUploadServerInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetUploadServerInfo_Request>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCloud_GetUploadServerInfo_Request)
}
CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_GetUploadServerInfo_Request)
}
inline void CCloud_GetUploadServerInfo_Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.appid_){0u},
  };
}
CCloud_GetUploadServerInfo_Request::~CCloud_GetUploadServerInfo_Request() {
  // @@protoc_insertion_point(destructor:CCloud_GetUploadServerInfo_Request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCloud_GetUploadServerInfo_Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CCloud_GetUploadServerInfo_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CCloud_GetUploadServerInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetUploadServerInfo_Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CCloud_GetUploadServerInfo_Request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CCloud_GetUploadServerInfo_Request::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCloud_GetUploadServerInfo_Request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_GetUploadServerInfo_Request, _impl_.appid_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _impl_.appid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
    {PROTOBUF_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _impl_.appid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CCloud_GetUploadServerInfo_Request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetUploadServerInfo_Request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetUploadServerInfo_Request)
  return target;
}

::size_t CCloud_GetUploadServerInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetUploadServerInfo_Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CCloud_GetUploadServerInfo_Request::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CCloud_GetUploadServerInfo_Request::MergeImpl
};
const ::google::protobuf::Message::ClassData*CCloud_GetUploadServerInfo_Request::GetClassData() const { return &_class_data_; }


void CCloud_GetUploadServerInfo_Request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CCloud_GetUploadServerInfo_Request*>(&to_msg);
  auto& from = static_cast<const CCloud_GetUploadServerInfo_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetUploadServerInfo_Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_appid(from._internal_appid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CCloud_GetUploadServerInfo_Request::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Request::InternalSwap(CCloud_GetUploadServerInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.appid_, other->_impl_.appid_);
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[0]);
}
// ===================================================================

class CCloud_GetUploadServerInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetUploadServerInfo_Response>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _impl_._has_bits_);
  static void set_has_server_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCloud_GetUploadServerInfo_Response)
}
CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from) : ::google::protobuf::Message() {
  CCloud_GetUploadServerInfo_Response* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.server_url_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.server_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.server_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.server_url_.Set(from._internal_server_url(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:CCloud_GetUploadServerInfo_Response)
}
inline void CCloud_GetUploadServerInfo_Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.server_url_){},
  };
  _impl_.server_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.server_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CCloud_GetUploadServerInfo_Response::~CCloud_GetUploadServerInfo_Response() {
  // @@protoc_insertion_point(destructor:CCloud_GetUploadServerInfo_Response)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCloud_GetUploadServerInfo_Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_url_.Destroy();
}
void CCloud_GetUploadServerInfo_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CCloud_GetUploadServerInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetUploadServerInfo_Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.server_url_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CCloud_GetUploadServerInfo_Response::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 54, 2> CCloud_GetUploadServerInfo_Response::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCloud_GetUploadServerInfo_Response_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string server_url = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _impl_.server_url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string server_url = 1;
    {PROTOBUF_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _impl_.server_url_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\43\12\0\0\0\0\0\0"
    "CCloud_GetUploadServerInfo_Response"
    "server_url"
  }},
};

::uint8_t* CCloud_GetUploadServerInfo_Response::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetUploadServerInfo_Response)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_server_url();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCloud_GetUploadServerInfo_Response.server_url");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetUploadServerInfo_Response)
  return target;
}

::size_t CCloud_GetUploadServerInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetUploadServerInfo_Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string server_url = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_server_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CCloud_GetUploadServerInfo_Response::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CCloud_GetUploadServerInfo_Response::MergeImpl
};
const ::google::protobuf::Message::ClassData*CCloud_GetUploadServerInfo_Response::GetClassData() const { return &_class_data_; }


void CCloud_GetUploadServerInfo_Response::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CCloud_GetUploadServerInfo_Response*>(&to_msg);
  auto& from = static_cast<const CCloud_GetUploadServerInfo_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetUploadServerInfo_Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_server_url(from._internal_server_url());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CCloud_GetUploadServerInfo_Response::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Response::InternalSwap(CCloud_GetUploadServerInfo_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_url_, lhs_arena,
                                       &other->_impl_.server_url_, rhs_arena);
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[1]);
}
// ===================================================================

class CCloud_GetFileDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetFileDetails_Request>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, _impl_._has_bits_);
  static void set_has_ugcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCloud_GetFileDetails_Request)
}
CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_GetFileDetails_Request)
}
inline void CCloud_GetFileDetails_Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ugcid_){::uint64_t{0u}},
      decltype(_impl_.appid_){0u},
  };
}
CCloud_GetFileDetails_Request::~CCloud_GetFileDetails_Request() {
  // @@protoc_insertion_point(destructor:CCloud_GetFileDetails_Request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCloud_GetFileDetails_Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CCloud_GetFileDetails_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CCloud_GetFileDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetFileDetails_Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ugcid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.ugcid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CCloud_GetFileDetails_Request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CCloud_GetFileDetails_Request::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCloud_GetFileDetails_Request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_GetFileDetails_Request, _impl_.appid_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, _impl_.appid_)}},
    // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CCloud_GetFileDetails_Request, _impl_.ugcid_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, _impl_.ugcid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
    {PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, _impl_.ugcid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
    {PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, _impl_.appid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CCloud_GetFileDetails_Request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetFileDetails_Request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_ugcid(), target);
  }

  // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetFileDetails_Request)
  return target;
}

::size_t CCloud_GetFileDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetFileDetails_Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ugcid());
    }

    // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CCloud_GetFileDetails_Request::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CCloud_GetFileDetails_Request::MergeImpl
};
const ::google::protobuf::Message::ClassData*CCloud_GetFileDetails_Request::GetClassData() const { return &_class_data_; }


void CCloud_GetFileDetails_Request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CCloud_GetFileDetails_Request*>(&to_msg);
  auto& from = static_cast<const CCloud_GetFileDetails_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetFileDetails_Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ugcid_ = from._impl_.ugcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetFileDetails_Request::CopyFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CCloud_GetFileDetails_Request::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Request::InternalSwap(CCloud_GetFileDetails_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, _impl_.appid_)
      + sizeof(CCloud_GetFileDetails_Request::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, _impl_.ugcid_)>(
          reinterpret_cast<char*>(&_impl_.ugcid_),
          reinterpret_cast<char*>(&other->_impl_.ugcid_));
}

::google::protobuf::Metadata CCloud_GetFileDetails_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[2]);
}
// ===================================================================

class CCloud_UserFile::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_UserFile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ugcid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCloud_UserFile::CCloud_UserFile(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCloud_UserFile)
}
CCloud_UserFile::CCloud_UserFile(const CCloud_UserFile& from) : ::google::protobuf::Message() {
  CCloud_UserFile* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.filename_){},
      decltype(_impl_.url_){},
      decltype(_impl_.ugcid_){},
      decltype(_impl_.appid_){},
      decltype(_impl_.file_size_){},
      decltype(_impl_.timestamp_){},
      decltype(_impl_.steamid_creator_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.filename_.Set(from._internal_filename(), _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.url_.Set(from._internal_url(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ugcid_, &from._impl_.ugcid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.steamid_creator_) -
    reinterpret_cast<char*>(&_impl_.ugcid_)) + sizeof(_impl_.steamid_creator_));

  // @@protoc_insertion_point(copy_constructor:CCloud_UserFile)
}
inline void CCloud_UserFile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.filename_){},
      decltype(_impl_.url_){},
      decltype(_impl_.ugcid_){::uint64_t{0u}},
      decltype(_impl_.appid_){0u},
      decltype(_impl_.file_size_){0u},
      decltype(_impl_.timestamp_){::uint64_t{0u}},
      decltype(_impl_.steamid_creator_){::uint64_t{0u}},
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CCloud_UserFile::~CCloud_UserFile() {
  // @@protoc_insertion_point(destructor:CCloud_UserFile)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCloud_UserFile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.url_.Destroy();
}
void CCloud_UserFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CCloud_UserFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_UserFile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.ugcid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.steamid_creator_) -
        reinterpret_cast<char*>(&_impl_.ugcid_)) + sizeof(_impl_.steamid_creator_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CCloud_UserFile::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 35, 2> CCloud_UserFile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCloud_UserFile_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 appid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_UserFile, _impl_.appid_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.appid_)}},
    // optional uint64 ugcid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CCloud_UserFile, _impl_.ugcid_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.ugcid_)}},
    // optional string filename = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.filename_)}},
    // optional uint64 timestamp = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CCloud_UserFile, _impl_.timestamp_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.timestamp_)}},
    // optional uint32 file_size = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_UserFile, _impl_.file_size_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.file_size_)}},
    // optional string url = 6;
    {::_pbi::TcParser::FastSS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.url_)}},
    // optional fixed64 steamid_creator = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 6, 0, PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.steamid_creator_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 appid = 1;
    {PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.appid_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 ugcid = 2;
    {PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.ugcid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string filename = 3;
    {PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.filename_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint64 timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.timestamp_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint32 file_size = 5;
    {PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.file_size_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string url = 6;
    {PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.url_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional fixed64 steamid_creator = 7;
    {PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.steamid_creator_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }},
  // no aux_entries
  {{
    "\17\0\0\10\0\0\3\0"
    "CCloud_UserFile"
    "filename"
    "url"
  }},
};

::uint8_t* CCloud_UserFile::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_UserFile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_appid(), target);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_ugcid(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_filename();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCloud_UserFile.filename");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_timestamp(), target);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_file_size(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_url();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCloud_UserFile.url");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        7, this->_internal_steamid_creator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_UserFile)
  return target;
}

::size_t CCloud_UserFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_UserFile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_filename());
    }

    // optional string url = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_url());
    }

    // optional uint64 ugcid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ugcid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

    // optional uint32 file_size = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_file_size());
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional fixed64 steamid_creator = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CCloud_UserFile::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CCloud_UserFile::MergeImpl
};
const ::google::protobuf::Message::ClassData*CCloud_UserFile::GetClassData() const { return &_class_data_; }


void CCloud_UserFile::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CCloud_UserFile*>(&to_msg);
  auto& from = static_cast<const CCloud_UserFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCloud_UserFile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ugcid_ = from._impl_.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.file_size_ = from._impl_.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.steamid_creator_ = from._impl_.steamid_creator_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_UserFile::CopyFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CCloud_UserFile::IsInitialized() const {
  return true;
}

void CCloud_UserFile::InternalSwap(CCloud_UserFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, lhs_arena,
                                       &other->_impl_.filename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, lhs_arena,
                                       &other->_impl_.url_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.steamid_creator_)
      + sizeof(CCloud_UserFile::_impl_.steamid_creator_)
      - PROTOBUF_FIELD_OFFSET(CCloud_UserFile, _impl_.ugcid_)>(
          reinterpret_cast<char*>(&_impl_.ugcid_),
          reinterpret_cast<char*>(&other->_impl_.ugcid_));
}

::google::protobuf::Metadata CCloud_UserFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[3]);
}
// ===================================================================

class CCloud_GetFileDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetFileDetails_Response>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Response, _impl_._has_bits_);
  static const ::CCloud_UserFile& details(const CCloud_GetFileDetails_Response* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CCloud_UserFile& CCloud_GetFileDetails_Response::_Internal::details(const CCloud_GetFileDetails_Response* msg) {
  return *msg->_impl_.details_;
}
CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCloud_GetFileDetails_Response)
}
CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from) : ::google::protobuf::Message() {
  CCloud_GetFileDetails_Response* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.details_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.details_ = new ::CCloud_UserFile(*from._impl_.details_);
  }

  // @@protoc_insertion_point(copy_constructor:CCloud_GetFileDetails_Response)
}
inline void CCloud_GetFileDetails_Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.details_){nullptr},
  };
}
CCloud_GetFileDetails_Response::~CCloud_GetFileDetails_Response() {
  // @@protoc_insertion_point(destructor:CCloud_GetFileDetails_Response)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCloud_GetFileDetails_Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.details_;
}
void CCloud_GetFileDetails_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CCloud_GetFileDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetFileDetails_Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.details_ != nullptr);
    _impl_.details_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CCloud_GetFileDetails_Response::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CCloud_GetFileDetails_Response::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Response, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CCloud_GetFileDetails_Response_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .CCloud_UserFile details = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Response, _impl_.details_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CCloud_UserFile details = 1;
    {PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Response, _impl_.details_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CCloud_UserFile>()},
  }}, {{
  }},
};

::uint8_t* CCloud_GetFileDetails_Response::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetFileDetails_Response)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::details(this),
        _Internal::details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetFileDetails_Response)
  return target;
}

::size_t CCloud_GetFileDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetFileDetails_Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CCloud_UserFile details = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.details_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CCloud_GetFileDetails_Response::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CCloud_GetFileDetails_Response::MergeImpl
};
const ::google::protobuf::Message::ClassData*CCloud_GetFileDetails_Response::GetClassData() const { return &_class_data_; }


void CCloud_GetFileDetails_Response::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CCloud_GetFileDetails_Response*>(&to_msg);
  auto& from = static_cast<const CCloud_GetFileDetails_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetFileDetails_Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_details()->::CCloud_UserFile::MergeFrom(
        from._internal_details());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetFileDetails_Response::CopyFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CCloud_GetFileDetails_Response::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Response::InternalSwap(CCloud_GetFileDetails_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.details_, other->_impl_.details_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[4]);
}
// ===================================================================

class CCloud_EnumerateUserFiles_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_EnumerateUserFiles_Request>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extended_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCloud_EnumerateUserFiles_Request)
}
CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserFiles_Request)
}
inline void CCloud_EnumerateUserFiles_Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.appid_){0u},
      decltype(_impl_.extended_details_){false},
      decltype(_impl_.count_){0u},
      decltype(_impl_.start_index_){0u},
  };
}
CCloud_EnumerateUserFiles_Request::~CCloud_EnumerateUserFiles_Request() {
  // @@protoc_insertion_point(destructor:CCloud_EnumerateUserFiles_Request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCloud_EnumerateUserFiles_Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CCloud_EnumerateUserFiles_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CCloud_EnumerateUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_EnumerateUserFiles_Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.appid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.start_index_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.start_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CCloud_EnumerateUserFiles_Request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> CCloud_EnumerateUserFiles_Request::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCloud_EnumerateUserFiles_Request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_EnumerateUserFiles_Request, _impl_.start_index_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.start_index_)}},
    // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_EnumerateUserFiles_Request, _impl_.appid_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.appid_)}},
    // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCloud_EnumerateUserFiles_Request, _impl_.extended_details_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.extended_details_)}},
    // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_EnumerateUserFiles_Request, _impl_.count_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
    {PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.appid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
    {PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.extended_details_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
    {PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.count_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
    {PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.start_index_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CCloud_EnumerateUserFiles_Request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_EnumerateUserFiles_Request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_appid(), target);
  }

  // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_extended_details(), target);
  }

  // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_count(), target);
  }

  // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_start_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_EnumerateUserFiles_Request)
  return target;
}

::size_t CCloud_EnumerateUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_EnumerateUserFiles_Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

    // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_count());
    }

    // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_start_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CCloud_EnumerateUserFiles_Request::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CCloud_EnumerateUserFiles_Request::MergeImpl
};
const ::google::protobuf::Message::ClassData*CCloud_EnumerateUserFiles_Request::GetClassData() const { return &_class_data_; }


void CCloud_EnumerateUserFiles_Request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CCloud_EnumerateUserFiles_Request*>(&to_msg);
  auto& from = static_cast<const CCloud_EnumerateUserFiles_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCloud_EnumerateUserFiles_Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.extended_details_ = from._impl_.extended_details_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_index_ = from._impl_.start_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CCloud_EnumerateUserFiles_Request::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Request::InternalSwap(CCloud_EnumerateUserFiles_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.start_index_)
      + sizeof(CCloud_EnumerateUserFiles_Request::_impl_.start_index_)
      - PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[5]);
}
// ===================================================================

class CCloud_EnumerateUserFiles_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_EnumerateUserFiles_Response>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _impl_._has_bits_);
  static void set_has_total_files(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCloud_EnumerateUserFiles_Response)
}
CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from) : ::google::protobuf::Message() {
  CCloud_EnumerateUserFiles_Response* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.files_){from._impl_.files_},
      decltype(_impl_.total_files_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.total_files_ = from._impl_.total_files_;

  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserFiles_Response)
}
inline void CCloud_EnumerateUserFiles_Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.files_){arena},
      decltype(_impl_.total_files_){0u},
  };
}
CCloud_EnumerateUserFiles_Response::~CCloud_EnumerateUserFiles_Response() {
  // @@protoc_insertion_point(destructor:CCloud_EnumerateUserFiles_Response)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCloud_EnumerateUserFiles_Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
}
void CCloud_EnumerateUserFiles_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CCloud_EnumerateUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_EnumerateUserFiles_Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_files()->Clear();
  _impl_.total_files_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CCloud_EnumerateUserFiles_Response::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> CCloud_EnumerateUserFiles_Response::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CCloud_EnumerateUserFiles_Response_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 total_files = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_EnumerateUserFiles_Response, _impl_.total_files_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _impl_.total_files_)}},
    // repeated .CCloud_UserFile files = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _impl_.files_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CCloud_UserFile files = 1;
    {PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _impl_.files_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 total_files = 2;
    {PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _impl_.total_files_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CCloud_UserFile>()},
  }}, {{
  }},
};

::uint8_t* CCloud_EnumerateUserFiles_Response::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_EnumerateUserFiles_Response)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CCloud_UserFile files = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_total_files(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_EnumerateUserFiles_Response)
  return target;
}

::size_t CCloud_EnumerateUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_EnumerateUserFiles_Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCloud_UserFile files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_internal_files()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional uint32 total_files = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_total_files());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CCloud_EnumerateUserFiles_Response::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CCloud_EnumerateUserFiles_Response::MergeImpl
};
const ::google::protobuf::Message::ClassData*CCloud_EnumerateUserFiles_Response::GetClassData() const { return &_class_data_; }


void CCloud_EnumerateUserFiles_Response::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CCloud_EnumerateUserFiles_Response*>(&to_msg);
  auto& from = static_cast<const CCloud_EnumerateUserFiles_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCloud_EnumerateUserFiles_Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_files()->MergeFrom(from._internal_files());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_total_files(from._internal_total_files());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CCloud_EnumerateUserFiles_Response::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Response::InternalSwap(CCloud_EnumerateUserFiles_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
        swap(_impl_.total_files_, other->_impl_.total_files_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[6]);
}
// ===================================================================

class CCloud_Delete_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_Delete_Request>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CCloud_Delete_Request, _impl_._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_Delete_Request::CCloud_Delete_Request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCloud_Delete_Request)
}
CCloud_Delete_Request::CCloud_Delete_Request(const CCloud_Delete_Request& from) : ::google::protobuf::Message() {
  CCloud_Delete_Request* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.filename_){},
      decltype(_impl_.appid_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.filename_.Set(from._internal_filename(), _this->GetArenaForAllocation());
  }
  _this->_impl_.appid_ = from._impl_.appid_;

  // @@protoc_insertion_point(copy_constructor:CCloud_Delete_Request)
}
inline void CCloud_Delete_Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.filename_){},
      decltype(_impl_.appid_){0u},
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CCloud_Delete_Request::~CCloud_Delete_Request() {
  // @@protoc_insertion_point(destructor:CCloud_Delete_Request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCloud_Delete_Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}
void CCloud_Delete_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CCloud_Delete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_Delete_Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.filename_.ClearNonDefaultToEmpty();
  }
  _impl_.appid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CCloud_Delete_Request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 38, 2> CCloud_Delete_Request::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCloud_Delete_Request, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCloud_Delete_Request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCloud_Delete_Request, _impl_.appid_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CCloud_Delete_Request, _impl_.appid_)}},
    // optional string filename = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CCloud_Delete_Request, _impl_.filename_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string filename = 1;
    {PROTOBUF_FIELD_OFFSET(CCloud_Delete_Request, _impl_.filename_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
    {PROTOBUF_FIELD_OFFSET(CCloud_Delete_Request, _impl_.appid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\25\10\0\0\0\0\0\0"
    "CCloud_Delete_Request"
    "filename"
  }},
};

::uint8_t* CCloud_Delete_Request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_Delete_Request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_filename();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCloud_Delete_Request.filename");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_Delete_Request)
  return target;
}

::size_t CCloud_Delete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_Delete_Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_filename());
    }

    // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CCloud_Delete_Request::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CCloud_Delete_Request::MergeImpl
};
const ::google::protobuf::Message::ClassData*CCloud_Delete_Request::GetClassData() const { return &_class_data_; }


void CCloud_Delete_Request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CCloud_Delete_Request*>(&to_msg);
  auto& from = static_cast<const CCloud_Delete_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCloud_Delete_Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_Delete_Request::CopyFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CCloud_Delete_Request::IsInitialized() const {
  return true;
}

void CCloud_Delete_Request::InternalSwap(CCloud_Delete_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, lhs_arena,
                                       &other->_impl_.filename_, rhs_arena);
        swap(_impl_.appid_, other->_impl_.appid_);
}

::google::protobuf::Metadata CCloud_Delete_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[7]);
}
// ===================================================================

class CCloud_Delete_Response::_Internal {
 public:
};

CCloud_Delete_Response::CCloud_Delete_Response(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:CCloud_Delete_Response)
}
CCloud_Delete_Response::CCloud_Delete_Response(const CCloud_Delete_Response& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  CCloud_Delete_Response* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:CCloud_Delete_Response)
}




const ::google::protobuf::Message::ClassData CCloud_Delete_Response::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*CCloud_Delete_Response::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata CCloud_Delete_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
