// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fatdemo.proto

#include "fatdemo.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR MLDict::MLDict(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.val_string_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.val_int_)*/ 0,
      /*decltype(_impl_.val_float_)*/ 0,
    } {}
struct MLDictDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLDictDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLDictDefaultTypeInternal() {}
  union {
    MLDict _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLDictDefaultTypeInternal _MLDict_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MLEvent::MLEvent(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.data_)*/ {},
      /*decltype(_impl_.event_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct MLEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLEventDefaultTypeInternal() {}
  union {
    MLEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLEventDefaultTypeInternal _MLEvent_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MLMatchState::MLMatchState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.game_mode_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.phase_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.round_)*/ 0,
      /*decltype(_impl_.score_ct_)*/ 0,
      /*decltype(_impl_.score_t_)*/ 0,
    } {}
struct MLMatchStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLMatchStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLMatchStateDefaultTypeInternal() {}
  union {
    MLMatchState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLMatchStateDefaultTypeInternal _MLMatchState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MLRoundState::MLRoundState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.phase_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.bomb_state_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.win_team_)*/ 0,
    } {}
struct MLRoundStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLRoundStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLRoundStateDefaultTypeInternal() {}
  union {
    MLRoundState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLRoundStateDefaultTypeInternal _MLRoundState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MLWeaponState::MLWeaponState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.state_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.index_)*/ 0,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.ammo_clip_)*/ 0,
      /*decltype(_impl_.ammo_clip_max_)*/ 0,
      /*decltype(_impl_.ammo_reserve_)*/ 0,
      /*decltype(_impl_.recoil_index_)*/ 0,
    } {}
struct MLWeaponStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLWeaponStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLWeaponStateDefaultTypeInternal() {}
  union {
    MLWeaponState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLWeaponStateDefaultTypeInternal _MLWeaponState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MLPlayerState::MLPlayerState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.weapons_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.clan_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.abspos_)*/ nullptr,
      /*decltype(_impl_.eyeangle_)*/ nullptr,
      /*decltype(_impl_.eyeangle_fwd_)*/ nullptr,
      /*decltype(_impl_.account_id_)*/ 0,
      /*decltype(_impl_.entindex_)*/ 0,
      /*decltype(_impl_.team_)*/ 0,
      /*decltype(_impl_.health_)*/ 0,
      /*decltype(_impl_.armor_)*/ 0,
      /*decltype(_impl_.flashed_)*/ 0,
      /*decltype(_impl_.smoked_)*/ 0,
      /*decltype(_impl_.money_)*/ 0,
      /*decltype(_impl_.round_kills_)*/ 0,
      /*decltype(_impl_.round_killhs_)*/ 0,
      /*decltype(_impl_.burning_)*/ 0,
      /*decltype(_impl_.helmet_)*/ false,
      /*decltype(_impl_.defuse_kit_)*/ false,
      /*decltype(_impl_.player_slot_)*/ -1,
    } {}
struct MLPlayerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLPlayerStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLPlayerStateDefaultTypeInternal() {}
  union {
    MLPlayerState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLPlayerStateDefaultTypeInternal _MLPlayerState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MLGameState::MLGameState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.players_)*/ {},
      /*decltype(_impl_.match_)*/ nullptr,
      /*decltype(_impl_.round_)*/ nullptr,
    } {}
struct MLGameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLGameStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLGameStateDefaultTypeInternal() {}
  union {
    MLGameState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLGameStateDefaultTypeInternal _MLGameState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MLDemoHeader::MLDemoHeader(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.map_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.tick_rate_)*/ 0,
      /*decltype(_impl_.version_)*/ 0u,
      /*decltype(_impl_.steam_universe_)*/ 0u,
    } {}
struct MLDemoHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLDemoHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLDemoHeaderDefaultTypeInternal() {}
  union {
    MLDemoHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLDemoHeaderDefaultTypeInternal _MLDemoHeader_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MLTick::MLTick(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.events_)*/ {},
      /*decltype(_impl_.state_)*/ nullptr,
      /*decltype(_impl_.tick_count_)*/ 0,
    } {}
struct MLTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLTickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLTickDefaultTypeInternal() {}
  union {
    MLTick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLTickDefaultTypeInternal _MLTick_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR VacNetShot::VacNetShot(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.delta_yaw_window_)*/ {},
      /*decltype(_impl_.delta_pitch_window_)*/ {},
      /*decltype(_impl_.steamid_player_)*/ ::uint64_t{0u},
      /*decltype(_impl_.round_number_)*/ 0,
      /*decltype(_impl_.hit_type_)*/ 0,
      /*decltype(_impl_.weapon_type_)*/ 0,
      /*decltype(_impl_.distance_to_hurt_target_)*/ 0,
    } {}
struct VacNetShotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VacNetShotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VacNetShotDefaultTypeInternal() {}
  union {
    VacNetShot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VacNetShotDefaultTypeInternal _VacNetShot_default_instance_;
static ::_pb::Metadata file_level_metadata_fatdemo_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_fatdemo_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_fatdemo_2eproto = nullptr;
const ::uint32_t TableStruct_fatdemo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::MLDict, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLDict, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLDict, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::MLDict, _impl_.val_string_),
    PROTOBUF_FIELD_OFFSET(::MLDict, _impl_.val_int_),
    PROTOBUF_FIELD_OFFSET(::MLDict, _impl_.val_float_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::MLEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLEvent, _impl_.event_name_),
    PROTOBUF_FIELD_OFFSET(::MLEvent, _impl_.data_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLMatchState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.game_mode_),
    PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.phase_),
    PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.score_ct_),
    PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.score_t_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::MLRoundState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLRoundState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLRoundState, _impl_.phase_),
    PROTOBUF_FIELD_OFFSET(::MLRoundState, _impl_.win_team_),
    PROTOBUF_FIELD_OFFSET(::MLRoundState, _impl_.bomb_state_),
    0,
    2,
    1,
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.ammo_clip_),
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.ammo_clip_max_),
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.ammo_reserve_),
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.recoil_index_),
    2,
    0,
    3,
    4,
    5,
    6,
    1,
    7,
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.player_slot_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.entindex_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.clan_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.team_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.abspos_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.eyeangle_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.eyeangle_fwd_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.health_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.armor_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.flashed_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.smoked_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.money_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.round_kills_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.round_killhs_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.burning_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.helmet_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.defuse_kit_),
    PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.weapons_),
    5,
    18,
    6,
    0,
    1,
    7,
    2,
    3,
    4,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::MLGameState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLGameState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLGameState, _impl_.match_),
    PROTOBUF_FIELD_OFFSET(::MLGameState, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::MLGameState, _impl_.players_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_.map_name_),
    PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_.tick_rate_),
    PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_.steam_universe_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::MLTick, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MLTick, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MLTick, _impl_.tick_count_),
    PROTOBUF_FIELD_OFFSET(::MLTick, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::MLTick, _impl_.events_),
    1,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.steamid_player_),
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.round_number_),
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.hit_type_),
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.weapon_type_),
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.distance_to_hurt_target_),
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.delta_yaw_window_),
    PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.delta_pitch_window_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::MLDict)},
        {16, 26, -1, sizeof(::MLEvent)},
        {28, 41, -1, sizeof(::MLMatchState)},
        {46, 57, -1, sizeof(::MLRoundState)},
        {60, 76, -1, sizeof(::MLWeaponState)},
        {84, 112, -1, sizeof(::MLPlayerState)},
        {132, 143, -1, sizeof(::MLGameState)},
        {146, 158, -1, sizeof(::MLDemoHeader)},
        {162, 173, -1, sizeof(::MLTick)},
        {176, 191, -1, sizeof(::VacNetShot)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_MLDict_default_instance_._instance,
    &::_MLEvent_default_instance_._instance,
    &::_MLMatchState_default_instance_._instance,
    &::_MLRoundState_default_instance_._instance,
    &::_MLWeaponState_default_instance_._instance,
    &::_MLPlayerState_default_instance_._instance,
    &::_MLGameState_default_instance_._instance,
    &::_MLDemoHeader_default_instance_._instance,
    &::_MLTick_default_instance_._instance,
    &::_VacNetShot_default_instance_._instance,
};
const char descriptor_table_protodef_fatdemo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rfatdemo.proto\032\026networkbasetypes.proto\""
    "M\n\006MLDict\022\013\n\003key\030\001 \001(\t\022\022\n\nval_string\030\002 \001"
    "(\t\022\017\n\007val_int\030\003 \001(\005\022\021\n\tval_float\030\004 \001(\002\"4"
    "\n\007MLEvent\022\022\n\nevent_name\030\001 \001(\t\022\025\n\004data\030\002 "
    "\003(\0132\007.MLDict\"b\n\014MLMatchState\022\021\n\tgame_mod"
    "e\030\001 \001(\t\022\r\n\005phase\030\002 \001(\t\022\r\n\005round\030\003 \001(\005\022\020\n"
    "\010score_ct\030\004 \001(\005\022\017\n\007score_t\030\005 \001(\005\"W\n\014MLRo"
    "undState\022\r\n\005phase\030\001 \001(\t\022$\n\010win_team\030\002 \001("
    "\0162\006.ETeam:\nET_Unknown\022\022\n\nbomb_state\030\003 \001("
    "\t\"\270\001\n\rMLWeaponState\022\r\n\005index\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\022%\n\004type\030\003 \001(\0162\014.EWeaponType:\tEW"
    "T_Knife\022\021\n\tammo_clip\030\004 \001(\005\022\025\n\rammo_clip_"
    "max\030\005 \001(\005\022\024\n\014ammo_reserve\030\006 \001(\005\022\r\n\005state"
    "\030\007 \001(\t\022\024\n\014recoil_index\030\010 \001(\002\"\273\003\n\rMLPlaye"
    "rState\022\022\n\naccount_id\030\001 \001(\005\022\027\n\013player_slo"
    "t\030\002 \001(\005:\002-1\022\020\n\010entindex\030\003 \001(\005\022\014\n\004name\030\004 "
    "\001(\t\022\014\n\004clan\030\005 \001(\t\022 \n\004team\030\006 \001(\0162\006.ETeam:"
    "\nET_Unknown\022\033\n\006abspos\030\007 \001(\0132\013.CMsgVector"
    "\022\035\n\010eyeangle\030\010 \001(\0132\013.CMsgQAngle\022!\n\014eyean"
    "gle_fwd\030\t \001(\0132\013.CMsgVector\022\016\n\006health\030\n \001"
    "(\005\022\r\n\005armor\030\013 \001(\005\022\017\n\007flashed\030\014 \001(\002\022\016\n\006sm"
    "oked\030\r \001(\002\022\r\n\005money\030\016 \001(\005\022\023\n\013round_kills"
    "\030\017 \001(\005\022\024\n\014round_killhs\030\020 \001(\005\022\017\n\007burning\030"
    "\021 \001(\002\022\016\n\006helmet\030\022 \001(\010\022\022\n\ndefuse_kit\030\023 \001("
    "\010\022\037\n\007weapons\030\024 \003(\0132\016.MLWeaponState\"j\n\013ML"
    "GameState\022\034\n\005match\030\001 \001(\0132\r.MLMatchState\022"
    "\034\n\005round\030\002 \001(\0132\r.MLRoundState\022\037\n\007players"
    "\030\003 \003(\0132\016.MLPlayerState\"\\\n\014MLDemoHeader\022\020"
    "\n\010map_name\030\001 \001(\t\022\021\n\ttick_rate\030\002 \001(\005\022\017\n\007v"
    "ersion\030\003 \001(\r\022\026\n\016steam_universe\030\004 \001(\r\"S\n\006"
    "MLTick\022\022\n\ntick_count\030\001 \001(\005\022\033\n\005state\030\002 \001("
    "\0132\014.MLGameState\022\030\n\006events\030\003 \003(\0132\010.MLEven"
    "t\"\270\001\n\nVacNetShot\022\026\n\016steamid_player\030\001 \001(\006"
    "\022\024\n\014round_number\030\002 \001(\005\022\020\n\010hit_type\030\003 \001(\005"
    "\022\023\n\013weapon_type\030\004 \001(\005\022\037\n\027distance_to_hur"
    "t_target\030\005 \001(\002\022\030\n\020delta_yaw_window\030\006 \003(\002"
    "\022\032\n\022delta_pitch_window\030\007 \003(\002*\254\001\n\tEHitGro"
    "up\022\017\n\013EHG_Generic\020\000\022\014\n\010EHG_Head\020\001\022\r\n\tEHG"
    "_Chest\020\002\022\017\n\013EHG_Stomach\020\003\022\017\n\013EHG_LeftArm"
    "\020\004\022\020\n\014EHG_RightArm\020\005\022\017\n\013EHG_LeftLeg\020\006\022\020\n"
    "\014EHG_RightLeg\020\007\022\014\n\010EHG_Gear\020\010\022\014\n\010EHG_Mis"
    "s\020\t*F\n\005ETeam\022\016\n\nET_Unknown\020\000\022\020\n\014ET_Spect"
    "ator\020\001\022\020\n\014ET_Terrorist\020\002\022\t\n\005ET_CT\020\003*\344\001\n\013"
    "EWeaponType\022\r\n\tEWT_Knife\020\000\022\016\n\nEWT_Pistol"
    "\020\001\022\025\n\021EWT_SubMachineGun\020\002\022\r\n\tEWT_Rifle\020\003"
    "\022\017\n\013EWT_Shotgun\020\004\022\023\n\017EWT_SniperRifle\020\005\022\022"
    "\n\016EWT_MachineGun\020\006\022\n\n\006EWT_C4\020\007\022\017\n\013EWT_Gr"
    "enade\020\010\022\021\n\rEWT_Equipment\020\t\022\025\n\021EWT_Stacka"
    "bleItem\020\n\022\017\n\013EWT_Unknown\020\013"
};
static const ::_pbi::DescriptorTable* const descriptor_table_fatdemo_2eproto_deps[1] =
    {
        &::descriptor_table_networkbasetypes_2eproto,
};
static ::absl::once_flag descriptor_table_fatdemo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fatdemo_2eproto = {
    false,
    false,
    1946,
    descriptor_table_protodef_fatdemo_2eproto,
    "fatdemo.proto",
    &descriptor_table_fatdemo_2eproto_once,
    descriptor_table_fatdemo_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_fatdemo_2eproto::offsets,
    file_level_metadata_fatdemo_2eproto,
    file_level_enum_descriptors_fatdemo_2eproto,
    file_level_service_descriptors_fatdemo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fatdemo_2eproto_getter() {
  return &descriptor_table_fatdemo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fatdemo_2eproto(&descriptor_table_fatdemo_2eproto);
const ::google::protobuf::EnumDescriptor* EHitGroup_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_fatdemo_2eproto);
  return file_level_enum_descriptors_fatdemo_2eproto[0];
}
bool EHitGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* ETeam_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_fatdemo_2eproto);
  return file_level_enum_descriptors_fatdemo_2eproto[1];
}
bool ETeam_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* EWeaponType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_fatdemo_2eproto);
  return file_level_enum_descriptors_fatdemo_2eproto[2];
}
bool EWeaponType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class MLDict::_Internal {
 public:
  using HasBits = decltype(std::declval<MLDict>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLDict, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MLDict::MLDict(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLDict)
}
MLDict::MLDict(const MLDict& from) : ::google::protobuf::Message() {
  MLDict* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.key_){},
      decltype(_impl_.val_string_){},
      decltype(_impl_.val_int_){},
      decltype(_impl_.val_float_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.val_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.val_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.val_string_.Set(from._internal_val_string(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.val_int_, &from._impl_.val_int_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.val_float_) -
    reinterpret_cast<char*>(&_impl_.val_int_)) + sizeof(_impl_.val_float_));

  // @@protoc_insertion_point(copy_constructor:MLDict)
}
inline void MLDict::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.key_){},
      decltype(_impl_.val_string_){},
      decltype(_impl_.val_int_){0},
      decltype(_impl_.val_float_){0},
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.val_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.val_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MLDict::~MLDict() {
  // @@protoc_insertion_point(destructor:MLDict)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLDict::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.val_string_.Destroy();
}
void MLDict::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLDict::Clear() {
// @@protoc_insertion_point(message_clear_start:MLDict)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.val_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.val_int_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.val_float_) -
        reinterpret_cast<char*>(&_impl_.val_int_)) + sizeof(_impl_.val_float_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLDict::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 28, 2> MLDict::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLDict, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MLDict_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional float val_float = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_float_)}},
    // optional string key = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLDict, _impl_.key_)}},
    // optional string val_string = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_string_)}},
    // optional int32 val_int = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLDict, _impl_.val_int_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_int_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string key = 1;
    {PROTOBUF_FIELD_OFFSET(MLDict, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string val_string = 2;
    {PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_string_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 val_int = 3;
    {PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_int_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float val_float = 4;
    {PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_float_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\6\3\12\0\0\0\0\0"
    "MLDict"
    "key"
    "val_string"
  }},
};

::uint8_t* MLDict::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLDict)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLDict.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_val_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLDict.val_string");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 val_int = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_val_int(), target);
  }

  // optional float val_float = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_val_float(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLDict)
  return target;
}

::size_t MLDict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLDict)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_key());
    }

    // optional string val_string = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_val_string());
    }

    // optional int32 val_int = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_val_int());
    }

    // optional float val_float = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLDict::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLDict::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLDict::GetClassData() const { return &_class_data_; }


void MLDict::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLDict*>(&to_msg);
  auto& from = static_cast<const MLDict&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLDict)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_val_string(from._internal_val_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.val_int_ = from._impl_.val_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.val_float_ = from._impl_.val_float_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLDict::CopyFrom(const MLDict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLDict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLDict::IsInitialized() const {
  return true;
}

void MLDict::InternalSwap(MLDict* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.val_string_, lhs_arena,
                                       &other->_impl_.val_string_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_float_)
      + sizeof(MLDict::_impl_.val_float_)
      - PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_int_)>(
          reinterpret_cast<char*>(&_impl_.val_int_),
          reinterpret_cast<char*>(&other->_impl_.val_int_));
}

::google::protobuf::Metadata MLDict::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[0]);
}
// ===================================================================

class MLEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MLEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLEvent, _impl_._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MLEvent::MLEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLEvent)
}
MLEvent::MLEvent(const MLEvent& from) : ::google::protobuf::Message() {
  MLEvent* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_){from._impl_.data_},
      decltype(_impl_.event_name_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.event_name_.Set(from._internal_event_name(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:MLEvent)
}
inline void MLEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_){arena},
      decltype(_impl_.event_name_){},
  };
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MLEvent::~MLEvent() {
  // @@protoc_insertion_point(destructor:MLEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.event_name_.Destroy();
}
void MLEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:MLEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.event_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 26, 2> MLEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLEvent, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MLEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .MLDict data = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.data_)}},
    // optional string event_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.event_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string event_name = 1;
    {PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.event_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated .MLDict data = 2;
    {PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::MLDict>()},
  }}, {{
    "\7\12\0\0\0\0\0\0"
    "MLEvent"
    "event_name"
  }},
};

::uint8_t* MLEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_event_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLEvent.event_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .MLDict data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLEvent)
  return target;
}

::size_t MLEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MLDict data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional string event_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_event_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLEvent::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLEvent::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLEvent::GetClassData() const { return &_class_data_; }


void MLEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLEvent*>(&to_msg);
  auto& from = static_cast<const MLEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_event_name(from._internal_event_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLEvent::CopyFrom(const MLEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLEvent::IsInitialized() const {
  return true;
}

void MLEvent::InternalSwap(MLEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_name_, lhs_arena,
                                       &other->_impl_.event_name_, rhs_arena);
}

::google::protobuf::Metadata MLEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[1]);
}
// ===================================================================

class MLMatchState::_Internal {
 public:
  using HasBits = decltype(std::declval<MLMatchState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_._has_bits_);
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_round(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score_ct(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_score_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MLMatchState::MLMatchState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLMatchState)
}
MLMatchState::MLMatchState(const MLMatchState& from) : ::google::protobuf::Message() {
  MLMatchState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.game_mode_){},
      decltype(_impl_.phase_){},
      decltype(_impl_.round_){},
      decltype(_impl_.score_ct_){},
      decltype(_impl_.score_t_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.game_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.game_mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.game_mode_.Set(from._internal_game_mode(), _this->GetArenaForAllocation());
  }
  _impl_.phase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phase_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.phase_.Set(from._internal_phase(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.round_, &from._impl_.round_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.score_t_) -
    reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.score_t_));

  // @@protoc_insertion_point(copy_constructor:MLMatchState)
}
inline void MLMatchState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.game_mode_){},
      decltype(_impl_.phase_){},
      decltype(_impl_.round_){0},
      decltype(_impl_.score_ct_){0},
      decltype(_impl_.score_t_){0},
  };
  _impl_.game_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.game_mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phase_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MLMatchState::~MLMatchState() {
  // @@protoc_insertion_point(destructor:MLMatchState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLMatchState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_mode_.Destroy();
  _impl_.phase_.Destroy();
}
void MLMatchState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLMatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLMatchState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phase_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.round_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.score_t_) -
        reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.score_t_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLMatchState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 35, 2> MLMatchState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MLMatchState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string game_mode = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.game_mode_)}},
    // optional string phase = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.phase_)}},
    // optional int32 round = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLMatchState, _impl_.round_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.round_)}},
    // optional int32 score_ct = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLMatchState, _impl_.score_ct_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_ct_)}},
    // optional int32 score_t = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLMatchState, _impl_.score_t_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_t_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string game_mode = 1;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.game_mode_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string phase = 2;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.phase_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 round = 3;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.round_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 score_ct = 4;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_ct_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 score_t = 5;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_t_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\14\11\5\0\0\0\0\0"
    "MLMatchState"
    "game_mode"
    "phase"
  }},
};

::uint8_t* MLMatchState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLMatchState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string game_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_game_mode();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLMatchState.game_mode");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string phase = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_phase();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLMatchState.phase");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 round = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_round(), target);
  }

  // optional int32 score_ct = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_score_ct(), target);
  }

  // optional int32 score_t = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_score_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLMatchState)
  return target;
}

::size_t MLMatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLMatchState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string game_mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_game_mode());
    }

    // optional string phase = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_phase());
    }

    // optional int32 round = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_round());
    }

    // optional int32 score_ct = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_score_ct());
    }

    // optional int32 score_t = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_score_t());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLMatchState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLMatchState::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLMatchState::GetClassData() const { return &_class_data_; }


void MLMatchState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLMatchState*>(&to_msg);
  auto& from = static_cast<const MLMatchState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLMatchState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_game_mode(from._internal_game_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phase(from._internal_phase());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.round_ = from._impl_.round_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.score_ct_ = from._impl_.score_ct_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.score_t_ = from._impl_.score_t_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLMatchState::CopyFrom(const MLMatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLMatchState::IsInitialized() const {
  return true;
}

void MLMatchState::InternalSwap(MLMatchState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_mode_, lhs_arena,
                                       &other->_impl_.game_mode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phase_, lhs_arena,
                                       &other->_impl_.phase_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_t_)
      + sizeof(MLMatchState::_impl_.score_t_)
      - PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.round_)>(
          reinterpret_cast<char*>(&_impl_.round_),
          reinterpret_cast<char*>(&other->_impl_.round_));
}

::google::protobuf::Metadata MLMatchState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[2]);
}
// ===================================================================

class MLRoundState::_Internal {
 public:
  using HasBits = decltype(std::declval<MLRoundState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_win_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bomb_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MLRoundState::MLRoundState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLRoundState)
}
MLRoundState::MLRoundState(const MLRoundState& from) : ::google::protobuf::Message() {
  MLRoundState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.phase_){},
      decltype(_impl_.bomb_state_){},
      decltype(_impl_.win_team_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.phase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phase_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.phase_.Set(from._internal_phase(), _this->GetArenaForAllocation());
  }
  _impl_.bomb_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bomb_state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.bomb_state_.Set(from._internal_bomb_state(), _this->GetArenaForAllocation());
  }
  _this->_impl_.win_team_ = from._impl_.win_team_;

  // @@protoc_insertion_point(copy_constructor:MLRoundState)
}
inline void MLRoundState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.phase_){},
      decltype(_impl_.bomb_state_){},
      decltype(_impl_.win_team_){0},
  };
  _impl_.phase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phase_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bomb_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bomb_state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MLRoundState::~MLRoundState() {
  // @@protoc_insertion_point(destructor:MLRoundState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLRoundState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phase_.Destroy();
  _impl_.bomb_state_.Destroy();
}
void MLRoundState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLRoundState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLRoundState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.phase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bomb_state_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.win_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLRoundState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 36, 2> MLRoundState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MLRoundState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string phase = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.phase_)}},
    // optional .ETeam win_team = 2 [default = ET_Unknown];
    {::_pbi::TcParser::FastEr0S1,
     {16, 2, 3, PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.win_team_)}},
    // optional string bomb_state = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.bomb_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string phase = 1;
    {PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.phase_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .ETeam win_team = 2 [default = ET_Unknown];
    {PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.win_team_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string bomb_state = 3;
    {PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.bomb_state_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {0, 4},
  }}, {{
    "\14\5\0\12\0\0\0\0"
    "MLRoundState"
    "phase"
    "bomb_state"
  }},
};

::uint8_t* MLRoundState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLRoundState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string phase = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_phase();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLRoundState.phase");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .ETeam win_team = 2 [default = ET_Unknown];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_win_team(), target);
  }

  // optional string bomb_state = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_bomb_state();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLRoundState.bomb_state");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLRoundState)
  return target;
}

::size_t MLRoundState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLRoundState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string phase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_phase());
    }

    // optional string bomb_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_bomb_state());
    }

    // optional .ETeam win_team = 2 [default = ET_Unknown];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_win_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLRoundState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLRoundState::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLRoundState::GetClassData() const { return &_class_data_; }


void MLRoundState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLRoundState*>(&to_msg);
  auto& from = static_cast<const MLRoundState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLRoundState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_phase(from._internal_phase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_bomb_state(from._internal_bomb_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.win_team_ = from._impl_.win_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLRoundState::CopyFrom(const MLRoundState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLRoundState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLRoundState::IsInitialized() const {
  return true;
}

void MLRoundState::InternalSwap(MLRoundState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phase_, lhs_arena,
                                       &other->_impl_.phase_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bomb_state_, lhs_arena,
                                       &other->_impl_.bomb_state_, rhs_arena);
  swap(_impl_.win_team_, other->_impl_.win_team_);
}

::google::protobuf::Metadata MLRoundState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[3]);
}
// ===================================================================

class MLWeaponState::_Internal {
 public:
  using HasBits = decltype(std::declval<MLWeaponState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ammo_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ammo_clip_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ammo_reserve(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recoil_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MLWeaponState::MLWeaponState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLWeaponState)
}
MLWeaponState::MLWeaponState(const MLWeaponState& from) : ::google::protobuf::Message() {
  MLWeaponState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.state_){},
      decltype(_impl_.index_){},
      decltype(_impl_.type_){},
      decltype(_impl_.ammo_clip_){},
      decltype(_impl_.ammo_clip_max_){},
      decltype(_impl_.ammo_reserve_){},
      decltype(_impl_.recoil_index_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.recoil_index_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.recoil_index_));

  // @@protoc_insertion_point(copy_constructor:MLWeaponState)
}
inline void MLWeaponState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.state_){},
      decltype(_impl_.index_){0},
      decltype(_impl_.type_){0},
      decltype(_impl_.ammo_clip_){0},
      decltype(_impl_.ammo_clip_max_){0},
      decltype(_impl_.ammo_reserve_){0},
      decltype(_impl_.recoil_index_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MLWeaponState::~MLWeaponState() {
  // @@protoc_insertion_point(destructor:MLWeaponState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLWeaponState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.state_.Destroy();
}
void MLWeaponState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLWeaponState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLWeaponState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.state_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.index_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.recoil_index_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.recoil_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLWeaponState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 39, 2> MLWeaponState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MLWeaponState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional float recoil_index = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 7, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.recoil_index_)}},
    // optional int32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLWeaponState, _impl_.index_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.index_)}},
    // optional string name = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.name_)}},
    // optional .EWeaponType type = 3 [default = EWT_Knife];
    {::_pbi::TcParser::FastEr0S1,
     {24, 3, 11, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.type_)}},
    // optional int32 ammo_clip = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLWeaponState, _impl_.ammo_clip_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_clip_)}},
    // optional int32 ammo_clip_max = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLWeaponState, _impl_.ammo_clip_max_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_clip_max_)}},
    // optional int32 ammo_reserve = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLWeaponState, _impl_.ammo_reserve_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_reserve_)}},
    // optional string state = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 index = 1;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.index_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string name = 2;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .EWeaponType type = 3 [default = EWT_Knife];
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.type_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 ammo_clip = 4;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_clip_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 ammo_clip_max = 5;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_clip_max_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 ammo_reserve = 6;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_reserve_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string state = 7;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.state_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional float recoil_index = 8;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.recoil_index_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {0, 12},
  }}, {{
    "\15\0\4\0\0\0\0\5\0\0\0\0\0\0\0\0"
    "MLWeaponState"
    "name"
    "state"
  }},
};

::uint8_t* MLWeaponState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLWeaponState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLWeaponState.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .EWeaponType type = 3 [default = EWT_Knife];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // optional int32 ammo_clip = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_ammo_clip(), target);
  }

  // optional int32 ammo_clip_max = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_ammo_clip_max(), target);
  }

  // optional int32 ammo_reserve = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_ammo_reserve(), target);
  }

  // optional string state = 7;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_state();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLWeaponState.state");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional float recoil_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_recoil_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLWeaponState)
  return target;
}

::size_t MLWeaponState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLWeaponState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string state = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_state());
    }

    // optional int32 index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_index());
    }

    // optional .EWeaponType type = 3 [default = EWT_Knife];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 ammo_clip = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ammo_clip());
    }

    // optional int32 ammo_clip_max = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ammo_clip_max());
    }

    // optional int32 ammo_reserve = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ammo_reserve());
    }

    // optional float recoil_index = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLWeaponState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLWeaponState::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLWeaponState::GetClassData() const { return &_class_data_; }


void MLWeaponState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLWeaponState*>(&to_msg);
  auto& from = static_cast<const MLWeaponState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLWeaponState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_state(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ammo_clip_ = from._impl_.ammo_clip_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ammo_clip_max_ = from._impl_.ammo_clip_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ammo_reserve_ = from._impl_.ammo_reserve_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.recoil_index_ = from._impl_.recoil_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLWeaponState::CopyFrom(const MLWeaponState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLWeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLWeaponState::IsInitialized() const {
  return true;
}

void MLWeaponState::InternalSwap(MLWeaponState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.recoil_index_)
      + sizeof(MLWeaponState::_impl_.recoil_index_)
      - PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata MLWeaponState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[4]);
}
// ===================================================================

class MLPlayerState::_Internal {
 public:
  using HasBits = decltype(std::declval<MLPlayerState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgVector& abspos(const MLPlayerState* msg);
  static void set_has_abspos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgQAngle& eyeangle(const MLPlayerState* msg);
  static void set_has_eyeangle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& eyeangle_fwd(const MLPlayerState* msg);
  static void set_has_eyeangle_fwd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_armor(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flashed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_smoked(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_money(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_round_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_round_killhs(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_burning(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_helmet(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_defuse_kit(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::CMsgVector& MLPlayerState::_Internal::abspos(const MLPlayerState* msg) {
  return *msg->_impl_.abspos_;
}
const ::CMsgQAngle& MLPlayerState::_Internal::eyeangle(const MLPlayerState* msg) {
  return *msg->_impl_.eyeangle_;
}
const ::CMsgVector& MLPlayerState::_Internal::eyeangle_fwd(const MLPlayerState* msg) {
  return *msg->_impl_.eyeangle_fwd_;
}
void MLPlayerState::clear_abspos() {
  if (_impl_.abspos_ != nullptr) _impl_.abspos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MLPlayerState::clear_eyeangle() {
  if (_impl_.eyeangle_ != nullptr) _impl_.eyeangle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void MLPlayerState::clear_eyeangle_fwd() {
  if (_impl_.eyeangle_fwd_ != nullptr) _impl_.eyeangle_fwd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
MLPlayerState::MLPlayerState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLPlayerState)
}
MLPlayerState::MLPlayerState(const MLPlayerState& from) : ::google::protobuf::Message() {
  MLPlayerState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.weapons_){from._impl_.weapons_},
      decltype(_impl_.name_){},
      decltype(_impl_.clan_){},
      decltype(_impl_.abspos_){nullptr},
      decltype(_impl_.eyeangle_){nullptr},
      decltype(_impl_.eyeangle_fwd_){nullptr},
      decltype(_impl_.account_id_){},
      decltype(_impl_.entindex_){},
      decltype(_impl_.team_){},
      decltype(_impl_.health_){},
      decltype(_impl_.armor_){},
      decltype(_impl_.flashed_){},
      decltype(_impl_.smoked_){},
      decltype(_impl_.money_){},
      decltype(_impl_.round_kills_){},
      decltype(_impl_.round_killhs_){},
      decltype(_impl_.burning_){},
      decltype(_impl_.helmet_){},
      decltype(_impl_.defuse_kit_){},
      decltype(_impl_.player_slot_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.clan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clan_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.clan_.Set(from._internal_clan(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.abspos_ = new ::CMsgVector(*from._impl_.abspos_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.eyeangle_ = new ::CMsgQAngle(*from._impl_.eyeangle_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.eyeangle_fwd_ = new ::CMsgVector(*from._impl_.eyeangle_fwd_);
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_slot_));

  // @@protoc_insertion_point(copy_constructor:MLPlayerState)
}
inline void MLPlayerState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.weapons_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.clan_){},
      decltype(_impl_.abspos_){nullptr},
      decltype(_impl_.eyeangle_){nullptr},
      decltype(_impl_.eyeangle_fwd_){nullptr},
      decltype(_impl_.account_id_){0},
      decltype(_impl_.entindex_){0},
      decltype(_impl_.team_){0},
      decltype(_impl_.health_){0},
      decltype(_impl_.armor_){0},
      decltype(_impl_.flashed_){0},
      decltype(_impl_.smoked_){0},
      decltype(_impl_.money_){0},
      decltype(_impl_.round_kills_){0},
      decltype(_impl_.round_killhs_){0},
      decltype(_impl_.burning_){0},
      decltype(_impl_.helmet_){false},
      decltype(_impl_.defuse_kit_){false},
      decltype(_impl_.player_slot_){-1},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clan_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MLPlayerState::~MLPlayerState() {
  // @@protoc_insertion_point(destructor:MLPlayerState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLPlayerState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weapons_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.clan_.Destroy();
  if (this != internal_default_instance()) delete _impl_.abspos_;
  if (this != internal_default_instance()) delete _impl_.eyeangle_;
  if (this != internal_default_instance()) delete _impl_.eyeangle_fwd_;
}
void MLPlayerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLPlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLPlayerState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_weapons()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.clan_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.abspos_ != nullptr);
      _impl_.abspos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.eyeangle_ != nullptr);
      _impl_.eyeangle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.eyeangle_fwd_ != nullptr);
      _impl_.eyeangle_fwd_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.account_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.team_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.team_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.health_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.burning_) -
        reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.burning_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.helmet_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.defuse_kit_) -
        reinterpret_cast<char*>(&_impl_.helmet_)) + sizeof(_impl_.defuse_kit_));
    _impl_.player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLPlayerState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 5, 46, 2> MLPlayerState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MLPlayerState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 account_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.account_id_), 5>(),
     {8, 5, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.account_id_)}},
    // optional int32 player_slot = 2 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.player_slot_), 18>(),
     {16, 18, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.player_slot_)}},
    // optional int32 entindex = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.entindex_), 6>(),
     {24, 6, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.entindex_)}},
    // optional string name = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.name_)}},
    // optional string clan = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.clan_)}},
    // optional .ETeam team = 6 [default = ET_Unknown];
    {::_pbi::TcParser::FastEr0S1,
     {48, 7, 3, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.team_)}},
    // optional .CMsgVector abspos = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 1, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.abspos_)}},
    // optional .CMsgQAngle eyeangle = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 2, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.eyeangle_)}},
    // optional .CMsgVector eyeangle_fwd = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 3, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.eyeangle_fwd_)}},
    // optional int32 health = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.health_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.health_)}},
    // optional int32 armor = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.armor_), 9>(),
     {88, 9, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.armor_)}},
    // optional float flashed = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 10, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.flashed_)}},
    // optional float smoked = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 11, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.smoked_)}},
    // optional int32 money = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.money_), 12>(),
     {112, 12, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.money_)}},
    // optional int32 round_kills = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.round_kills_), 13>(),
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.round_kills_)}},
    // optional int32 round_killhs = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 14, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.round_killhs_)}},
    // optional float burning = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 15, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.burning_)}},
    // optional bool helmet = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 16, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.helmet_)}},
    // optional bool defuse_kit = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 17, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.defuse_kit_)}},
    // repeated .MLWeaponState weapons = 20;
    {::_pbi::TcParser::FastMtR2,
     {418, 63, 4, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.weapons_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 account_id = 1;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.account_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 player_slot = 2 [default = -1];
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.player_slot_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 entindex = 3;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.entindex_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string name = 4;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string clan = 5;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.clan_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .ETeam team = 6 [default = ET_Unknown];
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.team_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .CMsgVector abspos = 7;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.abspos_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgQAngle eyeangle = 8;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.eyeangle_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector eyeangle_fwd = 9;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.eyeangle_fwd_), _Internal::kHasBitsOffset + 4, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 health = 10;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.health_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 armor = 11;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.armor_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float flashed = 12;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.flashed_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float smoked = 13;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.smoked_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 money = 14;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.money_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 round_kills = 15;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.round_kills_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 round_killhs = 16;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.round_killhs_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float burning = 17;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.burning_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional bool helmet = 18;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.helmet_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool defuse_kit = 19;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.defuse_kit_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .MLWeaponState weapons = 20;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.weapons_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {0, 4},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::CMsgQAngle>()},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::MLWeaponState>()},
  }}, {{
    "\15\0\0\0\4\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "MLPlayerState"
    "name"
    "clan"
  }},
};

::uint8_t* MLPlayerState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLPlayerState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_account_id(), target);
  }

  // optional int32 player_slot = 2 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_player_slot(), target);
  }

  // optional int32 entindex = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_entindex(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLPlayerState.name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string clan = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_clan();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLPlayerState.clan");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional .ETeam team = 6 [default = ET_Unknown];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_team(), target);
  }

  // optional .CMsgVector abspos = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::abspos(this),
        _Internal::abspos(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle eyeangle = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::eyeangle(this),
        _Internal::eyeangle(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector eyeangle_fwd = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::eyeangle_fwd(this),
        _Internal::eyeangle_fwd(this).GetCachedSize(), target, stream);
  }

  // optional int32 health = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_health(), target);
  }

  // optional int32 armor = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_armor(), target);
  }

  // optional float flashed = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_flashed(), target);
  }

  // optional float smoked = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this->_internal_smoked(), target);
  }

  // optional int32 money = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<14>(
            stream, this->_internal_money(), target);
  }

  // optional int32 round_kills = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_round_kills(), target);
  }

  // optional int32 round_killhs = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_round_killhs(), target);
  }

  // optional float burning = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        17, this->_internal_burning(), target);
  }

  // optional bool helmet = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_helmet(), target);
  }

  // optional bool defuse_kit = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_defuse_kit(), target);
  }

  // repeated .MLWeaponState weapons = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_weapons_size()); i < n; i++) {
    const auto& repfield = this->_internal_weapons().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLPlayerState)
  return target;
}

::size_t MLPlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLPlayerState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MLWeaponState weapons = 20;
  total_size += 2UL * this->_internal_weapons_size();
  for (const auto& msg : this->_internal_weapons()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string clan = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_clan());
    }

    // optional .CMsgVector abspos = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.abspos_);
    }

    // optional .CMsgQAngle eyeangle = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.eyeangle_);
    }

    // optional .CMsgVector eyeangle_fwd = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.eyeangle_fwd_);
    }

    // optional int32 account_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_account_id());
    }

    // optional int32 entindex = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_entindex());
    }

    // optional .ETeam team = 6 [default = ET_Unknown];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 health = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_health());
    }

    // optional int32 armor = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_armor());
    }

    // optional float flashed = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 5;
    }

    // optional float smoked = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 5;
    }

    // optional int32 money = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_money());
    }

    // optional int32 round_kills = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_round_kills());
    }

    // optional int32 round_killhs = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_round_killhs());
    }

    // optional float burning = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 6;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool helmet = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3;
    }

    // optional bool defuse_kit = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3;
    }

    // optional int32 player_slot = 2 [default = -1];
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLPlayerState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLPlayerState::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLPlayerState::GetClassData() const { return &_class_data_; }


void MLPlayerState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLPlayerState*>(&to_msg);
  auto& from = static_cast<const MLPlayerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLPlayerState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_weapons()->MergeFrom(from._internal_weapons());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_clan(from._internal_clan());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_abspos()->::CMsgVector::MergeFrom(
          from._internal_abspos());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_eyeangle()->::CMsgQAngle::MergeFrom(
          from._internal_eyeangle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_eyeangle_fwd()->::CMsgVector::MergeFrom(
          from._internal_eyeangle_fwd());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.health_ = from._impl_.health_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.armor_ = from._impl_.armor_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.flashed_ = from._impl_.flashed_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.smoked_ = from._impl_.smoked_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.money_ = from._impl_.money_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.round_kills_ = from._impl_.round_kills_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.round_killhs_ = from._impl_.round_killhs_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.burning_ = from._impl_.burning_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.helmet_ = from._impl_.helmet_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.defuse_kit_ = from._impl_.defuse_kit_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLPlayerState::CopyFrom(const MLPlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLPlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLPlayerState::IsInitialized() const {
  return true;
}

void MLPlayerState::InternalSwap(MLPlayerState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.weapons_.InternalSwap(&other->_impl_.weapons_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clan_, lhs_arena,
                                       &other->_impl_.clan_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.player_slot_)
      + sizeof(MLPlayerState::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.abspos_)>(
          reinterpret_cast<char*>(&_impl_.abspos_),
          reinterpret_cast<char*>(&other->_impl_.abspos_));
}

::google::protobuf::Metadata MLPlayerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[5]);
}
// ===================================================================

class MLGameState::_Internal {
 public:
  using HasBits = decltype(std::declval<MLGameState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLGameState, _impl_._has_bits_);
  static const ::MLMatchState& match(const MLGameState* msg);
  static void set_has_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MLRoundState& round(const MLGameState* msg);
  static void set_has_round(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::MLMatchState& MLGameState::_Internal::match(const MLGameState* msg) {
  return *msg->_impl_.match_;
}
const ::MLRoundState& MLGameState::_Internal::round(const MLGameState* msg) {
  return *msg->_impl_.round_;
}
MLGameState::MLGameState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLGameState)
}
MLGameState::MLGameState(const MLGameState& from) : ::google::protobuf::Message() {
  MLGameState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.players_){from._impl_.players_},
      decltype(_impl_.match_){nullptr},
      decltype(_impl_.round_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.match_ = new ::MLMatchState(*from._impl_.match_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.round_ = new ::MLRoundState(*from._impl_.round_);
  }

  // @@protoc_insertion_point(copy_constructor:MLGameState)
}
inline void MLGameState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.players_){arena},
      decltype(_impl_.match_){nullptr},
      decltype(_impl_.round_){nullptr},
  };
}
MLGameState::~MLGameState() {
  // @@protoc_insertion_point(destructor:MLGameState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLGameState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.match_;
  if (this != internal_default_instance()) delete _impl_.round_;
}
void MLGameState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLGameState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_players()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.match_ != nullptr);
      _impl_.match_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.round_ != nullptr);
      _impl_.round_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLGameState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> MLGameState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLGameState, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MLGameState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .MLMatchState match = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.match_)}},
    // optional .MLRoundState round = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.round_)}},
    // repeated .MLPlayerState players = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.players_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .MLMatchState match = 1;
    {PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.match_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .MLRoundState round = 2;
    {PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.round_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .MLPlayerState players = 3;
    {PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.players_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::MLMatchState>()},
    {::_pbi::TcParser::GetTable<::MLRoundState>()},
    {::_pbi::TcParser::GetTable<::MLPlayerState>()},
  }}, {{
  }},
};

::uint8_t* MLGameState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLGameState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .MLMatchState match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::match(this),
        _Internal::match(this).GetCachedSize(), target, stream);
  }

  // optional .MLRoundState round = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::round(this),
        _Internal::round(this).GetCachedSize(), target, stream);
  }

  // repeated .MLPlayerState players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLGameState)
  return target;
}

::size_t MLGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLGameState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MLPlayerState players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_internal_players()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .MLMatchState match = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.match_);
    }

    // optional .MLRoundState round = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.round_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLGameState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLGameState::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLGameState::GetClassData() const { return &_class_data_; }


void MLGameState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLGameState*>(&to_msg);
  auto& from = static_cast<const MLGameState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLGameState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_players()->MergeFrom(from._internal_players());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_match()->::MLMatchState::MergeFrom(
          from._internal_match());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_round()->::MLRoundState::MergeFrom(
          from._internal_round());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLGameState::CopyFrom(const MLGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLGameState::IsInitialized() const {
  return true;
}

void MLGameState::InternalSwap(MLGameState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.round_)
      + sizeof(MLGameState::_impl_.round_)
      - PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.match_)>(
          reinterpret_cast<char*>(&_impl_.match_),
          reinterpret_cast<char*>(&other->_impl_.match_));
}

::google::protobuf::Metadata MLGameState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[6]);
}
// ===================================================================

class MLDemoHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<MLDemoHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_._has_bits_);
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tick_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MLDemoHeader::MLDemoHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLDemoHeader)
}
MLDemoHeader::MLDemoHeader(const MLDemoHeader& from) : ::google::protobuf::Message() {
  MLDemoHeader* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.map_name_){},
      decltype(_impl_.tick_rate_){},
      decltype(_impl_.version_){},
      decltype(_impl_.steam_universe_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.map_name_.Set(from._internal_map_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tick_rate_, &from._impl_.tick_rate_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.steam_universe_) -
    reinterpret_cast<char*>(&_impl_.tick_rate_)) + sizeof(_impl_.steam_universe_));

  // @@protoc_insertion_point(copy_constructor:MLDemoHeader)
}
inline void MLDemoHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.map_name_){},
      decltype(_impl_.tick_rate_){0},
      decltype(_impl_.version_){0u},
      decltype(_impl_.steam_universe_){0u},
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MLDemoHeader::~MLDemoHeader() {
  // @@protoc_insertion_point(destructor:MLDemoHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLDemoHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_name_.Destroy();
}
void MLDemoHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLDemoHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MLDemoHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.map_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.tick_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.steam_universe_) -
        reinterpret_cast<char*>(&_impl_.tick_rate_)) + sizeof(_impl_.steam_universe_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLDemoHeader::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 29, 2> MLDemoHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MLDemoHeader_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 steam_universe = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLDemoHeader, _impl_.steam_universe_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.steam_universe_)}},
    // optional string map_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.map_name_)}},
    // optional int32 tick_rate = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLDemoHeader, _impl_.tick_rate_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.tick_rate_)}},
    // optional uint32 version = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLDemoHeader, _impl_.version_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string map_name = 1;
    {PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.map_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 tick_rate = 2;
    {PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.tick_rate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 version = 3;
    {PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.version_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 steam_universe = 4;
    {PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.steam_universe_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\14\10\0\0\0\0\0\0"
    "MLDemoHeader"
    "map_name"
  }},
};

::uint8_t* MLDemoHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLDemoHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_map_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLDemoHeader.map_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 tick_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_tick_rate(), target);
  }

  // optional uint32 version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_version(), target);
  }

  // optional uint32 steam_universe = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_steam_universe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLDemoHeader)
  return target;
}

::size_t MLDemoHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLDemoHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string map_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_map_name());
    }

    // optional int32 tick_rate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_tick_rate());
    }

    // optional uint32 version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_version());
    }

    // optional uint32 steam_universe = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_steam_universe());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLDemoHeader::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLDemoHeader::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLDemoHeader::GetClassData() const { return &_class_data_; }


void MLDemoHeader::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLDemoHeader*>(&to_msg);
  auto& from = static_cast<const MLDemoHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLDemoHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tick_rate_ = from._impl_.tick_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.steam_universe_ = from._impl_.steam_universe_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLDemoHeader::CopyFrom(const MLDemoHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLDemoHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLDemoHeader::IsInitialized() const {
  return true;
}

void MLDemoHeader::InternalSwap(MLDemoHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.map_name_, lhs_arena,
                                       &other->_impl_.map_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.steam_universe_)
      + sizeof(MLDemoHeader::_impl_.steam_universe_)
      - PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.tick_rate_)>(
          reinterpret_cast<char*>(&_impl_.tick_rate_),
          reinterpret_cast<char*>(&other->_impl_.tick_rate_));
}

::google::protobuf::Metadata MLDemoHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[7]);
}
// ===================================================================

class MLTick::_Internal {
 public:
  using HasBits = decltype(std::declval<MLTick>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MLTick, _impl_._has_bits_);
  static void set_has_tick_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::MLGameState& state(const MLTick* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::MLGameState& MLTick::_Internal::state(const MLTick* msg) {
  return *msg->_impl_.state_;
}
MLTick::MLTick(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLTick)
}
MLTick::MLTick(const MLTick& from) : ::google::protobuf::Message() {
  MLTick* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.events_){from._impl_.events_},
      decltype(_impl_.state_){nullptr},
      decltype(_impl_.tick_count_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.state_ = new ::MLGameState(*from._impl_.state_);
  }
  _this->_impl_.tick_count_ = from._impl_.tick_count_;

  // @@protoc_insertion_point(copy_constructor:MLTick)
}
inline void MLTick::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.events_){arena},
      decltype(_impl_.state_){nullptr},
      decltype(_impl_.tick_count_){0},
  };
}
MLTick::~MLTick() {
  // @@protoc_insertion_point(destructor:MLTick)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MLTick::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.state_;
}
void MLTick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MLTick::Clear() {
// @@protoc_insertion_point(message_clear_start:MLTick)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_events()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_.tick_count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MLTick::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> MLTick::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLTick, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MLTick_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 tick_count = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLTick, _impl_.tick_count_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(MLTick, _impl_.tick_count_)}},
    // optional .MLGameState state = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MLTick, _impl_.state_)}},
    // repeated .MLEvent events = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(MLTick, _impl_.events_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 tick_count = 1;
    {PROTOBUF_FIELD_OFFSET(MLTick, _impl_.tick_count_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .MLGameState state = 2;
    {PROTOBUF_FIELD_OFFSET(MLTick, _impl_.state_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .MLEvent events = 3;
    {PROTOBUF_FIELD_OFFSET(MLTick, _impl_.events_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::MLGameState>()},
    {::_pbi::TcParser::GetTable<::MLEvent>()},
  }}, {{
  }},
};

::uint8_t* MLTick::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLTick)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tick_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_tick_count(), target);
  }

  // optional .MLGameState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // repeated .MLEvent events = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLTick)
  return target;
}

::size_t MLTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLTick)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MLEvent events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .MLGameState state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.state_);
    }

    // optional int32 tick_count = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_tick_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MLTick::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MLTick::MergeImpl
};
const ::google::protobuf::Message::ClassData*MLTick::GetClassData() const { return &_class_data_; }


void MLTick::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MLTick*>(&to_msg);
  auto& from = static_cast<const MLTick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLTick)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_state()->::MLGameState::MergeFrom(
          from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tick_count_ = from._impl_.tick_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLTick::CopyFrom(const MLTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MLTick::IsInitialized() const {
  return true;
}

void MLTick::InternalSwap(MLTick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLTick, _impl_.tick_count_)
      + sizeof(MLTick::_impl_.tick_count_)
      - PROTOBUF_FIELD_OFFSET(MLTick, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::google::protobuf::Metadata MLTick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[8]);
}
// ===================================================================

class VacNetShot::_Internal {
 public:
  using HasBits = decltype(std::declval<VacNetShot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_._has_bits_);
  static void set_has_steamid_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_round_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weapon_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distance_to_hurt_target(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

VacNetShot::VacNetShot(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VacNetShot)
}
VacNetShot::VacNetShot(const VacNetShot& from) : ::google::protobuf::Message() {
  VacNetShot* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.delta_yaw_window_){from._impl_.delta_yaw_window_},
      decltype(_impl_.delta_pitch_window_){from._impl_.delta_pitch_window_},
      decltype(_impl_.steamid_player_){},
      decltype(_impl_.round_number_){},
      decltype(_impl_.hit_type_){},
      decltype(_impl_.weapon_type_){},
      decltype(_impl_.distance_to_hurt_target_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.steamid_player_, &from._impl_.steamid_player_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.distance_to_hurt_target_) -
    reinterpret_cast<char*>(&_impl_.steamid_player_)) + sizeof(_impl_.distance_to_hurt_target_));

  // @@protoc_insertion_point(copy_constructor:VacNetShot)
}
inline void VacNetShot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.delta_yaw_window_){arena},
      decltype(_impl_.delta_pitch_window_){arena},
      decltype(_impl_.steamid_player_){::uint64_t{0u}},
      decltype(_impl_.round_number_){0},
      decltype(_impl_.hit_type_){0},
      decltype(_impl_.weapon_type_){0},
      decltype(_impl_.distance_to_hurt_target_){0},
  };
}
VacNetShot::~VacNetShot() {
  // @@protoc_insertion_point(destructor:VacNetShot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VacNetShot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delta_yaw_window_.~RepeatedField();
  _impl_.delta_pitch_window_.~RepeatedField();
}
void VacNetShot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void VacNetShot::Clear() {
// @@protoc_insertion_point(message_clear_start:VacNetShot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_delta_yaw_window()->Clear();
  _internal_mutable_delta_pitch_window()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.steamid_player_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_to_hurt_target_) -
        reinterpret_cast<char*>(&_impl_.steamid_player_)) + sizeof(_impl_.distance_to_hurt_target_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VacNetShot::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> VacNetShot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VacNetShot_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 steamid_player = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.steamid_player_)}},
    // optional int32 round_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VacNetShot, _impl_.round_number_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.round_number_)}},
    // optional int32 hit_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VacNetShot, _impl_.hit_type_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.hit_type_)}},
    // optional int32 weapon_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VacNetShot, _impl_.weapon_type_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.weapon_type_)}},
    // optional float distance_to_hurt_target = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.distance_to_hurt_target_)}},
    // repeated float delta_yaw_window = 6;
    {::_pbi::TcParser::FastF32R1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_yaw_window_)}},
    // repeated float delta_pitch_window = 7;
    {::_pbi::TcParser::FastF32R1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_pitch_window_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed64 steamid_player = 1;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.steamid_player_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional int32 round_number = 2;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.round_number_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 hit_type = 3;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.hit_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 weapon_type = 4;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.weapon_type_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float distance_to_hurt_target = 5;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.distance_to_hurt_target_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // repeated float delta_yaw_window = 6;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_yaw_window_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFloat)},
    // repeated float delta_pitch_window = 7;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_pitch_window_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VacNetShot::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VacNetShot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid_player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        1, this->_internal_steamid_player(), target);
  }

  // optional int32 round_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_round_number(), target);
  }

  // optional int32 hit_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_hit_type(), target);
  }

  // optional int32 weapon_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_weapon_type(), target);
  }

  // optional float distance_to_hurt_target = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_distance_to_hurt_target(), target);
  }

  // repeated float delta_yaw_window = 6;
  for (int i = 0, n = this->_internal_delta_yaw_window_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_delta_yaw_window().Get(i), target);
  }

  // repeated float delta_pitch_window = 7;
  for (int i = 0, n = this->_internal_delta_pitch_window_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_delta_pitch_window().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VacNetShot)
  return target;
}

::size_t VacNetShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VacNetShot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float delta_yaw_window = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_delta_yaw_window_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_delta_yaw_window_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated float delta_pitch_window = 7;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_delta_pitch_window_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_delta_pitch_window_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steamid_player = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional int32 round_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_round_number());
    }

    // optional int32 hit_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_hit_type());
    }

    // optional int32 weapon_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_weapon_type());
    }

    // optional float distance_to_hurt_target = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VacNetShot::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    VacNetShot::MergeImpl
};
const ::google::protobuf::Message::ClassData*VacNetShot::GetClassData() const { return &_class_data_; }


void VacNetShot::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VacNetShot*>(&to_msg);
  auto& from = static_cast<const VacNetShot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VacNetShot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_delta_yaw_window()->MergeFrom(from._internal_delta_yaw_window());
  _this->_internal_mutable_delta_pitch_window()->MergeFrom(from._internal_delta_pitch_window());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_player_ = from._impl_.steamid_player_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.round_number_ = from._impl_.round_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hit_type_ = from._impl_.hit_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.weapon_type_ = from._impl_.weapon_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distance_to_hurt_target_ = from._impl_.distance_to_hurt_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VacNetShot::CopyFrom(const VacNetShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VacNetShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VacNetShot::IsInitialized() const {
  return true;
}

void VacNetShot::InternalSwap(VacNetShot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.delta_yaw_window_.InternalSwap(&other->_impl_.delta_yaw_window_);
  _impl_.delta_pitch_window_.InternalSwap(&other->_impl_.delta_pitch_window_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.distance_to_hurt_target_)
      + sizeof(VacNetShot::_impl_.distance_to_hurt_target_)
      - PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.steamid_player_)>(
          reinterpret_cast<char*>(&_impl_.steamid_player_),
          reinterpret_cast<char*>(&other->_impl_.steamid_player_));
}

::google::protobuf::Metadata VacNetShot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fatdemo_2eproto_getter, &descriptor_table_fatdemo_2eproto_once,
      file_level_metadata_fatdemo_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
