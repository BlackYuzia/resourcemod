// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_usercmd.proto

#include "cs_usercmd.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR CSGOInterpolationInfoPB::CSGOInterpolationInfoPB(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.frac_)*/ 0,
      /*decltype(_impl_.src_tick_)*/ -1,
      /*decltype(_impl_.dst_tick_)*/ -1,
    } {}
struct CSGOInterpolationInfoPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSGOInterpolationInfoPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSGOInterpolationInfoPBDefaultTypeInternal() {}
  union {
    CSGOInterpolationInfoPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSGOInterpolationInfoPBDefaultTypeInternal _CSGOInterpolationInfoPB_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CSGOInputHistoryEntryPB::CSGOInputHistoryEntryPB(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.view_angles_)*/ nullptr,
      /*decltype(_impl_.shoot_position_)*/ nullptr,
      /*decltype(_impl_.target_head_pos_check_)*/ nullptr,
      /*decltype(_impl_.target_abs_pos_check_)*/ nullptr,
      /*decltype(_impl_.target_abs_ang_check_)*/ nullptr,
      /*decltype(_impl_.cl_interp_)*/ nullptr,
      /*decltype(_impl_.sv_interp0_)*/ nullptr,
      /*decltype(_impl_.sv_interp1_)*/ nullptr,
      /*decltype(_impl_.player_interp_)*/ nullptr,
      /*decltype(_impl_.render_tick_count_)*/ 0,
      /*decltype(_impl_.render_tick_fraction_)*/ 0,
      /*decltype(_impl_.player_tick_count_)*/ 0,
      /*decltype(_impl_.player_tick_fraction_)*/ 0,
      /*decltype(_impl_.frame_number_)*/ 0,
      /*decltype(_impl_.target_ent_index_)*/ -1,
    } {}
struct CSGOInputHistoryEntryPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSGOInputHistoryEntryPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSGOInputHistoryEntryPBDefaultTypeInternal() {}
  union {
    CSGOInputHistoryEntryPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSGOInputHistoryEntryPBDefaultTypeInternal _CSGOInputHistoryEntryPB_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CSGOUserCmdPB::CSGOUserCmdPB(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.input_history_)*/ {},
      /*decltype(_impl_.base_)*/ nullptr,
      /*decltype(_impl_.attack3_start_history_index_)*/ -1,
      /*decltype(_impl_.attack1_start_history_index_)*/ -1,
      /*decltype(_impl_.attack2_start_history_index_)*/ -1,
    } {}
struct CSGOUserCmdPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSGOUserCmdPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSGOUserCmdPBDefaultTypeInternal() {}
  union {
    CSGOUserCmdPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSGOUserCmdPBDefaultTypeInternal _CSGOUserCmdPB_default_instance_;
static ::_pb::Metadata file_level_metadata_cs_5fusercmd_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cs_5fusercmd_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cs_5fusercmd_2eproto = nullptr;
const ::uint32_t TableStruct_cs_5fusercmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _impl_.src_tick_),
    PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _impl_.dst_tick_),
    PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _impl_.frac_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.view_angles_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.render_tick_count_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.render_tick_fraction_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.player_tick_count_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.player_tick_fraction_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.cl_interp_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.sv_interp0_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.sv_interp1_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.player_interp_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.frame_number_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.target_ent_index_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.shoot_position_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.target_head_pos_check_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.target_abs_pos_check_),
    PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.target_abs_ang_check_),
    0,
    9,
    10,
    11,
    12,
    5,
    6,
    7,
    8,
    13,
    14,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.base_),
    PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.input_history_),
    PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.attack1_start_history_index_),
    PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.attack2_start_history_index_),
    PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.attack3_start_history_index_),
    0,
    ~0u,
    2,
    3,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::CSGOInterpolationInfoPB)},
        {14, 37, -1, sizeof(::CSGOInputHistoryEntryPB)},
        {52, 65, -1, sizeof(::CSGOUserCmdPB)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_CSGOInterpolationInfoPB_default_instance_._instance,
    &::_CSGOInputHistoryEntryPB_default_instance_._instance,
    &::_CSGOUserCmdPB_default_instance_._instance,
};
const char descriptor_table_protodef_cs_5fusercmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020cs_usercmd.proto\032\026networkbasetypes.pro"
    "to\032\rusercmd.proto\"V\n\027CSGOInterpolationIn"
    "foPB\022\024\n\010src_tick\030\001 \001(\005:\002-1\022\024\n\010dst_tick\030\002"
    " \001(\005:\002-1\022\017\n\004frac\030\003 \001(\002:\0010\"\302\004\n\027CSGOInputH"
    "istoryEntryPB\022 \n\013view_angles\030\002 \001(\0132\013.CMs"
    "gQAngle\022\031\n\021render_tick_count\030\004 \001(\005\022\034\n\024re"
    "nder_tick_fraction\030\005 \001(\002\022\031\n\021player_tick_"
    "count\030\006 \001(\005\022\034\n\024player_tick_fraction\030\007 \001("
    "\002\022+\n\tcl_interp\030\014 \001(\0132\030.CSGOInterpolation"
    "InfoPB\022,\n\nsv_interp0\030\r \001(\0132\030.CSGOInterpo"
    "lationInfoPB\022,\n\nsv_interp1\030\016 \001(\0132\030.CSGOI"
    "nterpolationInfoPB\022/\n\rplayer_interp\030\017 \001("
    "\0132\030.CSGOInterpolationInfoPB\022\024\n\014frame_num"
    "ber\030\024 \001(\005\022\034\n\020target_ent_index\030\010 \001(\005:\002-1\022"
    "#\n\016shoot_position\030\003 \001(\0132\013.CMsgVector\022*\n\025"
    "target_head_pos_check\030\t \001(\0132\013.CMsgVector"
    "\022)\n\024target_abs_pos_check\030\n \001(\0132\013.CMsgVec"
    "tor\022)\n\024target_abs_ang_check\030\013 \001(\0132\013.CMsg"
    "QAngle\"\332\001\n\rCSGOUserCmdPB\022\035\n\004base\030\001 \001(\0132\017"
    ".CBaseUserCmdPB\022/\n\rinput_history\030\002 \003(\0132\030"
    ".CSGOInputHistoryEntryPB\022\'\n\033attack1_star"
    "t_history_index\030\006 \001(\005:\002-1\022\'\n\033attack2_sta"
    "rt_history_index\030\007 \001(\005:\002-1\022\'\n\033attack3_st"
    "art_history_index\030\010 \001(\005:\002-1"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cs_5fusercmd_2eproto_deps[2] =
    {
        &::descriptor_table_networkbasetypes_2eproto,
        &::descriptor_table_usercmd_2eproto,
};
static ::absl::once_flag descriptor_table_cs_5fusercmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cs_5fusercmd_2eproto = {
    false,
    false,
    947,
    descriptor_table_protodef_cs_5fusercmd_2eproto,
    "cs_usercmd.proto",
    &descriptor_table_cs_5fusercmd_2eproto_once,
    descriptor_table_cs_5fusercmd_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_cs_5fusercmd_2eproto::offsets,
    file_level_metadata_cs_5fusercmd_2eproto,
    file_level_enum_descriptors_cs_5fusercmd_2eproto,
    file_level_service_descriptors_cs_5fusercmd_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cs_5fusercmd_2eproto_getter() {
  return &descriptor_table_cs_5fusercmd_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cs_5fusercmd_2eproto(&descriptor_table_cs_5fusercmd_2eproto);
// ===================================================================

class CSGOInterpolationInfoPB::_Internal {
 public:
  using HasBits = decltype(std::declval<CSGOInterpolationInfoPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_._has_bits_);
  static void set_has_src_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dst_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSGOInterpolationInfoPB::CSGOInterpolationInfoPB(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGOInterpolationInfoPB)
}
CSGOInterpolationInfoPB::CSGOInterpolationInfoPB(const CSGOInterpolationInfoPB& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGOInterpolationInfoPB)
}
inline void CSGOInterpolationInfoPB::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.frac_){0},
      decltype(_impl_.src_tick_){-1},
      decltype(_impl_.dst_tick_){-1},
  };
}
CSGOInterpolationInfoPB::~CSGOInterpolationInfoPB() {
  // @@protoc_insertion_point(destructor:CSGOInterpolationInfoPB)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CSGOInterpolationInfoPB::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CSGOInterpolationInfoPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CSGOInterpolationInfoPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGOInterpolationInfoPB)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.frac_ = 0;
    _impl_.src_tick_ = -1;
    _impl_.dst_tick_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CSGOInterpolationInfoPB::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> CSGOInterpolationInfoPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CSGOInterpolationInfoPB_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 src_tick = 1 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInterpolationInfoPB, _impl_.src_tick_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.src_tick_)}},
    // optional int32 dst_tick = 2 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInterpolationInfoPB, _impl_.dst_tick_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.dst_tick_)}},
    // optional float frac = 3 [default = 0];
    {::_pbi::TcParser::FastF32S1,
     {29, 0, 0, PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.frac_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 src_tick = 1 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.src_tick_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 dst_tick = 2 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.dst_tick_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float frac = 3 [default = 0];
    {PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.frac_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CSGOInterpolationInfoPB::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGOInterpolationInfoPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 src_tick = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_src_tick(), target);
  }

  // optional int32 dst_tick = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_dst_tick(), target);
  }

  // optional float frac = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_frac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGOInterpolationInfoPB)
  return target;
}

::size_t CSGOInterpolationInfoPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGOInterpolationInfoPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float frac = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional int32 src_tick = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_src_tick());
    }

    // optional int32 dst_tick = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dst_tick());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CSGOInterpolationInfoPB::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CSGOInterpolationInfoPB::MergeImpl
};
const ::google::protobuf::Message::ClassData*CSGOInterpolationInfoPB::GetClassData() const { return &_class_data_; }


void CSGOInterpolationInfoPB::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CSGOInterpolationInfoPB*>(&to_msg);
  auto& from = static_cast<const CSGOInterpolationInfoPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSGOInterpolationInfoPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.frac_ = from._impl_.frac_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.src_tick_ = from._impl_.src_tick_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dst_tick_ = from._impl_.dst_tick_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSGOInterpolationInfoPB::CopyFrom(const CSGOInterpolationInfoPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGOInterpolationInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CSGOInterpolationInfoPB::IsInitialized() const {
  return true;
}

void CSGOInterpolationInfoPB::InternalSwap(CSGOInterpolationInfoPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.dst_tick_)
      + sizeof(CSGOInterpolationInfoPB::_impl_.dst_tick_)
      - PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.frac_)>(
          reinterpret_cast<char*>(&_impl_.frac_),
          reinterpret_cast<char*>(&other->_impl_.frac_));
}

::google::protobuf::Metadata CSGOInterpolationInfoPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cs_5fusercmd_2eproto_getter, &descriptor_table_cs_5fusercmd_2eproto_once,
      file_level_metadata_cs_5fusercmd_2eproto[0]);
}
// ===================================================================

class CSGOInputHistoryEntryPB::_Internal {
 public:
  using HasBits = decltype(std::declval<CSGOInputHistoryEntryPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_._has_bits_);
  static const ::CMsgQAngle& view_angles(const CSGOInputHistoryEntryPB* msg);
  static void set_has_view_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_render_tick_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_render_tick_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_player_tick_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_player_tick_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CSGOInterpolationInfoPB& cl_interp(const CSGOInputHistoryEntryPB* msg);
  static void set_has_cl_interp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CSGOInterpolationInfoPB& sv_interp0(const CSGOInputHistoryEntryPB* msg);
  static void set_has_sv_interp0(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CSGOInterpolationInfoPB& sv_interp1(const CSGOInputHistoryEntryPB* msg);
  static void set_has_sv_interp1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CSGOInterpolationInfoPB& player_interp(const CSGOInputHistoryEntryPB* msg);
  static void set_has_player_interp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_target_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::CMsgVector& shoot_position(const CSGOInputHistoryEntryPB* msg);
  static void set_has_shoot_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& target_head_pos_check(const CSGOInputHistoryEntryPB* msg);
  static void set_has_target_head_pos_check(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& target_abs_pos_check(const CSGOInputHistoryEntryPB* msg);
  static void set_has_target_abs_pos_check(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgQAngle& target_abs_ang_check(const CSGOInputHistoryEntryPB* msg);
  static void set_has_target_abs_ang_check(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgQAngle& CSGOInputHistoryEntryPB::_Internal::view_angles(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.view_angles_;
}
const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_Internal::cl_interp(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.cl_interp_;
}
const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_Internal::sv_interp0(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.sv_interp0_;
}
const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_Internal::sv_interp1(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.sv_interp1_;
}
const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_Internal::player_interp(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.player_interp_;
}
const ::CMsgVector& CSGOInputHistoryEntryPB::_Internal::shoot_position(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.shoot_position_;
}
const ::CMsgVector& CSGOInputHistoryEntryPB::_Internal::target_head_pos_check(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.target_head_pos_check_;
}
const ::CMsgVector& CSGOInputHistoryEntryPB::_Internal::target_abs_pos_check(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.target_abs_pos_check_;
}
const ::CMsgQAngle& CSGOInputHistoryEntryPB::_Internal::target_abs_ang_check(const CSGOInputHistoryEntryPB* msg) {
  return *msg->_impl_.target_abs_ang_check_;
}
void CSGOInputHistoryEntryPB::clear_view_angles() {
  if (_impl_.view_angles_ != nullptr) _impl_.view_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CSGOInputHistoryEntryPB::clear_shoot_position() {
  if (_impl_.shoot_position_ != nullptr) _impl_.shoot_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CSGOInputHistoryEntryPB::clear_target_head_pos_check() {
  if (_impl_.target_head_pos_check_ != nullptr) _impl_.target_head_pos_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CSGOInputHistoryEntryPB::clear_target_abs_pos_check() {
  if (_impl_.target_abs_pos_check_ != nullptr) _impl_.target_abs_pos_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CSGOInputHistoryEntryPB::clear_target_abs_ang_check() {
  if (_impl_.target_abs_ang_check_ != nullptr) _impl_.target_abs_ang_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CSGOInputHistoryEntryPB::CSGOInputHistoryEntryPB(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGOInputHistoryEntryPB)
}
CSGOInputHistoryEntryPB::CSGOInputHistoryEntryPB(const CSGOInputHistoryEntryPB& from) : ::google::protobuf::Message() {
  CSGOInputHistoryEntryPB* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.view_angles_){nullptr},
      decltype(_impl_.shoot_position_){nullptr},
      decltype(_impl_.target_head_pos_check_){nullptr},
      decltype(_impl_.target_abs_pos_check_){nullptr},
      decltype(_impl_.target_abs_ang_check_){nullptr},
      decltype(_impl_.cl_interp_){nullptr},
      decltype(_impl_.sv_interp0_){nullptr},
      decltype(_impl_.sv_interp1_){nullptr},
      decltype(_impl_.player_interp_){nullptr},
      decltype(_impl_.render_tick_count_){},
      decltype(_impl_.render_tick_fraction_){},
      decltype(_impl_.player_tick_count_){},
      decltype(_impl_.player_tick_fraction_){},
      decltype(_impl_.frame_number_){},
      decltype(_impl_.target_ent_index_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.view_angles_ = new ::CMsgQAngle(*from._impl_.view_angles_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.shoot_position_ = new ::CMsgVector(*from._impl_.shoot_position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.target_head_pos_check_ = new ::CMsgVector(*from._impl_.target_head_pos_check_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.target_abs_pos_check_ = new ::CMsgVector(*from._impl_.target_abs_pos_check_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.target_abs_ang_check_ = new ::CMsgQAngle(*from._impl_.target_abs_ang_check_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.cl_interp_ = new ::CSGOInterpolationInfoPB(*from._impl_.cl_interp_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.sv_interp0_ = new ::CSGOInterpolationInfoPB(*from._impl_.sv_interp0_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.sv_interp1_ = new ::CSGOInterpolationInfoPB(*from._impl_.sv_interp1_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.player_interp_ = new ::CSGOInterpolationInfoPB(*from._impl_.player_interp_);
  }
  ::memcpy(&_impl_.render_tick_count_, &from._impl_.render_tick_count_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.target_ent_index_) -
    reinterpret_cast<char*>(&_impl_.render_tick_count_)) + sizeof(_impl_.target_ent_index_));

  // @@protoc_insertion_point(copy_constructor:CSGOInputHistoryEntryPB)
}
inline void CSGOInputHistoryEntryPB::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.view_angles_){nullptr},
      decltype(_impl_.shoot_position_){nullptr},
      decltype(_impl_.target_head_pos_check_){nullptr},
      decltype(_impl_.target_abs_pos_check_){nullptr},
      decltype(_impl_.target_abs_ang_check_){nullptr},
      decltype(_impl_.cl_interp_){nullptr},
      decltype(_impl_.sv_interp0_){nullptr},
      decltype(_impl_.sv_interp1_){nullptr},
      decltype(_impl_.player_interp_){nullptr},
      decltype(_impl_.render_tick_count_){0},
      decltype(_impl_.render_tick_fraction_){0},
      decltype(_impl_.player_tick_count_){0},
      decltype(_impl_.player_tick_fraction_){0},
      decltype(_impl_.frame_number_){0},
      decltype(_impl_.target_ent_index_){-1},
  };
}
CSGOInputHistoryEntryPB::~CSGOInputHistoryEntryPB() {
  // @@protoc_insertion_point(destructor:CSGOInputHistoryEntryPB)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CSGOInputHistoryEntryPB::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.view_angles_;
  if (this != internal_default_instance()) delete _impl_.shoot_position_;
  if (this != internal_default_instance()) delete _impl_.target_head_pos_check_;
  if (this != internal_default_instance()) delete _impl_.target_abs_pos_check_;
  if (this != internal_default_instance()) delete _impl_.target_abs_ang_check_;
  if (this != internal_default_instance()) delete _impl_.cl_interp_;
  if (this != internal_default_instance()) delete _impl_.sv_interp0_;
  if (this != internal_default_instance()) delete _impl_.sv_interp1_;
  if (this != internal_default_instance()) delete _impl_.player_interp_;
}
void CSGOInputHistoryEntryPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CSGOInputHistoryEntryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGOInputHistoryEntryPB)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.view_angles_ != nullptr);
      _impl_.view_angles_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.shoot_position_ != nullptr);
      _impl_.shoot_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.target_head_pos_check_ != nullptr);
      _impl_.target_head_pos_check_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.target_abs_pos_check_ != nullptr);
      _impl_.target_abs_pos_check_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.target_abs_ang_check_ != nullptr);
      _impl_.target_abs_ang_check_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.cl_interp_ != nullptr);
      _impl_.cl_interp_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.sv_interp0_ != nullptr);
      _impl_.sv_interp0_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.sv_interp1_ != nullptr);
      _impl_.sv_interp1_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    ABSL_DCHECK(_impl_.player_interp_ != nullptr);
    _impl_.player_interp_->Clear();
  }
  if (cached_has_bits & 0x00007e00u) {
    ::memset(&_impl_.render_tick_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.frame_number_) -
        reinterpret_cast<char*>(&_impl_.render_tick_count_)) + sizeof(_impl_.frame_number_));
    _impl_.target_ent_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CSGOInputHistoryEntryPB::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 9, 0, 2> CSGOInputHistoryEntryPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_._has_bits_),
    0, // no _extensions_
    20, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294410241,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CSGOInputHistoryEntryPB_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgQAngle view_angles = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.view_angles_)}},
    // optional .CMsgVector shoot_position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.shoot_position_)}},
    // optional int32 render_tick_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInputHistoryEntryPB, _impl_.render_tick_count_), 9>(),
     {32, 9, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.render_tick_count_)}},
    // optional float render_tick_fraction = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 10, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.render_tick_fraction_)}},
    // optional int32 player_tick_count = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInputHistoryEntryPB, _impl_.player_tick_count_), 11>(),
     {48, 11, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_tick_count_)}},
    // optional float player_tick_fraction = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 12, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_tick_fraction_)}},
    // optional int32 target_ent_index = 8 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInputHistoryEntryPB, _impl_.target_ent_index_), 14>(),
     {64, 14, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_ent_index_)}},
    // optional .CMsgVector target_head_pos_check = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_head_pos_check_)}},
    // optional .CMsgVector target_abs_pos_check = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_abs_pos_check_)}},
    // optional .CMsgQAngle target_abs_ang_check = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_abs_ang_check_)}},
    // optional .CSGOInterpolationInfoPB cl_interp = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.cl_interp_)}},
    // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 6, 6, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.sv_interp0_)}},
    // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 7, 7, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.sv_interp1_)}},
    // optional .CSGOInterpolationInfoPB player_interp = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 8, 8, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_interp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgQAngle view_angles = 2;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.view_angles_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector shoot_position = 3;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.shoot_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 render_tick_count = 4;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.render_tick_count_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float render_tick_fraction = 5;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.render_tick_fraction_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 player_tick_count = 6;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_tick_count_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float player_tick_fraction = 7;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_tick_fraction_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 target_ent_index = 8 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_ent_index_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .CMsgVector target_head_pos_check = 9;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_head_pos_check_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector target_abs_pos_check = 10;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_abs_pos_check_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgQAngle target_abs_ang_check = 11;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_abs_ang_check_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CSGOInterpolationInfoPB cl_interp = 12;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.cl_interp_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.sv_interp0_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.sv_interp1_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CSGOInterpolationInfoPB player_interp = 15;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_interp_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 frame_number = 20;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.frame_number_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgQAngle>()},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::CMsgQAngle>()},
    {::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB>()},
    {::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB>()},
    {::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB>()},
    {::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB>()},
  }}, {{
  }},
};

::uint8_t* CSGOInputHistoryEntryPB::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGOInputHistoryEntryPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgQAngle view_angles = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::view_angles(this),
        _Internal::view_angles(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector shoot_position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::shoot_position(this),
        _Internal::shoot_position(this).GetCachedSize(), target, stream);
  }

  // optional int32 render_tick_count = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_render_tick_count(), target);
  }

  // optional float render_tick_fraction = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_render_tick_fraction(), target);
  }

  // optional int32 player_tick_count = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_player_tick_count(), target);
  }

  // optional float player_tick_fraction = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_player_tick_fraction(), target);
  }

  // optional int32 target_ent_index = 8 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_target_ent_index(), target);
  }

  // optional .CMsgVector target_head_pos_check = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::target_head_pos_check(this),
        _Internal::target_head_pos_check(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector target_abs_pos_check = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::target_abs_pos_check(this),
        _Internal::target_abs_pos_check(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle target_abs_ang_check = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::target_abs_ang_check(this),
        _Internal::target_abs_ang_check(this).GetCachedSize(), target, stream);
  }

  // optional .CSGOInterpolationInfoPB cl_interp = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::cl_interp(this),
        _Internal::cl_interp(this).GetCachedSize(), target, stream);
  }

  // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::sv_interp0(this),
        _Internal::sv_interp0(this).GetCachedSize(), target, stream);
  }

  // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::sv_interp1(this),
        _Internal::sv_interp1(this).GetCachedSize(), target, stream);
  }

  // optional .CSGOInterpolationInfoPB player_interp = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::player_interp(this),
        _Internal::player_interp(this).GetCachedSize(), target, stream);
  }

  // optional int32 frame_number = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        20, this->_internal_frame_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGOInputHistoryEntryPB)
  return target;
}

::size_t CSGOInputHistoryEntryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGOInputHistoryEntryPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgQAngle view_angles = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.view_angles_);
    }

    // optional .CMsgVector shoot_position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.shoot_position_);
    }

    // optional .CMsgVector target_head_pos_check = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_head_pos_check_);
    }

    // optional .CMsgVector target_abs_pos_check = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_abs_pos_check_);
    }

    // optional .CMsgQAngle target_abs_ang_check = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_abs_ang_check_);
    }

    // optional .CSGOInterpolationInfoPB cl_interp = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cl_interp_);
    }

    // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.sv_interp0_);
    }

    // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.sv_interp1_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .CSGOInterpolationInfoPB player_interp = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.player_interp_);
    }

    // optional int32 render_tick_count = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_render_tick_count());
    }

    // optional float render_tick_fraction = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 5;
    }

    // optional int32 player_tick_count = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_player_tick_count());
    }

    // optional float player_tick_fraction = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 5;
    }

    // optional int32 frame_number = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_frame_number());
    }

    // optional int32 target_ent_index = 8 [default = -1];
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_target_ent_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CSGOInputHistoryEntryPB::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CSGOInputHistoryEntryPB::MergeImpl
};
const ::google::protobuf::Message::ClassData*CSGOInputHistoryEntryPB::GetClassData() const { return &_class_data_; }


void CSGOInputHistoryEntryPB::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CSGOInputHistoryEntryPB*>(&to_msg);
  auto& from = static_cast<const CSGOInputHistoryEntryPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSGOInputHistoryEntryPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_view_angles()->::CMsgQAngle::MergeFrom(
          from._internal_view_angles());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shoot_position()->::CMsgVector::MergeFrom(
          from._internal_shoot_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_target_head_pos_check()->::CMsgVector::MergeFrom(
          from._internal_target_head_pos_check());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_target_abs_pos_check()->::CMsgVector::MergeFrom(
          from._internal_target_abs_pos_check());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_target_abs_ang_check()->::CMsgQAngle::MergeFrom(
          from._internal_target_abs_ang_check());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_cl_interp()->::CSGOInterpolationInfoPB::MergeFrom(
          from._internal_cl_interp());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_sv_interp0()->::CSGOInterpolationInfoPB::MergeFrom(
          from._internal_sv_interp0());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_sv_interp1()->::CSGOInterpolationInfoPB::MergeFrom(
          from._internal_sv_interp1());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_player_interp()->::CSGOInterpolationInfoPB::MergeFrom(
          from._internal_player_interp());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.render_tick_count_ = from._impl_.render_tick_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.render_tick_fraction_ = from._impl_.render_tick_fraction_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.player_tick_count_ = from._impl_.player_tick_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.player_tick_fraction_ = from._impl_.player_tick_fraction_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.target_ent_index_ = from._impl_.target_ent_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSGOInputHistoryEntryPB::CopyFrom(const CSGOInputHistoryEntryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGOInputHistoryEntryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CSGOInputHistoryEntryPB::IsInitialized() const {
  return true;
}

void CSGOInputHistoryEntryPB::InternalSwap(CSGOInputHistoryEntryPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_ent_index_)
      + sizeof(CSGOInputHistoryEntryPB::_impl_.target_ent_index_)
      - PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.view_angles_)>(
          reinterpret_cast<char*>(&_impl_.view_angles_),
          reinterpret_cast<char*>(&other->_impl_.view_angles_));
}

::google::protobuf::Metadata CSGOInputHistoryEntryPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cs_5fusercmd_2eproto_getter, &descriptor_table_cs_5fusercmd_2eproto_once,
      file_level_metadata_cs_5fusercmd_2eproto[1]);
}
// ===================================================================

class CSGOUserCmdPB::_Internal {
 public:
  using HasBits = decltype(std::declval<CSGOUserCmdPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_._has_bits_);
  static const ::CBaseUserCmdPB& base(const CSGOUserCmdPB* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attack1_start_history_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attack2_start_history_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attack3_start_history_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CBaseUserCmdPB& CSGOUserCmdPB::_Internal::base(const CSGOUserCmdPB* msg) {
  return *msg->_impl_.base_;
}
void CSGOUserCmdPB::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CSGOUserCmdPB::CSGOUserCmdPB(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGOUserCmdPB)
}
CSGOUserCmdPB::CSGOUserCmdPB(const CSGOUserCmdPB& from) : ::google::protobuf::Message() {
  CSGOUserCmdPB* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.input_history_){from._impl_.input_history_},
      decltype(_impl_.base_){nullptr},
      decltype(_impl_.attack3_start_history_index_){},
      decltype(_impl_.attack1_start_history_index_){},
      decltype(_impl_.attack2_start_history_index_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_ = new ::CBaseUserCmdPB(*from._impl_.base_);
  }
  ::memcpy(&_impl_.attack3_start_history_index_, &from._impl_.attack3_start_history_index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.attack2_start_history_index_) -
    reinterpret_cast<char*>(&_impl_.attack3_start_history_index_)) + sizeof(_impl_.attack2_start_history_index_));

  // @@protoc_insertion_point(copy_constructor:CSGOUserCmdPB)
}
inline void CSGOUserCmdPB::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.input_history_){arena},
      decltype(_impl_.base_){nullptr},
      decltype(_impl_.attack3_start_history_index_){-1},
      decltype(_impl_.attack1_start_history_index_){-1},
      decltype(_impl_.attack2_start_history_index_){-1},
  };
}
CSGOUserCmdPB::~CSGOUserCmdPB() {
  // @@protoc_insertion_point(destructor:CSGOUserCmdPB)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CSGOUserCmdPB::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_history_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_;
}
void CSGOUserCmdPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CSGOUserCmdPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGOUserCmdPB)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_input_history()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    _impl_.attack3_start_history_index_ = -1;
    _impl_.attack1_start_history_index_ = -1;
    _impl_.attack2_start_history_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CSGOUserCmdPB::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> CSGOUserCmdPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967068,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CSGOUserCmdPB_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int32 attack3_start_history_index = 8 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOUserCmdPB, _impl_.attack3_start_history_index_), 1>(),
     {64, 1, 0, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack3_start_history_index_)}},
    // optional .CBaseUserCmdPB base = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.base_)}},
    // repeated .CSGOInputHistoryEntryPB input_history = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.input_history_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 attack1_start_history_index = 6 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOUserCmdPB, _impl_.attack1_start_history_index_), 2>(),
     {48, 2, 0, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack1_start_history_index_)}},
    // optional int32 attack2_start_history_index = 7 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOUserCmdPB, _impl_.attack2_start_history_index_), 3>(),
     {56, 3, 0, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack2_start_history_index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CBaseUserCmdPB base = 1;
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.base_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .CSGOInputHistoryEntryPB input_history = 2;
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.input_history_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 attack1_start_history_index = 6 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack1_start_history_index_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 attack2_start_history_index = 7 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack2_start_history_index_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 attack3_start_history_index = 8 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack3_start_history_index_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CBaseUserCmdPB>()},
    {::_pbi::TcParser::GetTable<::CSGOInputHistoryEntryPB>()},
  }}, {{
  }},
};

::uint8_t* CSGOUserCmdPB::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGOUserCmdPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CBaseUserCmdPB base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated .CSGOInputHistoryEntryPB input_history = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_input_history().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 attack1_start_history_index = 6 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_attack1_start_history_index(), target);
  }

  // optional int32 attack2_start_history_index = 7 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_attack2_start_history_index(), target);
  }

  // optional int32 attack3_start_history_index = 8 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_attack3_start_history_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGOUserCmdPB)
  return target;
}

::size_t CSGOUserCmdPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGOUserCmdPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSGOInputHistoryEntryPB input_history = 2;
  total_size += 1UL * this->_internal_input_history_size();
  for (const auto& msg : this->_internal_input_history()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CBaseUserCmdPB base = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.base_);
    }

    // optional int32 attack3_start_history_index = 8 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_attack3_start_history_index());
    }

    // optional int32 attack1_start_history_index = 6 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_attack1_start_history_index());
    }

    // optional int32 attack2_start_history_index = 7 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_attack2_start_history_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CSGOUserCmdPB::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CSGOUserCmdPB::MergeImpl
};
const ::google::protobuf::Message::ClassData*CSGOUserCmdPB::GetClassData() const { return &_class_data_; }


void CSGOUserCmdPB::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CSGOUserCmdPB*>(&to_msg);
  auto& from = static_cast<const CSGOUserCmdPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSGOUserCmdPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_input_history()->MergeFrom(from._internal_input_history());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_base()->::CBaseUserCmdPB::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attack3_start_history_index_ = from._impl_.attack3_start_history_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.attack1_start_history_index_ = from._impl_.attack1_start_history_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.attack2_start_history_index_ = from._impl_.attack2_start_history_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSGOUserCmdPB::CopyFrom(const CSGOUserCmdPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGOUserCmdPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CSGOUserCmdPB::IsInitialized() const {
  return true;
}

void CSGOUserCmdPB::InternalSwap(CSGOUserCmdPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_history_.InternalSwap(&other->_impl_.input_history_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack2_start_history_index_)
      + sizeof(CSGOUserCmdPB::_impl_.attack2_start_history_index_)
      - PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::google::protobuf::Metadata CSGOUserCmdPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cs_5fusercmd_2eproto_getter, &descriptor_table_cs_5fusercmd_2eproto_once,
      file_level_metadata_cs_5fusercmd_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
